name: HumanEval_23_strlen
language: rust
results:
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.len()\
    \ {\n        0 => 0,\n        _ => string.len() as isize,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n    let len = string.len() as isize;\n   \
    \ let start = string.len() - 1;\n    len - start\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe07uiqe8.rs:12:11\n   |\n\
    12 |     len - start\n   |           ^^^^^ expected `isize`, found `usize`\n\n\
    error[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmpe07uiqe8.rs:12:9\n\
    \   |\n12 |     len - start\n   |         ^ no implementation for `isize - usize`\n\
    \   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut i =\
    \ 0;\n    let mut result = 0;\n    while i < string.len() {\n        result +=\
    \ 1;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.len()\
    \ {\n        0 => 0,\n        n => n as isize,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut i =\
    \ 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    //string.as_bytes().len()\
    \ as isize\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut i =\
    \ 0;\n    let string = string.as_str();\n    while i < string.len() {\n      \
    \  i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx2ye5uga.rs:12:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n12 |     i\n   |     ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     i.try_into().unwrap()\n\
    \   |      ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    return chars.len() as isize;\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let string_array:\
    \ Vec<char> = string.chars().collect();\n    let length = string_array.len();\n\
    \    return length as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut result\
    \ = 0isize;\n    for _ in string.chars() {\n        result += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let s = &string[..];\n\
    \    s.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let s = string.as_bytes();\n\
    \    let mut i = 0;\n    let mut cnt = 0;\n    while i < s.len() {\n        cnt\
    \ += 1;\n        i += 1;\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for c in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    // TODO: Implement\
    \ this.\n    match string.len() {\n        0 => 0,\n        _ => string.len()\
    \ as isize,\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    let mut index: isize = 0;\n    while index\
    \ < chars.len() as isize {\n        index += 1;\n    }\n    index\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.chars().count()\
    \ {\n        0 => 0,\n        x => x as isize,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let s = string.as_bytes();\n\
    \    let mut i = 0;\n    while i < s.len() && s[i] != 0 {\n        i += 1;\n \
    \   }\n    i as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ > 0 {\n        return string.len() as isize;\n    }\n    0\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n    strlen(string[1..].to_string()) + 1\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let bytes =\
    \ string.as_bytes();\n    let mut len = 0;\n    for &byte in bytes {\n       \
    \ len += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n \
    \   assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n    return strlen(string[1..].to_string())\
    \ + 1;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n    1 + strlen(tail(string))\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `tail` in this scope\n  --> /tmp/tmper6qm6m2.rs:10:16\n\
    \   |\n10 |     1 + strlen(tail(string))\n   |                ^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let vec = string.into_bytes();\n\
    \    vec.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    let mut chars = string.chars();\n    while let Some(_) = chars.next()\
    \ {\n        length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut i =\
    \ 0;\n    for _c in string.chars() {\n        i += 1;\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut i =\
    \ 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    let mut chars = string.chars();\n    while let Some(_) = chars.next()\
    \ {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for ch in string.chars() {\n        len += 1;\n    }\n    len\n}\n\
    \nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    unsafe { llvm::LLVMRustGetStringLength(string)\
    \ as isize }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `llvm`\n\
    \ --> /tmp/tmpqdlh12km.rs:7:14\n  |\n7 |     unsafe { llvm::LLVMRustGetStringLength(string)\
    \ as isize }\n  |              ^^^^ use of undeclared crate or module `llvm`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let char_count\
    \ = string.chars().count();\n    char_count as isize\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n    1 + strlen(string[1..].to_string())\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for c in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.as_str()\
    \ {\n        \"\" => 0,\n        x => strlen(String::from(&x[1..])) + 1,\n   \
    \ }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut result\
    \ = 0;\n    for _ in string.chars() {\n        result += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut curr\
    \ = &string[..];\n    let mut len = 0;\n    while !curr.is_empty() {\n       \
    \ match curr.chars().next() {\n            Some(_) => {\n                len +=\
    \ 1;\n                curr = &curr[1..];\n            }\n            None => return\
    \ len,\n        }\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut i =\
    \ 0;\n    while string.get(i..i+1) != \"\" {\n        i += 1;\n    }\n    i\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphq2lb95c.rs:8:33\n  |\n8 |\
    \     while string.get(i..i+1) != \"\" {\n  |                                \
    \ ^^ expected enum `Option`, found `&str`\n  |\n  = note:   expected enum `Option<&str>`\n\
    \          found reference `&'static str`\nhelp: try wrapping the expression in\
    \ `Some`\n  |\n8 |     while string.get(i..i+1) != Some(\"\") {\n  |         \
    \                        +++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphq2lb95c.rs:11:5\n\
    \   |\n6  | fn strlen(string: String) -> isize {\n   |                       \
    \       ----- expected `isize` because of return type\n...\n11 |     i\n   | \
    \    ^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     i.try_into().unwrap()\n\
    \   |      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  let mut len =\
    \ 0;\n  for _ in string.chars() {\n    len += 1;\n  }\n  len\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    // we can unwrap()\
    \ the Option to get the length because we know the string is not null\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    let chars = string.chars();\n    for _ in chars {\n        len +=\
    \ 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let len = string.len()\
    \ as isize;\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    let mut ch = string.chars();\n    loop {\n        match ch.next()\
    \ {\n            Some(_) => len += 1,\n            None => break,\n        }\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    let chars = string.chars();\n    for _ in chars {\n        count +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.chars().count()\
    \ {\n        x if x > 0 => x as isize,\n        _ => 0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  let mut result\
    \ = 0;\n  for c in string.chars() {\n    result += 1;\n  }\n  result\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    // cast to isize\
    \ to be compatible with usize in len\n    string.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut chars\
    \ = string.chars();\n    let mut len = 0;\n    loop {\n        match chars.next()\
    \ {\n            Some(_) => len += 1,\n            None => return len,\n     \
    \   }\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let v: Vec<char>\
    \ = string.chars().collect();\n    v.len() as isize\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let bytes =\
    \ string.into_bytes();\n    bytes.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    // TODO: Determine\
    \ how to get the number of bytes in a string\n    // For now, assume the utf8\
    \ bytes are equal to chars\n    return string.len() as isize;\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let res = string.len()\
    \ as isize;\n    // commented out because was causing rls to error\n    // println!(\"\
    strlen: '{}' -> {}\", string, res);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    // return length\
    \ of given string\n    string.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    unsafe {\n \
    \       libc::strlen(string.as_ptr() as *const i8) as isize\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `libc`\n\
    \ --> /tmp/tmpcp1no6fg.rs:8:9\n  |\n8 |         libc::strlen(string.as_ptr() as\
    \ *const i8) as isize\n  |         ^^^^ use of undeclared crate or module `libc`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    let mut chars = string.chars();\n    while let Some(_) = chars.next()\
    \ {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    // TODO\n  \
    \  0\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7f1o0wcs.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.len()\
    \ {\n        0 => 0,\n        _ => string.len() as isize,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let string_raw:\
    \ *const u8 = string.as_ptr();\n    let mut i: isize = 0;\n    unsafe {\n    \
    \    while *string_raw.offset(i) != 0 {\n            i += 1;\n        }\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.len()\
    \ {\n        0 => 0,\n        1 => 1,\n        x => strlen(string[1..x].to_string())\
    \ + 1,\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut l =\
    \ 0;\n    for c in string.chars() {\n        l += 1;\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    match string.len()\
    \ {\n        0 => 0,\n        s => s as isize,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for i in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut i =\
    \ 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    return string.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut string_len\
    \ = 0;\n    for _ in string.chars() {\n        string_len += 1;\n    }\n    string_len\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ > 0 {\n        string.len() as isize\n    } else {\n        0\n    }\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut chars\
    \ = string.chars();\n    let mut size = 0;\n    loop {\n        match chars.next()\
    \ {\n            Some(_) => size += 1,\n            None => break,\n        }\n\
    \    }\n    size\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for c in string.chars() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n  string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n\n    // https://stackoverflow.com/questions/10862528/string-length-in-rust\n\
    \    let mut iterator = string.chars();\n    let mut length = 0;\n    while iterator.next().is_some()\
    \ {\n        length += 1;\n    }\n\n    length\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    unsafe { string.as_slice().as_ptr()\
    \ as isize - string.as_slice().as_ptr() as isize }\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_slice` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpb5mj5_1u.rs:7:21\n  |\n7 |     unsafe { string.as_slice().as_ptr()\
    \ as isize - string.as_slice().as_ptr() as isize }\n  |                     ^^^^^^^^\
    \ method not found in `String`\n\nerror[E0599]: no method named `as_slice` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpb5mj5_1u.rs:7:59\n  |\n\
    7 |     unsafe { string.as_slice().as_ptr() as isize - string.as_slice().as_ptr()\
    \ as isize }\n  |                                                           ^^^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
