name: HumanEval_140_fix_spaces
language: rust
results:
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut new_text = String::new();\n    let mut space_num\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            space_num\
    \ += 1;\n            if space_num == 1 {\n                new_text.push('_');\n\
    \            } else if space_num == 2 {\n                new_text.push('-');\n\
    \            }\n        } else {\n            new_text.push(ch);\n           \
    \ space_num = 0;\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpuvy6tih4.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut flag =\
    \ false;\n    for c in text.chars() {\n        if c == ' ' {\n            if flag\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n                flag = true;\n            }\n        } else\
    \ {\n            result.push(c);\n            flag = false;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp28nom6po.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::from(\"\");\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c.is_whitespace() {\n        \
    \    spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces == 1 {\n                result.push('_');\n            }\n          \
    \  spaces = 0;\n            result.push(c);\n        }\n    }\n    if spaces ==\
    \ 1 {\n        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_YellowDirtyFellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"`',\
    \ /tmp/tmpup620_92.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().fold(String::new(), |mut acc, ch| {\n\
    \        if acc.ends_with(\"  \") {\n            acc.pop();\n            acc.push('-');\n\
    \        }\n        if ch == ' ' {\n            acc.push('_');\n        } else\
    \ {\n            acc.push(ch);\n        }\n        acc\n    })\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp1liz3cvm.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut fixed = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                fixed.push('_');\n    \
    \        } else if spaces == 2 {\n                fixed.push('-');\n         \
    \   }\n        } else {\n            spaces = 0;\n            fixed.push(c);\n\
    \        }\n    }\n    fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp42k7ekx1.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut output = String::new();\n    let mut previous_char\
    \ = '_';\n    for character in text.chars() {\n        match character {\n   \
    \         ' ' => match previous_char {\n                ' ' => output.push('-'),\n\
    \                _ => output.push('_'),\n            },\n            _ => output.push(character),\n\
    \        }\n        previous_char = character;\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpamghl90r.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.trim().replace(\"  \", \"-\").replace(\" \", \"\
    _\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdelmsgl1.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_was_space\
    \ = false;\n    for ch in text.chars() {\n        match ch {\n            ' '\
    \ => {\n                if prev_was_space {\n                    result.push('-');\n\
    \                } else {\n                    result.push('_');\n           \
    \         prev_was_space = true;\n                }\n            }\n         \
    \   _ => {\n                result.push(ch);\n                prev_was_space =\
    \ false;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpirca8a9t.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                continue;\n            }\n\
    \        } else {\n            spaces = 0;\n        }\n        if c == ' ' {\n\
    \            result.push('_');\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpmsh4x62c.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().fold(String::new(), |mut acc, c| {\n \
    \       if c == ' ' {\n            if let Some(prev) = acc.pop() {\n         \
    \       if prev == ' ' {\n                    acc.push('-');\n               \
    \ } else {\n                    acc.push(prev);\n                    acc.push('_');\n\
    \                }\n            } else {\n                acc.push('_');\n   \
    \         }\n        } else {\n            acc.push(c);\n        }\n        acc\n\
    \    })\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp6npoh2a1.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // let mut replaced_text = String::new();\n    // let\
    \ mut char_count = 0;\n    // for (_idx, ch) in text.chars().enumerate() {\n \
    \   //     if ch == ' ' {\n    //         if char_count == 0 {\n    //       \
    \      replaced_text.push('_');\n    //         } else if char_count > 2 {\n \
    \   //             replaced_text.push('-');\n    //         } else {\n    // \
    \            replaced_text.push('_');\n    //         }\n    //         char_count\
    \ += 1;\n    //     } else {\n    //         replaced_text.push(ch);\n    // \
    \        char_count = 0;\n    //     }\n    // }\n    // replaced_text\n\n   \
    \ // The code above works but there's a way of making the above code simpler using\
    \ a closure\n    text.chars().fold(\n        (true, String::new()),\n        |(prev_was_space,\
    \ mut replaced_text), ch| {\n            if ch == ' ' {\n                if prev_was_space\
    \ {\n                    replaced_text.push('-');\n                } else {\n\
    \                    replaced_text.push('_');\n                }\n           \
    \     (true, replaced_text)\n            } else {\n                replaced_text.push(ch);\n\
    \                (false, replaced_text)\n            }\n        },\n    )\n  \
    \  .1\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9fckn56q.rs:52:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // text.replace(\" \", \"_\")\n    let mut result =\
    \ text.clone();\n    let result_len = result.len();\n    let mut num_spaces =\
    \ 0;\n    let mut index = 0;\n    for (i, c) in result.chars().enumerate() {\n\
    \        if c == ' ' {\n            num_spaces += 1;\n            if num_spaces\
    \ >= 2 {\n                if i != result_len - 1 {\n                    result.remove(index);\n\
    \                    result.insert(index, '-');\n                }\n         \
    \   }\n        } else {\n            if num_spaces > 0 {\n                result.remove(index);\n\
    \                result.insert(index, '_');\n            }\n            num_spaces\
    \ = 0;\n            index = i;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `result` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpu22aoebe.rs:19:21\n   |\n14 |     for (i, c) in\
    \ result.chars().enumerate() {\n   |                   --------------------------\n\
    \   |                   |\n   |                   immutable borrow occurs here\n\
    \   |                   immutable borrow later used here\n...\n19 |          \
    \           result.remove(index);\n   |                     ^^^^^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror[E0502]: cannot borrow `result` as mutable\
    \ because it is also borrowed as immutable\n  --> /tmp/tmpu22aoebe.rs:20:21\n\
    \   |\n14 |     for (i, c) in result.chars().enumerate() {\n   |             \
    \      --------------------------\n   |                   |\n   |            \
    \       immutable borrow occurs here\n   |                   immutable borrow\
    \ later used here\n...\n20 |                     result.insert(index, '-');\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\
    \nerror[E0502]: cannot borrow `result` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpu22aoebe.rs:25:17\n   |\n14 |     for (i, c) in\
    \ result.chars().enumerate() {\n   |                   --------------------------\n\
    \   |                   |\n   |                   immutable borrow occurs here\n\
    \   |                   immutable borrow later used here\n...\n25 |          \
    \       result.remove(index);\n   |                 ^^^^^^^^^^^^^^^^^^^^ mutable\
    \ borrow occurs here\n\nerror[E0502]: cannot borrow `result` as mutable because\
    \ it is also borrowed as immutable\n  --> /tmp/tmpu22aoebe.rs:26:17\n   |\n14\
    \ |     for (i, c) in result.chars().enumerate() {\n   |                   --------------------------\n\
    \   |                   |\n   |                   immutable borrow occurs here\n\
    \   |                   immutable borrow later used here\n...\n26 |          \
    \       result.insert(index, '_');\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explai"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n\tif !text.contains(\" \") {\n\t\treturn text;\n\t}\n\t\
    let count = text.chars().filter(|c| *c == ' ').count();\n\tlet mut new_string\
    \ = String::new();\n\tlet mut first_space = true;\n\tfor (i,c) in text.chars().enumerate()\
    \ {\n\t\tif c == ' ' {\n\t\t\tif first_space {\n\t\t\t\tif i == 0 {\n\t\t\t\t\t\
    new_string.push('_');\n\t\t\t\t} else {\n\t\t\t\t\tnew_string.push('-');\n\t\t\
    \t\t}\n\t\t\t\tfirst_space = false;\n\t\t\t}\n\t\t} else {\n\t\t\tnew_string.push(c);\n\
    \t\t\tfirst_space = true;\n\t\t}\n\t}\n\tnew_string\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmph70rbg3b.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let spaces = text.chars().filter(|c| *c == ' ').count();\n\
    \    if spaces == 0 {\n        return text;\n    }\n    if spaces == 1 {\n   \
    \     return text.replace(\" \", \"_\");\n    }\n    let mut result = String::new();\n\
    \    let mut prev = ' ';\n    for ch in text.chars() {\n        if ch == ' ' {\n\
    \            if prev == ' ' {\n                if result.chars().last().unwrap()\
    \ != '-' {\n                    result.push('-');\n                }\n       \
    \     } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            result.push(ch);\n        }\n        prev = ch;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphyj0k11c.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnr27wrmp.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpq76qesoq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.split_whitespace().collect::<Vec<&str>>().join(\"\
    _\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpth9r194y.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpube534_g.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_space\
    \ = false;\n    let mut count_space = 0;\n    for c in text.chars() {\n      \
    \  if c == ' ' {\n            count_space += 1;\n            if last_space &&\
    \ count_space > 2 {\n                last_space = false;\n                result.push('-');\n\
    \            } else if !last_space {\n                last_space = true;\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ count_space = 0;\n            last_space = false;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp4_8y8vhx.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let words: Vec<&str> = text.split(\" \").collect();\n\
    \    let mut output: String = String::new();\n    for i in 0..words.len() {\n\
    \        let word = words[i];\n        if word.len() == 0 {\n            output.push_str(\"\
    -\");\n        } else {\n            output.push_str(word);\n        }\n     \
    \   if i != words.len() - 1 {\n            output.push_str(\"_\");\n        }\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif_-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpas0w1ixq.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"\
    __\", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpwzll4mko.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    result = result.replace(\"\
    \ \", \"_\");\n    result = result.replace(\"__\", \"-\");\n    result\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpmuc39zym.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().fold(String::new(), |mut s, c| {\n   \
    \     if c == ' ' {\n            if s.ends_with(\"_\") {\n                s.push('-');\n\
    \            } else {\n                s.push('_');\n            }\n        }\
    \ else {\n            s.push(c);\n        }\n        s\n    })\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpjavokryu.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut last_space = false;\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if c.is_whitespace() {\n            if last_space\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n            last_space = true;\n        }\
    \ else {\n            result.push(c);\n            last_space = false;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpe8tw5qi7.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2kxmc5g5.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut index = 0;\n    let mut space_count = 0;\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            if space_count < 2 {\n                result.push('_');\n\
    \            }\n            space_count += 1;\n        } else {\n            if\
    \ space_count >= 2 {\n                result.push('-');\n            }\n     \
    \       space_count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-Dirty__-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphdkny0al.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpmdobfu1n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut prev = '_';\n    let mut result = String::from(\"\
    \");\n    for ch in text.chars() {\n        if ch == ' ' {\n            if prev\
    \ == ' ' {\n                if result.is_empty() {\n                    result.push('_');\n\
    \                } else {\n                    result.push('-');\n           \
    \     }\n            } else {\n                result.push('_');\n           \
    \ }\n        } else {\n            result.push(ch);\n        }\n        prev =\
    \ ch;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpn4aymgcp.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut chars = text.chars();\n    let mut result =\
    \ String::new();\n    let mut prev = '_';\n    while let Some(curr) = chars.next()\
    \ {\n        if curr == ' ' {\n            if prev == ' ' {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(curr);\n        }\n        prev = curr;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpf_sq54ky.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.trim().replace(\" \", \"_\").replace(\"_ _\",\
    \ \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpsiltl2v7.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n\tlet text = text.replace(\" \", \"_\");\n\tlet text =\
    \ text.replace(\"__\", \"-\");\n\ttext\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl7l_xbbc.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let fix_string = String::from(\" \");\n    let replace_string\
    \ = String::from(\"_\");\n    let replace_string2 = String::from(\"-\");\n   \
    \ let text_fix = text.replace(fix_string.as_str(), replace_string.as_str());\n\
    \    let text_fix2 = text_fix.replace(replace_string.as_str(), replace_string2.as_str());\n\
    \    text_fix2\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp4q34q0h6.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvawrlk1_.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut new_text = String::new();\n    let mut i =\
    \ 0;\n    let mut last_space = false;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            if i != 0 {\n                if last_space {\n     \
    \               new_text.push('-');\n                } else {\n              \
    \      new_text.push('_');\n                }\n            }\n            last_space\
    \ = true;\n        } else {\n            new_text.push(c);\n            last_space\
    \ = false;\n        }\n        i += 1;\n    }\n    new_text\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpet5o2n0x.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = String::new();\n    let mut prev_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_space {\n                s.push('-');\n            } else {\n         \
    \       s.push('_');\n            }\n            prev_space = true;\n        }\
    \ else {\n            s.push(c);\n            prev_space = false;\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3za_mrjt.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut previous\
    \ = None;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ previous == Some(' ') {\n                result.push('-');\n            } else\
    \ {\n                result.push('_');\n            }\n        } else {\n    \
    \        result.push(c);\n        }\n        previous = Some(c);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprsj5nbmi.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text.replace(\" \", \"_\");\n    while\
    \ result.contains(\"__\") {\n        result = result.replace(\"__\", \"-\");\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp34slovwz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    return text.replace(\"  \", \"-\")\n              \
    \  .replace(\" \", \"_\");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpn55qd4fk.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpw8o_a22h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = String::from(\"\");\n    let mut i = 0;\n\
    \    let mut space_count = 0;\n    while i < text.len() {\n        let c = text.chars().nth(i).unwrap();\n\
    \        if c.is_whitespace() {\n            space_count += 1;\n            if\
    \ space_count > 2 {\n                s.push('-');\n                space_count\
    \ = 0;\n            }\n        } else {\n            if space_count == 1 {\n \
    \               s.push('_');\n            }\n            space_count = 0;\n  \
    \          s.push(c);\n        }\n        i += 1;\n    }\n    if space_count ==\
    \ 1 {\n        s.push('_');\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_YellowDirtyFellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"`',\
    \ /tmp/tmp9_rsgs5f.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text.clone();\n    for i in 0..result.len()\
    \ {\n        if result.get(i..i+1) == Some(\" \") {\n            let mut counter\
    \ = 0;\n            while result.get(i..i+1) == Some(\" \") {\n              \
    \  counter += 1;\n                i += 1;\n            }\n            if counter\
    \ == 1 {\n                result.replace_range(i-1..i, \"_\");\n            }\
    \ else {\n                result.replace_range(i-counter..i, \"-\");\n       \
    \     }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpjpr0sn5a.rs:15:17\n\
    \   |\n10 |     for i in 0..result.len() {\n   |         -\n   |         |\n \
    \  |         first assignment to `i`\n   |         help: consider making this\
    \ binding mutable: `mut i`\n...\n15 |                 i += 1;\n   |          \
    \       ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                result.push('-');\n        \
    \    }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp31tbi7jf.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.split(\" \").collect::<Vec<&str>>().join(\"_\"\
    )\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp6h3i3lkk.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpeguvy2wb.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpg6ehszoc.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfct574o2.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // this is obviously not the best solution\n    //\
    \ but it's good enough for this course\n    let mut res = String::new();\n   \
    \ let mut prev_is_space = false;\n    for ch in text.chars() {\n        if ch\
    \ == ' ' {\n            if prev_is_space {\n                res.push('-');\n \
    \           } else {\n                res.push('_');\n            }\n        \
    \    prev_is_space = true;\n        } else {\n            res.push(ch);\n    \
    \        prev_is_space = false;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp01zea77r.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut text = text;\n    text = text.replace(\" \"\
    , \"_\");\n    text = text.replace(\"__\", \"-\");\n    text\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpifqyjtxk.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // Write code here\n    String::new()\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"Example\"`', /tmp/tmp_cp5w42g.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // --snip--\n    let mut result = text;\n    let space_regex\
    \ = Regex::new(r\" +\").unwrap();\n    let under_regex = Regex::new(r\"_+\").unwrap();\n\
    \    result = space_regex.replace_all(&result, \" \").to_string();\n    result\
    \ = space_regex.replace_all(&result, \"_\").to_string();\n    result = under_regex.replace_all(&result,\
    \ \"-\").to_string();\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n  -->\
    \ /tmp/tmppj2fdxm7.rs:11:23\n   |\n11 |     let space_regex = Regex::new(r\" +\"\
    ).unwrap();\n   |                       ^^^^^ use of undeclared type `Regex`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Regex`\n  --> /tmp/tmppj2fdxm7.rs:12:23\n\
    \   |\n12 |     let under_regex = Regex::new(r\"_+\").unwrap();\n   |        \
    \               ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let trimmed_text = text.trim().to_string();\n    let\
    \ mut new_text = String::new();\n    let mut skip_counter = 0;\n    for (i, c)\
    \ in trimmed_text.chars().enumerate() {\n        if c == ' ' {\n            new_text.push('_');\n\
    \            skip_counter += 1;\n        } else {\n            if skip_counter\
    \ > 2 {\n                new_text.push('-');\n            }\n            skip_counter\
    \ = 0;\n            new_text.push(c);\n        }\n    }\n    new_text\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpruwzzk4j.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replacen(\"  \", \"-\", 1).replace(\" \", \"_\"\
    )\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty__Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfxd4xh58.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpniu4nzb_.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_previous_space\
    \ = false;\n    let mut has_three_spaces = false;\n    for (index, c) in text.chars().enumerate()\
    \ {\n        if c == ' ' {\n            if is_previous_space {\n             \
    \   if !has_three_spaces {\n                    has_three_spaces = true;\n   \
    \                 result.push('-');\n                }\n            } else {\n\
    \                result.push('_');\n                is_previous_space = true;\n\
    \            }\n        } else {\n            if has_three_spaces {\n        \
    \        has_three_spaces = false;\n            }\n            is_previous_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpkzywty_n.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                consecutive_space\
    \ = true;\n            }\n            prev_space = true;\n            result.push('_');\n\
    \        } else {\n            if consecutive_space {\n                result.push('-');\n\
    \                consecutive_space = false;\n            }\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-Dirty__-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmposy0pvvq.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut ret = String::from(\"\");\n    let mut prev_is_space\
    \ = false;\n    let mut streak = 0;\n    for c in text.chars() {\n        if c\
    \ == ' ' {\n            prev_is_space = true;\n            streak += 1;\n    \
    \    } else {\n            if prev_is_space {\n                if streak > 2 {\n\
    \                    ret.push('-');\n                } else {\n              \
    \      ret.push('_');\n                }\n                streak = 0;\n      \
    \      }\n            prev_is_space = false;\n            ret.push(c);\n     \
    \   }\n    }\n    if prev_is_space {\n        if streak > 2 {\n            ret.push('-');\n\
    \        } else {\n            ret.push('_');\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprrr3xcru.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    result = result.replace(\"\
    \ \", \"_\");\n    let mut space_count = 0;\n    for (index, c) in result.chars().enumerate()\
    \ {\n        if c == '_' {\n            space_count += 1;\n        } else {\n\
    \            space_count = 0;\n        }\n        if space_count > 2 {\n     \
    \       result.replace_range(index - 1..index + 1, \"-\");\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `result` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmps3zhx6a2.rs:19:13\n   |\n12 |     for (index, c)\
    \ in result.chars().enumerate() {\n   |                       --------------------------\n\
    \   |                       |\n   |                       immutable borrow occurs\
    \ here\n   |                       immutable borrow later used here\n...\n19 |\
    \             result.replace_range(index - 1..index + 1, \"-\");\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text.clone();\n    result = result.replace(\"\
    \ \", \"_\");\n    result = result.replace(\"_ _\", \"_\");\n    result = result.replace(\"\
    _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _\", \"-\");\n    result\
    \ = result.replace(\"_ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _\
    \ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _\", \"-\");\n \
    \   result = result.replace(\"_ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _ _ _\
    \ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _ _ _ _ _\", \"-\");\n\
    \    result = result.replace(\"_ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result\
    \ = result.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    \n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmppakhr9wk.rs:41:91\n\
    \   |\n41 |       assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n   |  ___________________________________________________________________________________________^\n\
    42 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpye0j7t9h.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // Implement the function here\n    return text;\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpcoq0rmof.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpnyjpjwk6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let spaces = Regex::new(r\" +\").unwrap();\n    spaces.replace_all(&text,\
    \ \"_\").to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpohkttf_u.rs:9:18\n\
    \  |\n9 |     let spaces = Regex::new(r\" +\").unwrap();\n  |                \
    \  ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp39z2w_0.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.split_whitespace().collect::<Vec<&str>>().join(\"\
    _\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpoyampzig.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let chars: Vec<char> = text.chars().collect();\n  \
    \  let mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for\
    \ c in chars {\n        if c == ' ' {\n            consecutive_spaces += 1;\n\
    \            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp42znp3zk.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpqcm0lc11.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.trim().replace(\" \", \"_\").replace(\"_\", \"\
    -\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwpscquah.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut was_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ was_space {\n                result.push('-');\n            } else {\n     \
    \           result.push('_');\n                was_space = true;\n           \
    \ }\n        } else {\n            result.push(c);\n            was_space = false;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprcqxc_ge.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut underscore_buf = Vec::new();\n    let mut dash_buf\
    \ = Vec::new();\n    let mut spaces_count = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            spaces_count += 1;\n            if spaces_count\
    \ > 2 {\n                dash_buf.push('-');\n            } else {\n         \
    \       underscore_buf.push('_');\n            }\n        } else {\n         \
    \   spaces_count = 0;\n            dash_buf.push(c);\n            underscore_buf.push(c);\n\
    \        }\n    }\n    if spaces_count > 2 {\n        dash_buf.iter().collect()\n\
    \    } else {\n        underscore_buf.iter().collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpgls4uvf0.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3q87yi2f.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut previous_char: char = ' ';\n    let mut result\
    \ = String::new();\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       result.push('_');\n            if previous_char == ' ' {\n           \
    \     result.pop();\n                result.push('-');\n            }\n      \
    \  } else {\n            result.push(c);\n        }\n        previous_char = c;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfn0qdy71.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let space = \" \";\n    let mut result = text.replace(space,\
    \ \"_\");\n    for (i, ch) in result.chars().enumerate() {\n        if ch == '_'\
    \ {\n            let mut j = i + 1;\n            let mut count = 1;\n        \
    \    while result.chars().nth(j) == Some('_') {\n                count += 1;\n\
    \                j += 1;\n            }\n            if count > 2 {\n        \
    \        let before = &result[..i];\n                let after = &result[j..];\n\
    \                result = [before, \"-\", after].concat();\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0506]: cannot assign to `result` because it is borrowed\n    -->\
    \ /tmp/tmppslzug6u.rs:22:17\n     |\n11   |     for (i, ch) in result.chars().enumerate()\
    \ {\n     |                    --------------------------\n     |            \
    \        |\n     |                    borrow of `result` occurs here\n     | \
    \                   borrow later used here\n...\n22   |                 result\
    \ = [before, \"-\", after].concat();\n     |                 ^^^^^^ assignment\
    \ to borrowed `result` occurs here\n     |\n     = note: borrow occurs due to\
    \ deref coercion to `str`\nnote: deref defined here\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0506`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut new_text = String::new();\n    let mut counter\
    \ = 0;\n    for t in text.chars() {\n        if t == ' ' {\n            counter\
    \ += 1;\n            if counter == 1 {\n                new_text.push('_');\n\
    \            } else if counter == 2 {\n                new_text.push('-');\n \
    \           }\n        } else {\n            new_text.push(t);\n            counter\
    \ = 0;\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpwmpevn59.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpx7taancp.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut previous_char = ' ';\n    let mut count = 0;\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            count += 1;\n            if count > 2 {\n          \
    \      result.push('-');\n                count = 0;\n            } else {\n \
    \               result.push('_');\n            }\n        } else {\n         \
    \   result.push(c);\n            count = 0;\n        }\n        previous_char\
    \ = c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpd3ygdmca.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let spaces = \" \";\n    let underscores = \"_\";\n\
    \    let dash = \"-\";\n    let text = text.replace(spaces, underscores);\n  \
    \  text.replace(spaces.repeat(2), dash)\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   -->\
    \ /tmp/tmp68r3r1hk.rs:13:18\n    |\n13  |     text.replace(spaces.repeat(2), dash)\n\
    \    |          ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \    |          |\n    |          required by a bound introduced by this call\n\
    \    |\n    = note: the trait bound `String: Pattern<'_>` is not satisfied\n \
    \   = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `str::<impl str>::replace`\nhelp:\
    \ consider borrowing here\n    |\n13  |     text.replace(&spaces.repeat(2), dash)\n\
    \    |                  +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut ans = text.clone();\n    let mut flag = false;\n\
    \    for i in 0..ans.len() {\n        let cur = ans.chars().nth(i).unwrap();\n\
    \        if cur == ' ' {\n            if flag {\n                ans.replace_range(i..i+1,\
    \ \"-\");\n            } else {\n                ans.replace_range(i..i+1, \"\
    _\");\n                flag = true;\n            }\n        } else {\n       \
    \     flag = false;\n        }\n    }\n    return ans;\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp8z5pwxl3.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    result = result.replace(\"\
    \ \", \"_\");\n    result = result.replace(\"_ _\", \"_\");\n    result = result.replace(\"\
    _ _\", \"_\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpmf9a__4i.rs:57:91\n\
    \   |\n57 |       assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n   |  ___________________________________________________________________________________________^\n\
    58 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpuzcr4bt2.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.split_whitespace().collect::<Vec<&str>>().join(\"\
    _\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpxptyolgq.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let spaces = \" \".repeat(2);\n\
    \    let dash = \"-\";\n    while result.contains(&spaces) {\n        result =\
    \ result.replace(&spaces, &dash);\n    }\n    result = result.replace(\" \", \"\
    _\");\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpw9k3339r.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.split(\" \").collect::<Vec<&str>>().join(\"_\"\
    )\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpnkgm_it5.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut count = 0;\n    text.chars().map(|c| {\n  \
    \      if c == ' ' {\n            count += 1;\n            if count > 2 {\n  \
    \              '-'\n            } else {\n                '_'\n            }\n\
    \        } else {\n            count = 0;\n            c\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplv43_ghf.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut acc = String::new();\n    let mut prev = '\
    \ ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev\
    \ == ' ' {\n                acc.push('-');\n            } else {\n           \
    \     acc.push('_');\n            }\n        } else {\n            acc.push(c);\n\
    \        }\n        prev = c;\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpp6lpamr1.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_is_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_is_space {\n                result.push('-');\n            } else {\n \
    \               result.push('_');\n            }\n            prev_is_space =\
    \ true;\n        } else {\n            result.push(c);\n            prev_is_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpaueya4od.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphgte_24z.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp7h2ozd_e.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpds8tjdro.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut last_ch = '_';\n    let mut output = String::new();\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            if last_ch\
    \ == ' ' {\n                output.push('-');\n            } else {\n        \
    \        output.push('_');\n            }\n        } else {\n            output.push(ch);\n\
    \        }\n        last_ch = ch;\n    }\n    output\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp4ob9wfpa.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    if text.contains(\"  \") {\n        text.replace(\"\
    \  \", \"-\")\n    } else {\n        text.replace(\" \", \"_\")\n    }\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp42i5dwsk.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = String::new();\n    let mut has_space\
    \ = false;\n    let mut spaces = 0;\n    for i in text.chars() {\n        if i.is_whitespace()\
    \ {\n            spaces += 1;\n            if spaces > 2 {\n                res.push('-');\n\
    \                spaces = 0;\n            } else {\n                res.push('_');\n\
    \            }\n            has_space = true;\n        } else {\n            for\
    \ _ in 0..spaces {\n                res.push('_');\n            }\n          \
    \  res.push(i);\n            spaces = 0;\n            has_space = false;\n   \
    \     }\n    }\n    if !has_space {\n        for _ in 0..spaces {\n          \
    \  res.push('_');\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir__Hanif_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6x6h2bny.rs:42:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    return text.replace(' ', '_').replace(\"__\", \"-\"\
    );\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfunzmdx7.rs:9:30\n  |\n9 |\
    \     return text.replace(' ', '_').replace(\"__\", \"-\");\n  |             \
    \                 ^^^ expected `&str`, found `char`\n  |\nhelp: if you meant to\
    \ write a `str` literal, use double quotes\n  |\n9 |     return text.replace('\
    \ ', \"_\").replace(\"__\", \"-\");\n  |                              ~~~\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpddn8b_l2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut in_spaces = false;\n    let mut first_space\
    \ = true;\n    let mut spaces = 0;\n    let mut result = String::new();\n    for\
    \ c in text.chars() {\n        if c.is_whitespace() {\n            spaces += 1;\n\
    \            if in_spaces && spaces > 2 {\n                result.push('-');\n\
    \                in_spaces = false;\n                spaces = 0;\n           \
    \ } else if !in_spaces {\n                in_spaces = true;\n            }\n \
    \       } else {\n            if in_spaces {\n                if first_space {\n\
    \                    result.push('_');\n                    first_space = false;\n\
    \                } else {\n                    result.push(' ');\n           \
    \     }\n                in_spaces = false;\n                spaces = 0;\n   \
    \         }\n            result.push(c);\n        }\n    }\n    if in_spaces {\n\
    \        if first_space {\n            result.push('_');\n        } else {\n \
    \           result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmphlepur93.rs:50:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut has_space\
    \ = false;\n    let mut has_two_space = false;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if has_space {\n                if has_two_space\
    \ {\n                    result.push('-');\n                } else {\n       \
    \             result.push('_');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n            has_space = true;\n\
    \            has_two_space = true;\n        } else {\n            result.push(c);\n\
    \            has_space = false;\n            has_two_space = false;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpiyz8io7c.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut last_char: char = 'a';\n    let mut result:\
    \ String = String::new();\n    for i in text.chars() {\n        if i == ' ' {\n\
    \            if last_char == ' ' {\n                result.push('-');\n      \
    \      } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            result.push(i);\n        }\n        last_char = i;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpiq2zohn2.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_counter\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            space_counter\
    \ += 1;\n            if space_counter > 2 {\n                continue;\n     \
    \       }\n        } else {\n            space_counter = 0;\n        }\n     \
    \   if ch == ' ' {\n            result.push('_');\n        } else {\n        \
    \    result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp7uu3i2a1.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpi1wnt9fp.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_counter\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_counter\
    \ += 1;\n            if space_counter < 3 {\n                result.push('_');\n\
    \            }\n        } else {\n            if space_counter >= 3 {\n      \
    \          result.push('-');\n            }\n            space_counter = 0;\n\
    \            result.push(c);\n        }\n    }\n    if space_counter >= 3 {\n\
    \        result.push('-');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp1jkf8yxk.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(ch);\n        }\n    }\n    if consecutive_spaces == 1 {\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmps4fj_fli.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = text.clone();\n    res = res.replace(\"\
    \ \", \"_\");\n    res = res.replace(\"_ _\", \"-\");\n    res = res.replace(\"\
    _ _\", \"-\");\n    res = res.replace(\"__\", \"_\");\n    res\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpcn8nfwue.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmps4cb_ipw.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut prev_c = ' ';\n    let mut spaces = 0;\n  \
    \  let mut out = String::with_capacity(text.len());\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n        } else {\n     \
    \       if spaces > 2 {\n                out.push('-');\n            } else if\
    \ spaces > 0 {\n                out.push('_');\n            }\n            out.push(c);\n\
    \            spaces = 0;\n        }\n        prev_c = c;\n    }\n    if spaces\
    \ > 2 {\n        out.push('-');\n    } else if spaces > 0 {\n        out.push('_');\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfia83gh1.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut was_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ was_space {\n                result.push('-');\n            } else {\n     \
    \           result.push('_');\n                was_space = true;\n           \
    \ }\n        } else {\n            result.push(c);\n            was_space = false;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfh1n4u95.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let text = text.replace(\" \", \"_\");\n    let result\
    \ = text.replace(\"_ _ _\", \"-\");\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp5_mekq0u.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"\
    ___\", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphjpkslgr.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // let mut output = String::new();\n    // let mut\
    \ two_before = false;\n    // for c in text.chars() {\n    //     if c == ' '\
    \ {\n    //         if two_before {\n    //             output.push('-');\n  \
    \  //         } else {\n    //             output.push('_');\n    //         }\n\
    \    //         two_before = true;\n    //     } else {\n    //         output.push(c);\n\
    \    //         two_before = false;\n    //     }\n    // }\n    // output\n\n\
    \    // alternative solution - using regex\n    // see https://regex101.com/r/RPFQoW/3/\n\
    \    lazy_static! {\n        static ref RE: Regex = Regex::new(r\" {2,}\").unwrap();\n\
    \    }\n    RE.replace_all(&text, \"-\").to_string().replace(\" \", \"_\")\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `lazy_static` in this scope\n  --> /tmp/tmpzalcmgk9.rs:28:5\n\
    \   |\n28 |     lazy_static! {\n   |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `RE` in this scope\n  --> /tmp/tmpzalcmgk9.rs:31:5\n   |\n31 |     RE.replace_all(&text,\
    \ \"-\").to_string().replace(\" \", \"_\")\n   |     ^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    //Your code goes here\n    let mut result = String::new();\n\
    \    let mut previous = '_';\n    for c in text.chars() {\n        if c == ' '\
    \ {\n            if previous == ' ' {\n                result.push('-');\n   \
    \         } else {\n                result.push('_');\n            }\n       \
    \ } else {\n            result.push(c);\n        }\n        previous = c;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpileq4_n7.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().fold(String::new(), |acc, x| {\n     \
    \   match x {\n            ' ' => {\n                if acc.chars().rev().take(2).eq(\"\
    \  \".chars()) {\n                    acc + \"-\"\n                } else {\n\
    \                    acc + \"_\"\n                }\n            }\n         \
    \   _ => acc + &x.to_string(),\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpc4f71h4_.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut ret_str = String::new();\n    let mut space_counter\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_counter\
    \ += 1;\n            if space_counter == 1 {\n                ret_str.push('_');\n\
    \            } else if space_counter > 2 {\n                ret_str.push('-');\n\
    \            }\n        } else {\n            space_counter = 0;\n           \
    \ ret_str.push(c);\n        }\n    }\n    ret_str\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpowxbmtf1.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = \"\".to_string();\n    let mut counter\
    \ = 0;\n    for letter in text.chars() {\n        if letter == ' ' {\n       \
    \     counter += 1;\n            if counter == 1 {\n                result.push('_');\n\
    \            } else if counter >= 2 {\n                result.push('-');\n   \
    \         }\n        } else {\n            result.push(letter);\n            counter\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpieheco1l.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // Your code here!\n    let mut result = String::new();\n\
    \    let mut prev = ' ';\n    for c in text.chars() {\n        if c != ' ' ||\
    \ prev != ' ' {\n            result.push(c);\n        }\n        if c == ' ' &&\
    \ prev == ' ' {\n            result.push('-');\n        }\n        prev = c;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp4jmu76wa.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text.clone();\n    let space = \"\
    \ \".to_string();\n    let underscore = \"_\".to_string();\n    let underscore_space\
    \ = \"_\".to_string();\n    let dash = \"-\".to_string();\n    let dash_space\
    \ = \"-\".to_string();\n    for i in 0..result.len() {\n        if result.as_bytes()[i]\
    \ == space.as_bytes()[0] {\n            result = result.replace(space.as_str(),\
    \ underscore.as_str());\n        }\n    }\n    for i in 0..result.len() {\n  \
    \      if i < result.len() - 2 {\n            if result.as_bytes()[i] == underscore.as_bytes()[0]\n\
    \                && result.as_bytes()[i + 1] == underscore.as_bytes()[0]\n   \
    \             && result.as_bytes()[i + 2] == underscore.as_bytes()[0]\n      \
    \      {\n                result = result.replace(underscore_space.as_str(), dash.as_str());\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa---mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpi0fnxwep.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n\tlet mut result = String::new();\n\tlet mut space_count\
    \ = 0;\n\tfor c in text.chars() {\n\t\tif c == ' ' {\n\t\t\tspace_count += 1;\n\
    \t\t\tif space_count == 1 {\n\t\t\t\tresult.push('_');\n\t\t\t} else if space_count\
    \ > 2 {\n\t\t\t\tresult.push('-');\n\t\t\t}\n\t\t} else {\n\t\t\tspace_count =\
    \ 0;\n\t\t\tresult.push(c);\n\t\t}\n\t}\n\tresult\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpldv4mbt6.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().fold(String::new(), |mut res, x| {\n \
    \       if x.is_whitespace() {\n            if res.ends_with('_') {\n        \
    \        res.push('-');\n            } else {\n                res.push('_');\n\
    \            }\n        } else {\n            res.push(x);\n        }\n      \
    \  res\n    })\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpht4wykjy.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut output = String::new();\n    let mut i = 0;\n\
    \    let text_vec: Vec<char> = text.chars().collect();\n    for letter in text_vec\
    \ {\n        if letter != ' ' {\n            output.push(letter);\n          \
    \  i = 0;\n        } else {\n            i += 1;\n            if i == 1 {\n  \
    \              output.push('_');\n            } else if i == 2 {\n           \
    \     output.push('-');\n            }\n        }\n    }\n    output\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpwhmzmtyp.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces_count\
    \ += 1;\n            if spaces_count == 2 {\n                result.push('-');\n\
    \                spaces_count = 0;\n            }\n        } else {\n        \
    \    if spaces_count == 1 {\n                result.push('_');\n            }\n\
    \            spaces_count = 0;\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2r2nxxse.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!(\"Fix spaces in '{}'\", text);\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Fix spaces in 'Example'', /tmp/tmp3wcxjppz.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let re = Regex::new(r\"\\s+\").unwrap();\n    re.replace_all(&text,\
    \ |caps: &Captures| match caps.get(0).unwrap().as_str() {\n        \" \" => \"\
    _\",\n        _ => \"-\"\n    }).into_owned()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmplgw42rmw.rs:9:14\n\
    \  |\n9 |     let re = Regex::new(r\"\\s+\").unwrap();\n  |              ^^^^^\
    \ use of undeclared type `Regex`\n\nerror[E0412]: cannot find type `Captures`\
    \ in this scope\n  --> /tmp/tmplgw42rmw.rs:10:35\n   |\n10 |     re.replace_all(&text,\
    \ |caps: &Captures| match caps.get(0).unwrap().as_str() {\n   |              \
    \                     ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = String::new();\n    let mut is_replace\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ !is_replace {\n                res.push('_');\n                is_replace =\
    \ true;\n            } else {\n                res.push('-');\n            }\n\
    \        } else {\n            res.push(c);\n            is_replace = false;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpis3vy934.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first_space\
    \ = true;\n    let mut has_space = false;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            if first_space {\n                result.push('_');\n\
    \                first_space = false;\n            } else if has_space {\n   \
    \             result.push('-');\n            }\n            has_space = true;\n\
    \        } else {\n            first_space = true;\n            has_space = false;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphe09j95z.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n\tlet mut result = String::new();\n\tlet mut last_ch =\
    \ ' ';\n\tlet mut last_ch_2 = ' ';\n\tfor ch in text.chars() {\n\t\tif ch == '\
    \ ' {\n\t\t\tif last_ch == ' ' {\n\t\t\t\tif last_ch_2 == ' ' {\n\t\t\t\t\tresult.push('-');\n\
    \t\t\t\t} else {\n\t\t\t\t\tresult.push('_');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\
    \t\tresult.push('_');\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(ch);\n\t\t}\n\t\
    \tlast_ch_2 = last_ch;\n\t\tlast_ch = ch;\n\t}\n\treturn result;\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpcr7snbqf.rs:37:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().map(|c| \n        if c == ' ' {\n    \
    \        if let Some(last) = text.chars().last() {\n                if last ==\
    \ ' ' {\n                    '-'\n                } else {\n                 \
    \   '_'\n                }\n            } else {\n                '_'\n      \
    \      }\n        } else {\n            c\n        }\n    ).collect()\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp39erfqwk.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut has_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if consecutive_spaces < 2 {\n            \
    \    result.push('_');\n            } else {\n                result.push('-');\n\
    \            }\n            consecutive_spaces += 1;\n            has_space =\
    \ true;\n        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    if !has_space {\n        result = text;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpn3_6idfq.rs:37:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let v: Vec<char> = text.chars().collect();\n    let\
    \ mut result = String::new();\n    let mut space_count = 0;\n    for c in v {\n\
    \        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ > 2 {\n                result.push('-');\n                space_count = 0;\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(c);\n            space_count = 0;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpb9lrcufi.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    if text.is_empty() {\n        return text;\n    }\n\
    \    let mut curr = '_';\n    let mut prev = '_';\n    let mut new_text = String::new();\n\
    \    for c in text.chars() {\n        if prev == ' ' && curr == ' ' {\n      \
    \      new_text.push('-');\n        } else if c == ' ' {\n            new_text.push('_');\n\
    \        } else {\n            new_text.push(c);\n        }\n        prev = curr;\n\
    \        curr = c;\n    }\n    return new_text;\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-irty__-ellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp76t61w3l.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut text = text;\n    let mut index = 0;\n    let\
    \ mut previous_space = false;\n    loop {\n        let index_of_space = text.chars().position(|c|\
    \ c == ' ');\n        if index_of_space == None {\n            break;\n      \
    \  }\n        let index_of_space = index_of_space.unwrap();\n        let character\
    \ = text.chars().nth(index_of_space).unwrap();\n        if character == ' ' {\n\
    \            if previous_space {\n                text.replace_range(index_of_space..index_of_space\
    \ + 1, \"-\");\n            } else {\n                text.replace_range(index_of_space..index_of_space\
    \ + 1, \"_\");\n            }\n            previous_space = true;\n        } else\
    \ {\n            previous_space = false;\n        }\n        index = index_of_space\
    \ + 1;\n    }\n    text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6rd8uv0e.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n\tlet replace_spaces = text.replace(\" \", \"_\");\n\t\
    let replace_consecutive_spaces = replace_spaces.replace(\"__\", \"-\");\n\treturn\
    \ replace_consecutive_spaces;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpw3d4hxn8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_counter\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            space_counter\
    \ += 1;\n            if space_counter == 1 {\n                result.push('_');\n\
    \            } else if space_counter == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_counter = 0;\n           \
    \ result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpi5a9d8mr.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"\
    __\", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpg2x4fhlq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = String::new();\n    let mut counter =\
    \ 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            if counter\
    \ >= 2 {\n                res.push('-');\n            } else {\n             \
    \   res.push('_');\n            }\n            counter += 1;\n        } else {\n\
    \            res.push(ch);\n            counter = 0;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpbsogdtbh.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut answer = String::new();\n    let mut space_count\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 2 {\n                answer.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            if\
    \ ch == ' ' {\n                answer.push('_');\n            } else {\n     \
    \           answer.push(ch);\n            }\n        }\n    }\n    answer\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpcgjrr5zd.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut new_text = String::new();\n    let mut counter\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            counter\
    \ += 1;\n            if counter > 2 {\n                new_text.push('-');\n \
    \           } else {\n                new_text.push('_');\n            }\n   \
    \     } else {\n            counter = 0;\n            new_text.push(c);\n    \
    \    }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp5mg39ihm.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpw5das39d.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpsmb7ue3v.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpcanyloxv.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpznxa_cdz.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text.replace(\" \", \"_\");\n    result\
    \ = result.replace(\"__\", \"-\");\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphdn_z7_e.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut ans = String::from(\"\");\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                ans.push('_');\n      \
    \      } else if spaces == 2 {\n                ans.push('-');\n            }\n\
    \        } else {\n            spaces = 0;\n            ans.push(c);\n       \
    \ }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp6e4m4im9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut count = 0;\n    let mut space = false;\n  \
    \  let mut res = String::new();\n    for ch in text.chars() {\n        if ch ==\
    \ ' ' {\n            count += 1;\n            space = true;\n        } else {\n\
    \            count = 0;\n            space = false;\n        }\n        if count\
    \ > 2 {\n            continue;\n        }\n        if space {\n            res.push('_');\n\
    \        } else {\n            res.push(ch);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp6yjxqeb3.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut output = String::from(\"\");\n    let mut last_character_was_space\
    \ = false;\n    for ch in text.chars() {\n        match ch {\n            ' '\
    \ => {\n                if last_character_was_space {\n                    output.push('-');\n\
    \                } else {\n                    output.push('_');\n           \
    \     }\n                last_character_was_space = true;\n            },\n  \
    \          _ => {\n                output.push(ch);\n                last_character_was_space\
    \ = false;\n            }\n        }\n    }\n    output\n}\n\nfn main() {\n  \
    \  let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzh_imkw2.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut parts = text.split(' ');\n    let mut result\
    \ = String::new();\n    let mut first = true;\n    let mut count = 0;\n    for\
    \ part in parts {\n        if first {\n            result.push_str(part);\n  \
    \          first = false;\n        } else {\n            if part.len() > 0 {\n\
    \                if count > 1 {\n                    result.push('-');\n     \
    \           } else {\n                    result.push('_');\n                }\n\
    \                result.push_str(part);\n                count = 0;\n        \
    \    } else {\n                count += 1;\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpk_jdwaj4.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!(\"fix_spaces('{}')\", text);\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: fix_spaces('Example')', /tmp/tmpa6e0estt.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxvw46hae.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            count\
    \ += 1;\n            if count == 1 {\n                result.push('_');\n    \
    \        } else if count == 2 {\n                result.push('-');\n         \
    \   }\n        } else {\n            count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpsz5y1xvf.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = String::new();\n    let mut space_flag\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ space_flag {\n                res.push('-');\n            } else {\n       \
    \         res.push('_');\n                space_flag = true;\n            }\n\
    \        } else {\n            res.push(c);\n            space_flag = false;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5kzjq42n.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_is_space\
    \ = false;\n    for ch in text.chars() {\n        if ch == ' ' {\n           \
    \ if prev_is_space {\n                result.push('-');\n            } else {\n\
    \                result.push('_');\n            }\n            prev_is_space =\
    \ true;\n        } else {\n            result.push(ch);\n            prev_is_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphgz1yhpa.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut new_text = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            continue;\n        } else {\n            if spaces == 1 {\n\
    \                new_text.push('_');\n            } else if spaces > 1 {\n   \
    \             new_text.push('-');\n            }\n            new_text.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    new_text\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpnv4knuor.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut last = ' ';\n    let mut res = String::new();\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if last == '\
    \ ' {\n                res.push('-');\n            } else {\n                res.push('_');\n\
    \            }\n        } else {\n            res.push(c);\n        }\n      \
    \  last = c;\n    }\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpp3krwp7b.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = String::new();\n    let mut space_counter\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_counter\
    \ += 1;\n            if space_counter == 1 {\n                res.push('_');\n\
    \            } else if space_counter > 2 {\n                res.push('-');\n \
    \           }\n        } else {\n            space_counter = 0;\n            res.push(c);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp_p1kgqhg.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp1immo_p8.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // panic!(\"Not implemented\");\n    let res = text.replace(\"\
    \ \", \"_\");\n    let res = res.replace(\"__\", \"_\");\n    let res = res.replace(\"\
    ___\", \"-\");\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp1l9qvdvh.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut chars = text.chars();\n    let mut out = String::new();\n\
    \    let mut last = ' ';\n    let mut last_last = ' ';\n    let mut space_count\
    \ = 0;\n    while let Some(ch) = chars.next() {\n        if ch == ' ' {\n    \
    \        space_count += 1;\n            if space_count == 2 {\n              \
    \  if last_last == ' ' {\n                    out.push('-');\n               \
    \ } else {\n                    out.push('_');\n                }\n          \
    \  }\n        } else {\n            if space_count > 0 {\n                out.push('_');\n\
    \            }\n            space_count = 0;\n            out.push(ch);\n    \
    \    }\n        last_last = last;\n        last = ch;\n    }\n    out\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpaogt3crc.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::from(\"\");\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                spaces = 0;\n              \
    \  result.push('-');\n            }\n        } else {\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpvse_uf9q.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = text.replace(\" \", \"_\");\n    while\
    \ res.contains(\"__\") {\n        res = res.replace(\"__\", \"-\");\n    }\n \
    \   return res;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp8cc1u1os.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces_count\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            spaces_count\
    \ += 1;\n            if spaces_count > 2 {\n                continue;\n      \
    \      }\n        } else {\n            spaces_count = 0;\n        }\n       \
    \ result.push(match ch {\n            ' ' => {\n                if spaces_count\
    \ > 2 {\n                    '-'\n                } else {\n                 \
    \   '_'\n                }\n            }\n            _ => ch,\n        });\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpnhvszhmn.rs:39:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzcxgwgzs.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpa4h0iggx.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut fixed_spaces = text.clone();\n    for space\
    \ in fixed_spaces.matches(\" \") {\n        if space.len() > 2 {\n           \
    \ fixed_spaces = fixed_spaces.replace(\"   \", \"-\");\n        } else {\n   \
    \         fixed_spaces = fixed_spaces.replace(\" \", \"_\");\n        }\n    }\n\
    \    fixed_spaces\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0506]: cannot assign to `fixed_spaces` because it is borrowed\n\
    \    --> /tmp/tmp2v2zc4sy.rs:12:13\n     |\n10   |     for space in fixed_spaces.matches(\"\
    \ \") {\n     |                  -------------------------\n     |           \
    \       |\n     |                  borrow of `fixed_spaces` occurs here\n    \
    \ |                  borrow later used here\n11   |         if space.len() > 2\
    \ {\n12   |             fixed_spaces = fixed_spaces.replace(\"   \", \"-\");\n\
    \     |             ^^^^^^^^^^^^ assignment to borrowed `fixed_spaces` occurs\
    \ here\n     |\n     = note: borrow occurs due to deref coercion to `str`\nnote:\
    \ deref defined here\n\nerror[E0506]: cannot assign to `fixed_spaces` because\
    \ it is borrowed\n    --> /tmp/tmp2v2zc4sy.rs:14:13\n     |\n10   |     for space\
    \ in fixed_spaces.matches(\" \") {\n     |                  -------------------------\n\
    \     |                  |\n     |                  borrow of `fixed_spaces` occurs\
    \ here\n     |                  borrow later used here\n...\n14   |          \
    \   fixed_spaces = fixed_spaces.replace(\" \", \"_\");\n     |             ^^^^^^^^^^^^\
    \ assignment to borrowed `fixed_spaces` occurs here\n     |\n     = note: borrow\
    \ occurs due to deref coercion to `str`\nnote: deref defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0506`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6h1nzyzy.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut word_iter\
    \ = text.split_whitespace();\n    loop {\n        let word = match word_iter.next()\
    \ {\n            Some(w) => w,\n            None => break,\n        };\n     \
    \   if !result.is_empty() {\n            result.push('_');\n        }\n      \
    \  result.push_str(word);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgf7iu1wn.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp_ragy9yu.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n\ttext.replace(\"  \", \"-\").replace(\" \", \"_\")\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpw8sd6xx2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut count = 0;\n    let mut result = String::new();\n\
    \    for char in text.chars() {\n        if char == ' ' {\n            count +=\
    \ 1;\n            if count > 2 {\n                count = 2;\n            }\n\
    \        } else {\n            count = 0;\n        }\n        if count == 1 {\n\
    \            result.push('_');\n        } else if count == 2 {\n            result.push('-');\n\
    \        } else {\n            result.push(char);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp1288f5i1.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::from(\"\");\n    let mut is_last_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if !is_last_space {\n                consecutive_spaces\
    \ = 1;\n                result.push('_');\n            } else {\n            \
    \    consecutive_spaces += 1;\n                if consecutive_spaces > 2 {\n \
    \                   result.push('-');\n                }\n            }\n    \
    \        is_last_space = true;\n        } else {\n            result.push(c);\n\
    \            is_last_space = false;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmptrq_2o6c.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpktkcpenm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut lst_letter:\
    \ char = '-';\n    for letter in text.chars() {\n        if letter == ' ' {\n\
    \            if lst_letter == ' ' {\n                result.push('-');\n     \
    \       } else {\n                result.push('_');\n            }\n        }\
    \ else {\n            result.push(letter);\n        }\n        lst_letter = letter;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfb3qtl_x.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let text: String = text.chars().map(|x| if x == ' '\
    \ { '_' } else { x }).collect();\n    text.replace(\"__\", \"-\")\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpdu35yh_p.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // TODO: Implement\n    unimplemented!();\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdk0e5hxp.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let spaces = \" \".repeat(3);\n    let stars = \"-\"\
    .repeat(3);\n    text.replace(\" \", \"_\").replace(&spaces, &stars)\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp5auuof3n.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text.clone();\n    result = result.replace(\"\
    \ \", \"_\");\n    result = result.replace(\"_ _ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpjzmvombo.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpudam_o88.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut has_prev_space = false;\n    let mut has_prev_prev_space\
    \ = false;\n    let mut result = String::new();\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if has_prev_space {\n                if has_prev_prev_space\
    \ {\n                    continue;\n                } else {\n               \
    \     result.push('-');\n                    has_prev_prev_space = true;\n   \
    \             }\n            } else {\n                result.push('_');\n   \
    \             has_prev_space = true;\n            }\n        } else {\n      \
    \      result.push(c);\n            has_prev_space = false;\n            has_prev_prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpw_9xrvgt.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"_ _ _\", \"-\"\
    )\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3193yw55.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5k34h400.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut ans = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces == 1 {\n                ans.push('_');\n\
    \            } else if consecutive_spaces > 2 {\n                ans.push('-');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      ans.push(ch);\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp7ff6bd6m.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2jo0jqb1.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut was_space = false;\n    let mut num_spaces\
    \ = 0;\n    let mut result = String::new();\n    for ch in text.chars() {\n  \
    \      if ch == ' ' {\n            if !was_space {\n                num_spaces\
    \ = 1;\n                was_space = true;\n            } else {\n            \
    \    num_spaces += 1;\n            }\n        } else {\n            if was_space\
    \ {\n                if num_spaces <= 2 {\n                    for _ in 0..num_spaces\
    \ {\n                        result.push('_');\n                    }\n      \
    \          } else {\n                    result.push('-');\n                }\n\
    \                was_space = false;\n            }\n            result.push(ch);\n\
    \        }\n    }\n    if was_space {\n        if num_spaces <= 2 {\n        \
    \    for _ in 0..num_spaces {\n                result.push('_');\n           \
    \ }\n        } else {\n            result.push('-');\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(' ', \"_\")\n        .replace(\"__\",\
    \ \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpf648xqtw.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut prev_space = false;\n    let mut now_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    let mut res = \"\".to_string();\n\
    \    for c in text.chars() {\n        prev_space = now_space;\n        now_space\
    \ = c == ' ';\n        if now_space {\n            consecutive_spaces += 1;\n\
    \        } else {\n            consecutive_spaces = 0;\n        }\n        if\
    \ consecutive_spaces > 2 {\n            res.push('-');\n        } else if now_space\
    \ {\n            res.push('_');\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3e102psm.rs:37:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut tmp = text.clone();\n    tmp = tmp.replace(\"\
    \ \", \"_\");\n    tmp = tmp.replace(\"__\", \"-\");\n    tmp = tmp.replace(\"\
    ___\", \"-\");\n    tmp = tmp.replace(\"____\", \"-\");\n    tmp = tmp.replace(\"\
    _____\", \"-\");\n    tmp = tmp.replace(\"______\", \"-\");\n    tmp = tmp.replace(\"\
    _______\", \"-\");\n    tmp = tmp.replace(\"________\", \"-\");\n    tmp = tmp.replace(\"\
    _________\", \"-\");\n    tmp = tmp.replace(\"__________\", \"-\");\n    tmp =\
    \ tmp.replace(\"___________\", \"-\");\n    tmp = tmp.replace(\"____________\"\
    , \"-\");\n    tmp = tmp.replace(\"_____________\", \"-\");\n    tmp = tmp.replace(\"\
    ______________\", \"-\");\n    tmp = tmp.replace(\"_______________\", \"-\");\n\
    \    tmp = tmp.replace(\"________________\", \"-\");\n    tmp = tmp.replace(\"\
    _________________\", \"-\");\n    tmp = tmp.replace(\"__________________\", \"\
    -\");\n    tmp = tmp.replace(\"___________________\", \"-\");\n    tmp = tmp.replace(\"\
    ____________________\", \"-\");\n    tmp = tmp.replace(\"_____________________\"\
    , \"-\");\n    tmp = tmp.replace(\"______________________\", \"-\");\n    tmp\
    \ = tmp.replace(\"_______________________\", \"-\");\n    tmp = tmp.replace(\"\
    ________________________\", \"-\");\n    tmp = tmp.replace(\"_________________________\"\
    , \"-\");\n    tmp = tmp.replace(\"__________________________\", \"-\");\n   \
    \ tmp = tmp.replace(\"___________________________\", \"-\");\n    tmp = tmp.replace(\"\
    ____________________________\", \"-\");\n    tmp = tmp.replace(\"_____________________________\"\
    , \"-\");\n    tmp = tmp.replace(\"______________________________\", \"-\");\n\
    \    tmp = tmp.replace(\"_______________________________\", \"-\");\n    tmp =\
    \ tmp.replace(\"________________________________\", \"-\");\n    tmp = tmp.replace(\"\
    _________________________________\", \"-\");\n    tmp = tmp.replace(\"__________________________________\"\
    , \"-\");\n    tmp = tmp.replace(\"___________________________________\", \"-\"\
    );\n    tmp = tmp.replace(\"____________________________________\", \"-\");\n\
    \    tmp = tmp.replace(\"_____________________________________\", \"-\");\n  \
    \  tmp = tmp.replace(\"______________________________________\", \"-\");\n   \
    \ tmp = tmp.replace(\"_______________________________________\", \"-\");\n   \
    \ tmp = tmp.replace\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `replace` on type `String`\n\
    \  --> /tmp/tmpbn_9ec9j.rs:49:15\n   |\n49 |     tmp = tmp.replace\n   |     \
    \          ^^^^^^^ method, not a field\n   |\nhelp: use parentheses to call the\
    \ method\n   |\n49 |     tmp = tmp.replace(_, _)\n   |                      ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut prev_char = '\\n';\n    let mut result = String::from(\"\
    \");\n    for current_char in text.chars() {\n        if current_char == ' ' {\n\
    \            if prev_char == ' ' {\n                result.push('-');\n      \
    \      } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            result.push(current_char);\n        }\n        prev_char = current_char;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9uajhogn.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            space_count\
    \ += 1;\n            if space_count >= 2 {\n                if result.ends_with('_')\
    \ {\n                    result.pop();\n                }\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(ch);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpobxnkhq_.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpuk10s5q3.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp38eydp9u.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    unimplemented!(\"fix spaces in {}\", text);\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: fix spaces in Example', /tmp/tmpl0wys68d.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpgbro8z89.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // unimplemented!()\n    let mut fixed_string = String::new();\n\
    \    let mut last_char = String::new();\n    let mut consec_space_count = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == \" \" {\n                consec_space_count += 1;\n            } else {\n\
    \                consec_space_count = 1;\n            }\n            if consec_space_count\
    \ >= 2 {\n                fixed_string.push('-');\n            } else {\n    \
    \            fixed_string.push('_');\n            }\n        } else {\n      \
    \      consec_space_count = 0;\n            fixed_string.push(c);\n        }\n\
    \        last_char = c.to_string();\n    }\n    fixed_string\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp46k6h0pl.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut previous\
    \ = ' ';\n    for ch in text.chars() {\n        match (ch, previous) {\n     \
    \       (' ', ' ') => { result.push('-'); }\n            (' ', _) => { result.push('_');\
    \ }\n            _ => { result.push(ch); }\n        }\n        previous = ch;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmppts4z1mt.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut string = String::new();\n    let mut count\
    \ = 0;\n    for (i, c) in text.chars().enumerate() {\n        if c == ' ' {\n\
    \            count += 1;\n            if count == 2 {\n                string.push('-');\n\
    \            }\n        } else {\n            count = 0;\n            string.push(c);\n\
    \        }\n    }\n    string\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpntniqrjz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphcax1t32.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpmf9zg26d.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text.clone();\n    let mut i = 0;\n\
    \    let mut prev_space = false;\n    while i < result.len() {\n        if result.chars().nth(i).unwrap()\
    \ == ' ' {\n            result.replace_range(i..i+1, \"_\");\n            if prev_space\
    \ {\n                result.replace_range(i..i+1, \"-\");\n            }\n   \
    \         prev_space = true;\n        } else {\n            prev_space = false;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphi4xqfrc.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"_ \", \"_\").replace(\"\
    \  \", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmprc8ait1b.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let re = Regex::new(r\"(\\s+)\\s*\").unwrap();\n  \
    \  let res = re.replace_all(&text, |caps: &Captures| {\n        match caps.len()\
    \ {\n            2 => String::from(\"_\"),\n            _ => String::from(\"-\"\
    ),\n        }\n    });\n    String::from(res)\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmp_juszmdx.rs:9:14\n\
    \  |\n9 |     let re = Regex::new(r\"(\\s+)\\s*\").unwrap();\n  |            \
    \  ^^^^^ use of undeclared type `Regex`\n\nerror[E0412]: cannot find type `Captures`\
    \ in this scope\n  --> /tmp/tmp_juszmdx.rs:10:45\n   |\n10 |     let res = re.replace_all(&text,\
    \ |caps: &Captures| {\n   |                                             ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut current_len = 0;\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if current_len\
    \ == 0 {\n                result.push('_');\n            } else if current_len\
    \ >= 2 {\n                result.push('-');\n                current_len = 0;\n\
    \            } else {\n                result.push('_');\n                current_len\
    \ += 1;\n            }\n        } else {\n            result.push(c);\n      \
    \      current_len = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp4q4mp9j_.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut current_state = 0;\n    let mut result = String::new();\n\
    \    for current_char in text.chars() {\n        match current_state {\n     \
    \       0 => {\n                if current_char == ' ' {\n                   \
    \ current_state = 1;\n                    result.push('_');\n                }\
    \ else {\n                    result.push(current_char);\n                }\n\
    \            }\n            1 => {\n                if current_char == ' ' {\n\
    \                    current_state = 2;\n                } else {\n          \
    \          result.push(current_char);\n                    current_state = 0;\n\
    \                }\n            }\n            2 => {\n                if current_char\
    \ == ' ' {\n                    current_state = 3;\n                    result.push('-');\n\
    \                } else {\n                    result.push(current_char);\n  \
    \                  current_state = 0;\n                }\n            }\n    \
    \        3 => {\n                if current_char == ' ' {\n                  \
    \  current_state = 3;\n                } else {\n                    result.push(current_char);\n\
    \                    current_state = 0;\n                }\n            }\n  \
    \          _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp59xrreso.rs:56:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut has_space\
    \ = false;\n    let mut has_two_space = false;\n    for (i, letter) in text.chars().enumerate()\
    \ {\n        if letter == ' ' {\n            if has_space {\n                if\
    \ has_two_space {\n                    continue;\n                } else {\n \
    \                   has_two_space = true;\n                    result.push('-');\n\
    \                }\n            } else {\n                has_space = true;\n\
    \                result.push('_');\n            }\n        } else {\n        \
    \    has_space = false;\n            has_two_space = false;\n            result.push(letter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpqx3y_hcw.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut res = String::from(\"\");\n    let mut pre\
    \ = ' ';\n    let mut count = 0;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            if pre == ' ' {\n                count += 1;\n          \
    \  } else {\n                count = 1;\n            }\n            if count ==\
    \ 1 {\n                res.push('_');\n            } else if count == 2 {\n  \
    \              res.push('-');\n            }\n        } else {\n            count\
    \ = 0;\n            res.push(c);\n        }\n        pre = c;\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp0hffi2_r.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut previous\
    \ = 'a';\n    for c in text.chars() {\n        if c == ' ' {\n            if previous\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        previous = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpxu42pshc.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
