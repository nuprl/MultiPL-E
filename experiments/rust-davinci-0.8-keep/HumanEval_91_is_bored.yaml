name: HumanEval_91_is_bored
language: rust
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    let mut words = S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!');\n    words.fold(0, |acc, mut word| {\n        let word = word.trim();\n\
    \        if word.starts_with(\"I\") {\n            acc + 1\n        } else {\n\
    \            acc\n        }\n    })", "    S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!').filter(|word| *word == \"I\").count() as isize", '    unimplemented!();',
  "    let mut count = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!').collect();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let mut b = false;\n    for s in S.chars() {\n        if b && s ==\
    \ ' ' {\n            count += 1;\n            b = false;\n        } else if s\
    \ == 'I' {\n            b = true;\n        } else if s == '.' || s == '?' || s\
    \ == '!' {\n            b = false;\n        }\n    }\n    count", "    let mut\
    \ boredoms = 0;\n    let mut split_iter = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for sentence in split_iter {\n        if sentence.trim().starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    // your\
    \ code here\n    let words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    let mut boredoms = 0;\n    for sentence in words {\n        let words = sentence.split_whitespace();\n\
    \        let mut index = 0;\n        for word in words {\n            if index\
    \ == 0 && word == \"I\" {\n                boredoms += 1;\n            }\n   \
    \         index += 1;\n        }\n    }\n    boredoms", "    let split = S.split(|c:\
    \ char| { c == '.' || c == '?' || c == '!' });\n    let mut count = 0;\n    for\
    \ sentence in split {\n        let words = sentence.split(' ');\n        if words.count()\
    \ > 0 && words.nth(0).unwrap() == \"I\" {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut i = 0;\n    let mut bored = 0;\n    for word\
    \ in S.split_whitespace() {\n        if word == \"I\" {\n            bored +=\
    \ 1;\n        }\n    }\n    bored", "    let mut boredoms = 0;\n    let mut previous_char:\
    \ char = ' ';\n    for c in S.chars() {\n        if previous_char == ' ' && c\
    \ == 'I' {\n            boredoms += 1;\n        }\n        if c == '.' || c ==\
    \ '?' || c == '!' {\n            previous_char = ' ';\n        } else {\n    \
    \        previous_char = c;\n        }\n    }\n    boredoms", "    let mut bored\
    \ = 0;\n    let v: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!').collect();\n    for sentence in v {\n        let mut v: Vec<&str> = sentence.split('\
    \ ').collect();\n        if !v.is_empty() && v[0] == \"I\" {\n            bored\
    \ += 1;\n        }\n    }\n    bored", "    let mut count = 0;\n    let mut i\
    \ = 0;\n    let mut words = S.split_whitespace();\n    let mut word = String::new();\n\
    \    while i < words.len() {\n        word = words.next().unwrap().to_string();\n\
    \        if word == \"I\" {\n            count += 1;\n        }\n        i +=\
    \ 1;\n    }\n    count", "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s|\
    \ s.starts_with(\"I\")).count() as isize", '    S.matches("I").count() as isize',
  "    let v: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut cnt = 0;\n    for s in v {\n        if s.starts_with(\"I\") {\n \
    \           cnt += 1;\n        }\n    }\n    cnt", "    let ws = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!');\n    let mut count = 0;\n    for s in ws\
    \ {\n        let mut words = s.split_whitespace();\n        if let Some(w) = words.next()\
    \ {\n            if w == \"I\" {\n                count += 1;\n            }\n\
    \        }\n    }\n    count", "  return S.split(|c: char| c == '!' || c == '.'\
    \ || c == '?')\n    .filter(|s| s.starts_with(\"I\")).count() as isize;", "  \
    \  let mut r = 0;\n    let mut word = false;\n    for c in S.chars() {\n     \
    \   match c {\n            '.' | '?' | '!' => {\n                word = false;\n\
    \            }\n            ' ' => {\n                word = false;\n        \
    \    }\n            'I' => {\n                if !word {\n                   \
    \ r += 1;\n                }\n                word = true;\n            }\n  \
    \          _ => {\n                word = true;\n            }\n        }\n  \
    \  }\n    r", "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s|\
    \ s.starts_with(\"I\")).count() as isize", "    let mut boredoms = 0;\n    let\
    \ mut start = true;\n    for letter in S.chars() {\n        if letter == 'I' &&\
    \ start {\n            boredoms += 1;\n        } else if letter == '.' || letter\
    \ == '?' || letter == '!' {\n            start = true;\n        } else {\n   \
    \         start = false;\n        }\n    }\n    boredoms", "    S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').map(|s| {\n        s.split_whitespace().next().unwrap()\
    \ == \"I\"\n    }).filter(|&b| b).count() as isize", "    S.split(|c: char| c\
    \ == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count() as\
    \ isize", "    match S.chars().nth(0) {\n        Some(c) => {\n            if\
    \ c == 'I' {\n                1\n            } else {\n                0\n   \
    \         }\n        }\n        None => 0,\n    }", "    let mut count = 0;\n\
    \    let mut sentences = S.split(|c: char| match c {\n        '.' | '?' | '!'\
    \ => true,\n        _ => false,\n    });\n    for sentence in sentences {\n  \
    \      let words = sentence.split(' ');\n        if words.nth(0).unwrap() == \"\
    I\" {\n            count += 1;\n        }\n    }\n    count", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize", "    let mut boredoms = 0;\n    let mut is_bored = false;\n    for\
    \ c in S.chars() {\n        match c {\n            'I' => is_bored = true,\n \
    \           '.' | '?' | '!' => {\n                if is_bored {\n            \
    \        boredoms += 1;\n                }\n                is_bored = false;\n\
    \            }\n            _ => {}\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = 0;\n    let mut sentence = \"\";\n    let mut sentence_started\
    \ = false;\n    for word in S.split_whitespace() {\n        sentence = format!(\"\
    {} {}\", sentence, word);\n        sentence_started = sentence_started || word.starts_with(\"\
    I\");\n        if sentence.ends_with(\".\") || sentence.ends_with(\"?\") || sentence.ends_with(\"\
    !\") {\n            boredoms += (sentence_started as isize);\n            sentence\
    \ = \"\";\n            sentence_started = false;\n        }\n    }\n    boredoms",
  "    let mut count = 0;\n    let v: Vec<&str> = S.split(|c: char| c == '.' || c\
    \ == '?' || c == '!').collect();\n    for i in v {\n        let v: Vec<&str> =\
    \ i.split(' ').collect();\n        if v[0] == \"I\" {\n            count += 1;\n\
    \        }\n    }\n    count", "    S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!').map(|s| {\n        if s.trim_left().starts_with(\"I\") {\n       \
    \     1\n        } else {\n            0\n        }\n    }).sum()", "    let sentence_vec:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    sentence_vec.iter().filter(|&s| s.starts_with(\"I\")).count() as isize",
  "    let mut iter = S.split_terminator(|c: char| {\n        c == '.' || c == '?'\
    \ || c == '!'\n    });\n    let mut count = 0;\n    for line in iter {\n     \
    \   let trimmed = line.trim();\n        if trimmed.is_empty() {\n            continue;\n\
    \        }\n        if trimmed.starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut x = 0;\n    let mut i = 0;\n    let\
    \ characters: Vec<char> = S.chars().collect();\n    let m = characters.len();\n\
    \    while i < m {\n        if characters[i] == 'I' {\n            x += 1;\n \
    \       }\n        i += 1;\n    }\n    x", "    S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count() as isize", " \
    \   let sentence_count = S.split(|c: char| {\n        match c {\n            '.'\
    \ | '?' | '!' => true,\n            _ => false,\n        }\n    }).count();\n\
    \    let words: Vec<&str> = S.split(' ').collect();\n    let mut boredoms: isize\
    \ = 0;\n    for word in words {\n        if word == \"I\" {\n            boredoms\
    \ += 1;\n        }\n    }\n    if boredoms > 0 {\n        return boredoms;\n \
    \   }\n    return boredoms - sentence_count as isize;", "    S.lines()\n     \
    \   .fold(0, |acc, line| {\n            acc + if line.starts_with(\"I\") { 1 }\
    \ else { 0 }\n        })", '    if S.starts_with("I") { 1 } else { 0 }', "   \
    \ let mut boredoms = 0;\n    let mut sentences = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!');\n    for sentence in sentences {\n        if sentence.trim().starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredom_counter = 0;\n    let punctuation_signs = [',', '.', '!', '?'];\n\
    \    let mut tmp = String::new();\n    for c in S.chars() {\n        if punctuation_signs.contains(&c)\
    \ {\n            if tmp.to_lowercase() == \"i\" {\n                boredom_counter\
    \ += 1;\n            }\n            tmp.clear();\n        } else {\n         \
    \   tmp.push(c);\n        }\n    }\n    boredom_counter", "    let mut res = 0;\n\
    \    let split = S.split(\".\");\n    for s in split {\n        if s.starts_with(\"\
    I\") {\n            res += 1;\n        }\n    }\n    res", "    let mut count\
    \ = 0;\n    let sentences = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for sentence in sentences {\n        if sentence.starts_with(\"I\") {\n \
    \           count += 1;\n        }\n    }\n    count", "    // Your code here\n\
    \    0", "  let mut count = 0;\n  let mut sentence = \"\";\n  for (i, c) in S.chars().enumerate()\
    \ {\n    sentence = sentence.to_string() + &c.to_string();\n    if c == '.' ||\
    \ c == '?' || c == '!' {\n      let next_sentence = S.chars().skip(i + 1).take(6).collect::<String>();\n\
    \      if sentence.starts_with(\"I\") {\n        count += 1;\n      }\n      sentence\
    \ = \"\";\n    }\n  }\n  return count;", "    let mut boredoms = 0;\n    let mut\
    \ words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    for word in\
    \ words {\n        let mut chars = word.chars();\n        if let Some(c) = chars.next()\
    \ {\n            if c == 'I' {\n                if chars.all(|c| c == ' ') {\n\
    \                    boredoms += 1;\n                }\n            }\n      \
    \  }\n    }\n    boredoms", "    S.split(|c: char| \"?!.\".contains(c))\n    \
    \    .map(|s| s.split_whitespace().next().unwrap())\n        .filter(|s| *s ==\
    \ \"I\")\n        .count() as isize", "    let mut count = 0;\n    let phrases\
    \ = S.split(|c| c == '.' || c == '?' || c == '!');\n    for phrase in phrases\
    \ {\n        if phrase.starts_with(\"I\") {\n            count += 1;\n       \
    \ }\n    }\n    count", "    let sentences = S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!');\n    sentences.filter(|&s| s.starts_with(\"I\")).count() as\
    \ isize", "    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c\
    \ in S.chars() {\n        match c {\n            'I' => is_bored = true,\n   \
    \         '.' | '?' | '!' => {\n                if is_bored {\n              \
    \      boredoms += 1;\n                }\n                is_bored = false;\n\
    \            }\n            _ => (),\n        }\n    }\n    boredoms", "    let\
    \ mut result = 0;\n    let mut first_word_check = true;\n    for c in S.chars()\
    \ {\n        if first_word_check {\n            if c == 'I' {\n              \
    \  result += 1;\n            }\n            first_word_check = false;\n      \
    \  }\n        if c == '.' || c == '?' || c == '!' {\n            first_word_check\
    \ = true;\n        }\n    }\n    result", "    if S.len() == 0 {\n        return\
    \ 0;\n    }\n    let mut ret = 0;\n    let split_by = vec!['.', '?', '!'];\n \
    \   let words: Vec<&str> = S.split(|x| split_by.contains(&x)).collect();\n   \
    \ for word in words {\n        if word.starts_with(\"I\") {\n            ret +=\
    \ 1;\n        }\n    }\n    ret", "    // Your code here\n    let mut num_boredoms\
    \ = 0;\n    let split = S.split(|c| c == '.' || c == '?' || c == '!');\n    for\
    \ sentence in split {\n        let words = sentence.split_whitespace();\n    \
    \    if words.next() == Some(\"I\") {\n            num_boredoms += 1;\n      \
    \  }\n    }\n    num_boredoms", "    let mut boredoms = 0;\n    let x = S.split(|c|\
    \ c == '.' || c == '?' || c == '!');\n    for i in x {\n        let y = i.split_whitespace();\n\
    \        if y.next() == Some(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "  let mut boredoms = 0;\n  let mut word = String::new();\n\
    \  let mut word_first_char = false;\n  let mut word_not_first_char = false;\n\
    \  let mut word_not_first_char_correct = false;\n  let mut should_count_boredoms\
    \ = false;\n  let mut is_punctuation = false;\n  let mut punc_count = 0;\n  let\
    \ mut punctuation = String::new();\n  let mut is_ending_punctuation = false;\n\
    \  let mut is_starting_punctuation = false;\n  let mut is_bored = false;\n  let\
    \ mut sentence_count = 0;\n  let mut sentence_boredoms = 0;\n  let mut sentence_start\
    \ = 0;\n  let mut word_count = 0;\n  let mut word_count_all = 0;\n  let mut word_count_correct\
    \ = 0;\n  let mut word_count_correct_all = 0;\n  let mut only_punctuation = false;\n\
    \  let mut is_previous_sentence_boredom = false;\n  let mut punctuation_count\
    \ = 0;\n  let mut is_bored_all = false;\n  let mut sentence_boredoms_all = 0;\n\
    \  let mut is_previous_sentence_boredom_all = false;\n  let mut is_starting_punctuation_all\
    \ = false;\n  let mut starting_punctuation_all = String::new();\n  let mut is_first_sentence\
    \ = true;\n  let mut is_punctuation_all = false;\n  let mut is_ending_punctuation_all\
    \ = false;\n  let mut ending_punctuation_all = String::new();\n  let mut word_count_all_correct\
    \ = 0;\n  let mut word_count_correct_all_correct = 0;\n  let mut is_word_all =\
    \ false;\n  let mut word_all = String::new();\n  let mut word_first_char_all =\
    \ false;\n  let mut word_not_first_char_all = false;\n  let mut word_not_first_char_correct_all\
    \ = false;\n  let", "    let mut count = 0;\n    let lst = S.split(|c| c == '.'\
    \ || c == '?' || c == '!');\n    for l in lst {\n        if l.trim().starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut boredoms\
    \ = 0;\n    let mut words = S.split(|c: char| \".?!\".contains(c));\n    for word\
    \ in words {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n    boredoms", "    S.split(&['.', '?', '!'][..]).filter(|s|\
    \ s.starts_with(\"I\")).count() as isize", "    // First get the number of sentences\n\
    \    let sentences: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!').collect();\n    // Now check if it is a bore\n    let mut bore_count =\
    \ 0;\n    for sentence in sentences {\n        if sentence.starts_with(\"I\")\
    \ {\n            bore_count += 1;\n        }\n    }\n    return bore_count;",
  "    let mut boredoms = 0;\n    let mut check_i = false;\n    for ch in S.chars()\
    \ {\n        match ch {\n            'I' => {\n                check_i = true;\n\
    \            }\n            '.' | '?' | '!' => {\n                if check_i {\n\
    \                    boredoms += 1;\n                }\n                check_i\
    \ = false;\n            }\n            _ => {\n                check_i = false;\n\
    \            }\n        }\n    }\n    boredoms", "    let mut boredoms = 0;\n\
    \    let mut is_sentence = false;\n    for word in S.split_whitespace() {\n  \
    \      if word == \"I\" {\n            is_sentence = true;\n        } else if\
    \ is_sentence && &word[word.len() - 1..] == \".\" {\n            boredoms += 1;\n\
    \            is_sentence = false;\n        } else if is_sentence && &word[word.len()\
    \ - 1..] == \"?\" {\n            boredoms += 1;\n            is_sentence = false;\n\
    \        } else if is_sentence && &word[word.len() - 1..] == \"!\" {\n       \
    \     boredoms += 1;\n            is_sentence = false;\n        }\n    }\n   \
    \ boredoms", "    let mut count = 0;\n    let words: Vec<&str> = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for sentence in words {\n\
    \        let first_word: Vec<&str> = sentence.split_whitespace().collect();\n\
    \        if first_word[0] == \"I\" {\n            count += 1;\n        }\n   \
    \ }\n    count", "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s|\
    \ s.starts_with(\"I\")).count() as isize", "  S.split(|c: char| c == '.' || c\
    \ == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count() as isize", "  let\
    \ mut counter = 0;\n  let words: Vec<&str> = S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!').collect();\n  for sentence in words {\n    if sentence.split_whitespace().next().unwrap()\
    \ == \"I\" {\n      counter += 1;\n    }\n  }\n  counter", "    S.split(|c: char|\
    \ !c.is_alphabetic())\n        .map(|s| if s.starts_with(\"I\") { 1 } else { 0\
    \ })\n        .sum()", "    let mut boredoms = 0;\n    let mut sentences = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for sentence in sentences {\n\
    \        let mut words = sentence.split(\" \");\n        let first_word = words.next();\n\
    \        if first_word == Some(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s|\
    \ {\n        s.trim().chars().nth(0).unwrap() == 'I'\n    }).count() as isize",
  "    let mut S = S;\n    S.push_str(\".\");\n    let mut cnt = 0;\n    let mut i\
    \ = 0;\n    while i < S.len() {\n        let idx = S[i..].find(|c| c == '.' ||\
    \ c == '?' || c == '!').unwrap();\n        if i + idx >= 1 && S[i..i + idx].chars().next().unwrap()\
    \ == 'I' {\n            cnt += 1;\n        }\n        i += idx + 1;\n    }\n \
    \   cnt", "    let mut boredoms = 0;\n    let mut words = S.split(|c: char| {\n\
    \        c == '.' || c == '?' || c == '!'\n    });\n    while let Some(word) =\
    \ words.next() {\n        if word.trim().starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n    let sentence:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    for word in sentence {\n        if word.starts_with(\"I\") {\n          \
    \  count += 1;\n        }\n    }\n    count", "    S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!').filter(|&s| s.trim().starts_with(\"I\")).count() as\
    \ isize", "    let split = S.split(&['.', '?', '!'][..]);\n    let mut ret = 0;\n\
    \    for sentence in split {\n        let words = sentence.split_whitespace();\n\
    \        if words.next() == Some(\"I\") {\n            ret += 1;\n        }\n\
    \    }\n    ret", "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s|\
    \ s.trim().starts_with(\"I\")).count() as isize", "    let words: Vec<&str> =\
    \ S.split_whitespace().collect();\n    let mut boredoms = 0;\n    for word in\
    \ words {\n        if word == \"I\" {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms = 0;\n    let mut start = 0;\n  \
    \  for i in 0..S.len() {\n        if S.chars().nth(i).unwrap() == '.' || S.chars().nth(i).unwrap()\
    \ == '?' || S.chars().nth(i).unwrap() == '!' {\n            if S.chars().nth(start).unwrap()\
    \ == 'I' {\n                boredoms += 1;\n            }\n            start =\
    \ i + 2;\n        }\n    }\n    boredoms", "    let words: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    let boredoms: Vec<&str>\
    \ = words.iter().filter(|s| s.starts_with(\"I\")).collect();\n    boredoms.len()\
    \ as isize", "    let mut boredoms = 0;\n    let words: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    for word in words {\n\
    \        if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms = 0;\n    let S = S.to_lowercase();\n\
    \    let sentences = S.split(|c| c == '.' || c == '?' || c == '!');\n    for sentence\
    \ in sentences {\n        let words = sentence.split_whitespace();\n        for\
    \ word in words {\n            if word == \"i\" {\n                boredoms +=\
    \ 1;\n                break;\n            }\n        }\n    }\n    boredoms",
  "    let B = S.split(|x| x == '.' || x == '?' || x == '!').count();\n    let mut\
    \ c = 0;\n    for s in S.split(|x| x == '.' || x == '?' || x == '!') {\n     \
    \   if s.starts_with(\"I\") {\n            c += 1;\n        }\n    }\n    return\
    \ c;", "    let mut count = 0;\n    let mut begin = 0;\n    for (i, ch) in S.chars().enumerate()\
    \ {\n        if ch == '.' || ch == '?' || ch == '!' {\n            let substr\
    \ = &S[begin..i];\n            if substr.len() > 0 && substr.starts_with(\"I\"\
    ) {\n                count += 1;\n            }\n            begin = i + 1;\n\
    \        }\n    }\n    return count;", "    let mut boredoms = 0;\n    let mut\
    \ s = String::new();\n    for c in S.chars() {\n        s.push(c);\n        if\
    \ c == '.' || c == '?' || c == '!' {\n            let words: Vec<&str> = s.split_whitespace().collect();\n\
    \            if words.len() > 0 && words[0] == \"I\" {\n                boredoms\
    \ += 1;\n            }\n            s.clear();\n        }\n    }\n    return boredoms;",
  "    let mut count = 0;\n    let mut words = S.split_whitespace();\n    for word\
    \ in words {\n        if word == \"I\" {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut boredoms = 0;\n    let mut letters = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for letter in letters {\n    \
    \    if letter.starts_with(\"I\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut num_boredoms = 0;\n    for sentence in S.split(|c|\
    \ c == '.' || c == '?' || c == '!') {\n        if sentence.starts_with(\"I\")\
    \ {\n            num_boredoms += 1;\n        }\n    }\n    num_boredoms", "  \
    \  let mut v: Vec<&str> = S.split_terminator(|c: char| c == '.' || c == '?' ||\
    \ c == '!').collect();\n    let mut count = 0;\n    for i in 0..v.len() {\n  \
    \      let w: Vec<&str> = v[i].split_whitespace().collect();\n        if w.len()\
    \ > 0 && w[0] == \"I\" {\n            count += 1;\n        }\n    }\n    count",
  "    let boring_words = vec![\"I\".to_string()];\n    let mut borings = 0;\n   \
    \ let mut sentences = S.split(|c: char| c == '.' || c == '?' || c == '!');\n \
    \   for sentence in sentences {\n        let words = sentence.split_whitespace();\n\
    \        for word in words {\n            if boring_words.contains(&word.to_string())\
    \ {\n                borings += 1;\n                break;\n            }\n  \
    \      }\n    }\n    borings", "    let mut count = 0;\n    let mut i = 0;\n \
    \   while i < S.len() {\n        if S.chars().nth(i).unwrap() == 'I' {\n     \
    \       while S.chars().nth(i).unwrap() != '.' {\n                i += 1;\n  \
    \          }\n            count += 1;\n        }\n        i += 1;\n    }\n   \
    \ count", "    let sentences = S.split(|c: char| \"!?.\".contains(c));\n    let\
    \ mut boredoms = 0;\n    for sentence in sentences {\n        let words = sentence.split_whitespace();\n\
    \        if words.count() > 0 && words.next().unwrap() == \"I\" {\n          \
    \  boredoms += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n\
    \    let split_on_terminator = |character| {\n        S.split(character).for_each(|s|\
    \ {\n            if s.starts_with(\"I\") {\n                count += 1;\n    \
    \        }\n        });\n    };\n    split_on_terminator('.');\n    split_on_terminator('?');\n\
    \    split_on_terminator('!');\n    count", "    // write your code here\n   \
    \ let mut count: isize = 0;\n    let sentence: Vec<&str> = S.split(|c| c == '.'\
    \ || c == '?' || c == '!').collect();\n    for value in sentence {\n        let\
    \ words: Vec<&str> = value.split(\" \").collect();\n        if words.len() > 0\
    \ && words[0] == \"I\" {\n            count += 1;\n        }\n    }\n    count",
  "    let mut boredoms = 0;\n    let lines: Vec<&str> = S.split(|c| c == '!' || c\
    \ == '.' || c == '?').collect();\n    for line in lines {\n        if line.trim().starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    S.lines()\n\
    \        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize", "    S.chars()\n\
    \        .fold((0, 0), |(count, ignore), c| {\n            if c == 'I' && ignore\
    \ == 0 {\n                (count + 1, 0)\n            } else if c == '.' || c\
    \ == '?' || c == '!' {\n                (count, 1)\n            } else {\n   \
    \             (count, ignore)\n            }\n        })\n        .0", '  return
    0;', "    S.split(|ch: char| ch == '.' || ch == '?' || ch == '!')\n        .filter(|s|\
    \ s.starts_with(\"I\"))\n        .count() as isize", "    let v: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    let mut n = 0;\n   \
    \ for s in v {\n        if s.starts_with(\"I\") {\n            n += 1;\n     \
    \   }\n    }\n    n", "    let mut bored_count = 0;\n    for word in S.split(\"\
    \ \") {\n        if word.starts_with(\"I\") {\n            bored_count += 1;\n\
    \        }\n    }\n    bored_count", "    S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').filter(|s| s.starts_with(\"I\")).count() as isize", "    let mut\
    \ is_counting = false;\n    let mut boredoms = 0;\n    for c in S.chars() {\n\
    \        if c == 'I' {\n            is_counting = true;\n        } else if c ==\
    \ '.' || c == '?' || c == '!' {\n            if is_counting {\n              \
    \  boredoms += 1;\n            }\n            is_counting = false;\n        }\n\
    \    }\n    return boredoms;", "  let split = S.split_terminator(|c: char| c ==\
    \ '.' || c == '?' || c == '!');\n  split.fold(0, |acc, x| {\n    let words = x.split_whitespace();\n\
    \    let y = words.next();\n    match y {\n      Some(y) => {\n        if y ==\
    \ \"I\" {\n          acc + 1\n        } else {\n          acc\n        }\n   \
    \   }\n      None => acc,\n    }\n  })", "    // your code here\n    let mut split\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut boredoms\
    \ = 0;\n    for s in split {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "  S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!').filter(|word| word.starts_with(\"I\")).count() as isize", " \
    \   let mut cnt = 0;\n    let mut start = 0;\n    let mut i = 0;\n    while i\
    \ < S.len() {\n        while i < S.len() && S.chars().nth(i).unwrap() != '.' &&\
    \ S.chars().nth(i).unwrap() != '?' && S.chars().nth(i).unwrap() != '!' {\n   \
    \         i += 1;\n        }\n        let st = &S[start..i];\n        if st.starts_with(\"\
    I\") && st.trim().len() != 0 {\n            cnt += 1;\n        }\n        if i\
    \ < S.len() {\n            i += 1;\n        }\n        start = i;\n    }\n   \
    \ cnt", "    S.lines()\n        .fold(0, |acc, x| acc + x.matches(\"I\").count()\
    \ as isize)", "  let mut ret = 0;\n  let mut idx = 0;\n  let words: Vec<&str>\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n  for word\
    \ in words {\n    let split_word: Vec<&str> = word.split_whitespace().collect();\n\
    \    if split_word.len() > 0 && split_word[0] == \"I\" {\n      ret += 1;\n  \
    \  }\n  }\n  ret", "    let mut bored = 0;\n    let mut chars = S.chars();\n \
    \   while let Some(c) = chars.next() {\n        if c == 'I' {\n            match\
    \ chars.next() {\n                Some(c) if c == ' ' => {\n                 \
    \   bored += 1;\n                }\n                _ => {}\n            }\n \
    \       }\n    }\n    bored", "    let mut count = 0;\n    let chars = S.chars().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < chars.len() {\n        let (s, e) = get_sentence_range(&chars,\
    \ i);\n        if s < chars.len() {\n            let sentence = get_sentence(&chars,\
    \ s, e);\n            if is_bored_sentence(&sentence) {\n                count\
    \ += 1;\n            }\n            i = e;\n        } else {\n            break;\n\
    \        }\n    }\n    count", "    let words: Vec<&str> = S.split(|c: char| c\
    \ == '.' || c == '?' || c == '!').collect();\n    let mut bored = 0;\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            bored +=\
    \ 1;\n        }\n    }\n    bored", "    let mut boredoms = 0;\n    let mut prev\
    \ = false;\n    for word in S.split(|c: char| c == '.' || c == '?' || c == '!')\
    \ {\n        if prev {\n            boredoms += 1;\n        }\n        prev =\
    \ word.starts_with(\"I\");\n    }\n    boredoms", "    S.split(|x| x == '.' ||\
    \ x == '?' || x == '!').filter(|&s| s.starts_with(\"I\")).count() as isize", " \
    \   let mut boredoms = 0;\n    let mut i = 0;\n    let mut is_first_word = true;\n\
    \    for x in S.chars() {\n        if x == ' ' || x == '.' || x == '?' || x ==\
    \ '!' {\n            if is_first_word && i == 1 {\n                boredoms +=\
    \ 1;\n            }\n            i = 0;\n            is_first_word = true;\n \
    \       } else {\n            i += 1;\n            is_first_word = false;\n  \
    \      }\n    }\n    boredoms", "    S.lines()\n        .map(|x| x.trim())\n \
    \       .filter(|x| !x.is_empty())\n        .map(|line| {\n            line.split_terminator(|c|\
    \ c == '!' || c == '?' || c == '.')\n                .count()\n        })\n  \
    \      .sum()", "    let mut boredoms = 0;\n    let mut cap = false;\n    for\
    \ c in S.chars() {\n        if c.is_uppercase() {\n            cap = true;\n \
    \       } else if c == ' ' && cap {\n            cap = false;\n        } else\
    \ if cap && c == 'I' {\n            boredoms += 1;\n            cap = false;\n\
    \        } else {\n            cap = false;\n        }\n    }\n    boredoms",
  "    let I: &[_] = &['.', '?', '!'];\n    let S: Vec<&str> = S.split(I).collect();\n\
    \    let mut count = 0;\n    for i in S {\n        if i.starts_with(\"I\") {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut bored = 0;\n\
    \    let words: Vec<&str> = S.split_whitespace().collect();\n    for i in words\
    \ {\n        if i == \"I\" {\n            bored += 1;\n        }\n    }\n    bored",
  "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s| s.to_lowercase().starts_with(\"\
    i\")).count() as isize", "    let mut c = 0;\n    let v: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    for s in v {\n     \
    \   let w: Vec<&str> = s.split_whitespace().collect();\n        if w.len() > 0\
    \ && w[0] == \"I\" {\n            c += 1;\n        }\n    }\n    c", "    let\
    \ mut count = 0;\n    let mut i = 0;\n    for c in S.chars() {\n        if c ==\
    \ 'I' {\n            count += 1;\n        }\n        i += 1;\n        if i < S.len()\
    \ && (S[i - 1..i + 1] == \".\" || S[i - 1..i + 1] == \"?\" || S[i - 1..i + 1]\
    \ == \"!\") {\n            count += 1;\n        }\n    }\n    return count;",
  "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"\
    I\")).count() as isize", "    let mut boredoms = 0;\n    let mut begins_with_i\
    \ = false;\n    for c in S.chars() {\n        if c == '.' || c == '?' || c ==\
    \ '!' {\n            begins_with_i = false;\n        } else if c == 'I' {\n  \
    \          if begins_with_i {\n                boredoms += 1;\n            }\n\
    \            begins_with_i = true;\n        } else {\n            begins_with_i\
    \ = false;\n        }\n    }\n    boredoms", "    // write your code here\n  \
    \  let mut count = 0;\n    let words = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for word in words {\n        let ws: Vec<&str> = word.split_whitespace().collect();\n\
    \        if ws.len() > 0 && ws[0] == \"I\" {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let count = |acc, x| {\n        if x.trim().starts_with(\"\
    I\") {\n            acc + 1\n        } else {\n            acc\n        }\n  \
    \  };\n    S.split(|c| c == '.' || c == '?' || c == '!').fold(0, count)", "  \
    \  // Your code here\n    let mut count = 0;\n    let mut is_bored = false;\n\
    \    for c in S.chars() {\n        if c == ' ' {\n            is_bored = false;\n\
    \        }\n        if is_bored && c == 'I' {\n            count += 1;\n     \
    \   }\n        if c == 'I' {\n            is_bored = true;\n        }\n    }\n\
    \    count", "    let mut num_boredoms = 0;\n    let words: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    for w in words {\n \
    \       let w: Vec<&str> = w.split_whitespace().collect();\n        if w.len()\
    \ == 0 {\n            continue;\n        }\n        if w[0] == \"I\" {\n     \
    \       num_boredoms += 1;\n        }\n    }\n    num_boredoms", "    let mut\
    \ boredoms = 0;\n    let mut start_word = true;\n    for c in S.chars() {\n  \
    \      if start_word {\n            if c == 'I' {\n                boredoms +=\
    \ 1;\n            }\n            start_word = false;\n        }\n        if c\
    \ == '.' || c == '?' || c == '!' {\n            start_word = true;\n        }\n\
    \    }\n    boredoms", "    let sentence_delimiters = vec!['.', '?', '!'];\n \
    \   let mut sentence_count = 0;\n    let mut start_index = 0;\n    let mut index_vec\
    \ = Vec::new();\n    for (index, char) in S.chars().enumerate() {\n        if\
    \ sentence_delimiters.contains(&char) {\n            index_vec.push(index);\n\
    \        }\n    }\n    index_vec.push(S.len());\n    for end_index in index_vec\
    \ {\n        let sub_string = &S[start_index..end_index];\n        if sub_string.starts_with(\"\
    I\") {\n            sentence_count += 1;\n        }\n        start_index = end_index\
    \ + 1;\n    }\n    sentence_count", "    let mut boredoms = 0;\n    let sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    for sentence in\
    \ sentences {\n        if sentence.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut bored = 0;\n    let mut\
    \ started = false;\n    for c in S.chars() {\n        if started && (c == '.'\
    \ || c == '?' || c == '!') {\n            bored += 1;\n            started = false;\n\
    \        }\n        if c == 'I' {\n            started = true;\n        }\n  \
    \  }\n    return bored;", "    S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!').filter(|s| s.starts_with(\"I\")).count() as isize", "    S.trim()\n   \
    \     .split(|x| x == '!' || x == '.' || x == '?')\n        .filter(|x| x.starts_with(\"\
    I \"))\n        .count() as isize", "    let mut count = 0;\n    let mut sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    for sentence in\
    \ sentences {\n        if sentence.trim_start().starts_with(\"I\") {\n       \
    \     count += 1;\n        }\n    }\n    count", "    let mut cnt = 0;\n    let\
    \ mut is_bored = false;\n    for s in S.split(|c| c == '.' || c == '?' || c ==\
    \ '!') {\n        if s.to_lowercase().starts_with(\"i\") {\n            cnt +=\
    \ 1;\n            is_bored = true;\n        } else {\n            is_bored = false;\n\
    \        }\n    }\n    cnt", "    let mut c = 0;\n    let mut buf = String::new();\n\
    \    for ch in S.chars() {\n        if ch == '.' || ch == '?' || ch == '!' {\n\
    \            if buf.trim().starts_with(\"I\") {\n                c += 1;\n   \
    \         }\n            buf.clear();\n        } else {\n            buf.push(ch);\n\
    \        }\n    }\n    c", "    S.split_terminator(|c: char| c == '.' || c ==\
    \ '?' || c == '!')\n        .map(|s| s.trim())\n        .filter(|s| s.len() >=\
    \ 2 && s.to_uppercase().starts_with(\"I \"))\n        .count() as isize", "  \
    \  S.split(|c: char| !\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    .contains(c))\n     .filter(|s| s.starts_with(\"I\"))\n     .count() as isize",
  "    let mut count = 0;\n    let v: Vec<&str> = S.split(|c: char| c == '!' || c\
    \ == '.' || c == '?').collect();\n    for s in v {\n        let v2: Vec<&str>\
    \ = s.split_whitespace().collect();\n        if v2.len() > 0 && v2[0] == \"I\"\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut result\
    \ = 0;\n    let iter = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for word in iter {\n        if word.trim().starts_with(\"I\") {\n       \
    \     result += 1;\n        }\n    }\n    result", "    let sentences = S.split(&['.',\
    \ '?', '!'][..]);\n    sentences.fold(0, |acc, sentence| {\n        if sentence.starts_with(\"\
    I\") {\n            acc + 1\n        } else {\n            acc\n        }\n  \
    \  })", "    let S = S.replace(\".\", \"\").replace(\"?\", \"\").replace(\"!\"\
    , \"\");\n    let x: Vec<&str> = S.split(\" \").collect();\n    let mut count\
    \ = 0;\n    for i in x {\n        if i == \"I\" {\n            count += 1;\n \
    \       }\n    }\n    count", "    let mut boredoms = 0;\n    let mut words =\
    \ S.split(|c: char| c == ' ' || c == '.' || c == '?' || c == '!');\n    while\
    \ let Some(word) = words.next() {\n        if word == \"I\" {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let s_vec: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    let mut count = 0;\n\
    \    for s in s_vec {\n        if s.len() > 1 && s.to_uppercase().starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut sum = 0;\n\
    \    for sentence in sentences {\n        if sentence.starts_with(\"I\") {\n \
    \           sum += 1;\n        }\n    }\n    sum", "    S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!').filter(|s| s.trim().starts_with(\"I\")).count()\
    \ as isize", "    let mut count = 0;\n    let s: Vec<char> = S.chars().collect();\n\
    \    for i in 0..s.len() - 1 {\n        let b: String = s[i..i + 2].iter().collect();\n\
    \        if b == \"I.\" || b == \"I?\" || b == \"I!\" {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let mut bored = 0;\n    let mut i = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for word in i {\n        if word.chars().next().unwrap()\
    \ == 'I' {\n            bored += 1;\n        }\n    }\n    bored", "  let mut\
    \ boredoms = 0;\n  let mut sentences = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n  for sentence in sentences {\n    let trimmed = sentence.trim();\n\
    \    if trimmed.len() > 0 {\n      if trimmed.to_lowercase().starts_with(\"i\"\
    ) {\n        boredoms += 1;\n      }\n    }\n  }\n  boredoms", "    let words:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut count = 0;\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut result\
    \ = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!').collect();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            result += 1;\n        }\n    }\n    result", "    let sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut count =\
    \ 0;\n    for sentence in sentences {\n        let words = sentence.split(\" \"\
    );\n        if words.clone().take(1).last().unwrap_or(\"\") == \"I\" {\n     \
    \       count += 1;\n        }\n    }\n    count", "    S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!').filter(|s| {\n        if s.len() == 0 {\n     \
    \       return false;\n        }\n        let first_word = s.split(' ').next().unwrap();\n\
    \        return first_word == \"I\";\n    }).count() as isize", "    let mut boredoms\
    \ = 0;\n    let mut first_word = true;\n    for word in S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!') {\n        for chunk in word.split_whitespace()\
    \ {\n            if first_word && chunk == \"I\" {\n                boredoms +=\
    \ 1;\n            }\n            first_word = false;\n        }\n        first_word\
    \ = true;\n    }\n    boredoms", "    let v: Vec<&str> = S.split_terminator(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    let mut cnt = 0;\n \
    \   for s in v {\n        if s.starts_with(\"I\") {\n            cnt += 1;\n \
    \       }\n    }\n    cnt", "    let words: Vec<&str> = S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!').collect();\n    let mut sum = 0;\n    for word\
    \ in words {\n        let mut split_words: Vec<&str> = word.split_whitespace().collect();\n\
    \        if split_words.len() > 0 && split_words[0] == \"I\" {\n            sum\
    \ += 1;\n        }\n    }\n    sum", "    S.split(|c: char| !\"aeiou\".contains(c))\n\
    \        .filter(|s| s.chars().next().unwrap() == 'I')\n        .count() as isize",
  "    if S.len() == 0 {\n        return 0;\n    }\n    S.split(|c| { c == '.' ||\
    \ c == '?' || c == '!' })\n        .filter(|s| s.starts_with(\"I\"))\n       \
    \ .count() as isize", "    let mut boredom_count = 0;\n    let mut i = 0;\n  \
    \  let mut sentence_end = false;\n    for ch in S.chars() {\n        if sentence_end\
    \ {\n            if ch == 'I' {\n                boredom_count += 1;\n       \
    \     }\n            sentence_end = false;\n        }\n        if ch == '.' ||\
    \ ch == '?' || ch == '!' {\n            sentence_end = true;\n        }\n    \
    \    i += 1;\n    }\n    boredom_count", "    let mut boredoms = 0;\n    let mut\
    \ words = S.split_whitespace();\n    for word in words {\n        if word == \"\
    I\" {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ res = 0;\n    let v: Vec<&str> = S.split(|c| c == '.' || c == '?' || c == '!').collect();\n\
    \    for s in v {\n        if s.starts_with(\"I\") {\n            res += 1;\n\
    \        }\n    }\n    res", "    S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!').filter(|x| x.starts_with(\"I\")).count() as isize", "    if !S.contains(\"\
    I\") {\n        return 0;\n    }\n    let mut count = 0;\n    let sentences =\
    \ S.split(|c| c == '.' || c == '?' || c == '!');\n    for sentence in sentences\
    \ {\n        if sentence.starts_with(\"I\") {\n            count += 1;\n     \
    \   }\n    }\n    count", "    let s = S.trim();\n    let mut count = 0;\n   \
    \ let mut i = 0;\n    let mut start = 0;\n    while i < s.len() {\n        if\
    \ s.chars().nth(i).unwrap() == '.' || s.chars().nth(i).unwrap() == '?' || s.chars().nth(i).unwrap()\
    \ == '!' {\n            if &s[start..i].to_string()[..] == \"I\" {\n         \
    \       count += 1;\n            }\n            start = i + 1;\n        }\n  \
    \      i += 1;\n    }\n    if &s[start..i].to_string()[..] == \"I\" {\n      \
    \  count += 1;\n    }\n    count", "    let mut count = 0;\n    let words: Vec<&str>\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n    for w\
    \ in words {\n        let mut v: Vec<&str> = w.split_whitespace().collect();\n\
    \        if v.len() > 0 && v[0] == \"I\" {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut string = S.clone();\n    let mut count = 0;\n\
    \    while string.contains(\".\") || string.contains(\"?\") || string.contains(\"\
    !\") {\n        let mut words = string.split(|c| c == '.' || c == '?' || c ==\
    \ '!');\n        let first_word = words.next().unwrap();\n        if first_word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n        string = words.collect::<Vec<&str>>().join(\"\
    \");\n    }\n    count", "    let mut count = 0;\n    let words: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    for word in words {\n\
    \        if word.chars().nth(0).unwrap() == 'I' {\n            count += 1;\n \
    \       }\n    }\n    count", "    let mut bored = 0;\n    let mut bored_word\
    \ = false;\n    for c in S.chars() {\n        if bored_word {\n            bored_word\
    \ = !(c == '.' || c == '?' || c == '!');\n        } else {\n            bored_word\
    \ = c == 'I';\n        }\n        if !bored_word {\n            bored += 1;\n\
    \        }\n    }\n    bored", "    let mut cnt = 0;\n    let mut prev = '\\0';\n\
    \    for (i, c) in S.chars().enumerate() {\n        if c == '!' || c == '?' ||\
    \ c == '.' {\n            if i > 0 && prev == 'I' {\n                cnt += 1;\n\
    \            }\n        }\n        prev = c;\n    }\n    cnt", "    let s = S.to_lowercase();\n\
    \    let words: Vec<&str> = s.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut counter = 0;\n    for word in words {\n        let words: Vec<&str>\
    \ = word.split_whitespace().collect();\n        if words.len() > 0 && words[0]\
    \ == \"i\" {\n            counter += 1;\n        }\n    }\n    counter", "   \
    \ S.replace(|c: char| !c.is_alphabetic(), \" \")\n        .split_whitespace()\n\
    \        .map(|s| if s == \"I\" { 1 } else { 0 })\n        .sum()", "    let mut\
    \ cnt = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n        if\
    \ is_bored {\n            is_bored = false;\n            if c != 'I' {\n     \
    \           cnt += 1;\n            }\n        }\n        if c == '.' || c == '?'\
    \ || c == '!' {\n            is_bored = true;\n        }\n    }\n    cnt", " \
    \   let mut n = 0;\n    let mut word = false;\n    for c in S.chars() {\n    \
    \    match c {\n            'I' => {\n                if word {\n            \
    \        n += 1;\n                }\n                word = false;\n         \
    \   }\n            '.' | '?' | '!' => {\n                word = true;\n      \
    \      }\n            _ => {}\n        }\n    }\n    n", '    S.matches("I").count()
    as isize', "    let mut count = 0;\n    let words: Vec<&str> = S.split(|c: char|\
    \ !c.is_alphabetic()).collect();\n    for w in words {\n        if w == \"I\"\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut boredom\
    \ = 0;\n    let char_vec: Vec<char> = S.chars().collect();\n    let mut iter =\
    \ char_vec.iter();\n    loop {\n        match iter.next() {\n            Some(&'I')\
    \ => {\n                if iter.next() == Some(&' ') {\n                    boredom\
    \ += 1;\n                }\n            }\n            Some(&'.') | Some(&'!')\
    \ | Some(&'?') => {\n                loop {\n                    match iter.next()\
    \ {\n                        Some(&' ') => break,\n                        Some(&'I')\
    \ => {\n                            if iter.next() == Some(&' ') {\n         \
    \                       boredom += 1;\n                            }\n       \
    \                 }\n                        None => break,\n                \
    \        _ => continue,\n                    }\n                }\n          \
    \  }\n            None => break,\n            _ => continue,\n        }\n    }\n\
    \    boredom", "    if S.starts_with(\"I\") {\n        1\n    } else {\n     \
    \   0\n    }", "    S.chars()\n        .scan(None, |state, c| {\n            if\
    \ let Some(s) = state {\n                if *s == 0 && c == 'I' {\n          \
    \          *state = Some(1);\n                } else if c == '.' || c == '?' ||\
    \ c == '!' {\n                    *state = Some(0);\n                }\n     \
    \       } else {\n                *state = Some(0);\n            }\n         \
    \   Some(c)\n        })\n        .filter(|c| *c == 'I')\n        .count() as isize",
  "    let mut count = 0;\n    let mut words = S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!');\n    for word in words {\n        let split = word.split(\"\
    \ \");\n        let mut found = false;\n        for s in split {\n           \
    \ if s == \"I\" {\n                found = true;\n            }\n        }\n \
    \       if found {\n            count += 1;\n        }\n    }\n    count", " \
    \   let mut boredoms = 0;\n    let mut skip = false;\n    for (i, c) in S.chars().enumerate()\
    \ {\n        if skip {\n            skip = false;\n            continue;\n   \
    \     }\n        match c {\n            '.' | '?' | '!' => {\n               \
    \ if i > 0 && S.chars().nth(i - 1).unwrap() == 'I' {\n                    boredoms\
    \ += 1;\n                }\n            }\n            'I' => {\n            \
    \    if i < S.len() - 1 && S.chars().nth(i + 1).unwrap() == ' ' {\n          \
    \          boredoms += 1;\n                }\n            }\n            ' ' =>\
    \ skip = true,\n            _ => {}\n        }\n    }\n    boredoms", "    //\
    \ Your code here\n    let mut result = 0;\n    let mut words = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!');\n    for sentence in words {\n        let\
    \ first_word = sentence.split_whitespace().next().unwrap();\n        if first_word\
    \ == \"I\" {\n            result += 1;\n        }\n    }\n    result", "    let\
    \ mut num_boredoms = 0;\n    let chars = S.chars().peekable();\n    for c in chars\
    \ {\n        if c == 'I' {\n            num_boredoms += 1;\n        } else if\
    \ c == '.' || c == '?' || c == '!' {\n            continue;\n        } else {\n\
    \            continue;\n        }\n    }\n    num_boredoms", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.trim().starts_with(\"I\"\
    )).count() as isize", "    let mut count = 0;\n    let mut it = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!');\n    for sentence in it {\n        let mut\
    \ it2 = sentence.split_whitespace();\n        if it2.next() == Some(\"I\") {\n\
    \            count += 1;\n        }\n    }\n    count", "    S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').map(|s| {\n        s.split_whitespace().nth(0).map_or(0,\
    \ |s| if s == \"I\" { 1 } else { 0 })\n    }).sum()", "    let mut boredoms =\
    \ 0;\n    let mut words = S.split(|x| x == ' ' || x == '.' || x == '?' || x ==\
    \ '!');\n    loop {\n        match words.next() {\n            Some(word) => {\n\
    \                if word == \"I\" {\n                    boredoms += 1;\n    \
    \            }\n            }\n            None => {\n                break;\n\
    \            }\n        }\n    }\n    boredoms", "    if !S.is_empty() {\n   \
    \     let mut boredoms = 0;\n        let sentences = S.split(&['.', '?', '!'][..]);\n\
    \        for sentence in sentences {\n            let words = sentence.split_whitespace();\n\
    \            if let Some(word) = words.next() {\n                if word == \"\
    I\" {\n                    boredoms += 1;\n                }\n            }\n\
    \        }\n        boredoms\n    } else {\n        0\n    }", "    let mut boredoms\
    \ = 0;\n    let mut start_sentence = true;\n    for word in S.split_whitespace()\
    \ {\n        let word = word.trim_matches(|c| c == '.' || c == '?' || c == '!');\n\
    \        if start_sentence && word == \"I\" {\n            boredoms += 1;\n  \
    \      }\n        start_sentence = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms", "    let mut count = 0;\n   \
    \ let re = Regex::new(r\"(\\bI\\b)\").unwrap();\n    let S = S.split_terminator('.').collect::<Vec<&str>>();\n\
    \    for s in S {\n        if re.is_match(s) {\n            count += 1;\n    \
    \    }\n    }\n    count", "    S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!').map(|x| x.to_lowercase().starts_with(\"i\") as isize).sum()", "    let\
    \ sentences = S.split_whitespace();\n    let mut boredoms = 0;\n    for sentence\
    \ in sentences {\n        let mut words = sentence.split_terminator(&['.', '?',\
    \ '!']);\n        if words.next() == Some(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n    boredoms", "    let mut x = 0;\n    let mut i = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for j in i {\n        if j.starts_with(\"\
    I\") {\n            x += 1;\n        }\n    }\n    x", "    let mut count = 0;\n\
    \    let v: Vec<_> = S.split(|c| c == '.' || c == '?' || c == '!').collect();\n\
    \    for i in v {\n        if i.starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut result = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_prev_space = false;\n    for letter in S.chars() {\n  \
    \      match letter {\n            '.' | '?' | '!' => {\n                if dot_count\
    \ == 1 {\n                    result += 1;\n                }\n              \
    \  dot_count = 0;\n                is_prev_space = true;\n            }\n    \
    \        ' ' => {\n                if is_prev_space {\n                    dot_count\
    \ = 0;\n                }\n                is_prev_space = true;\n           \
    \ }\n            'I' => {\n                if is_prev_space {\n              \
    \      dot_count = 1;\n                }\n                is_prev_space = false;\n\
    \            }\n            _ => {\n                dot_count = 0;\n         \
    \       is_prev_space = false;\n            }\n        }\n    }\n    if dot_count\
    \ == 1 {\n        result += 1;\n    }\n    result", "    S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!').filter(|s| {\n        if s.is_empty() {\n     \
    \       false\n        } else {\n            let ws: Vec<&str> = s.split_whitespace().collect();\n\
    \            if ws.is_empty() {\n                false\n            } else {\n\
    \                ws[0] == \"I\"\n            }\n        }\n    }).count() as isize",
  "    S.split(&['.', '?', '!'][..]).filter(|s| s.starts_with(\"I\")).count() as isize",
  "    let mut boredoms = 0;\n    let mut start_with_i = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            start_with_i =\
    \ false;\n        } else if c == 'I' {\n            start_with_i = true;\n   \
    \     } else if start_with_i && c != ' ' {\n            boredoms += 1;\n     \
    \       start_with_i = false;\n        }\n    }\n    boredoms", "  S.split_whitespace()\n\
    \    .filter(|s| *s == \"I\")\n    .collect::<Vec<&str>>()\n    .len() as isize",
  "    let mut boredoms = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut\
    \ l = S.len();\n    let mut k = l - 1;\n    let mut S = S.into_bytes();\n    while\
    \ j < l {\n        if S[j] == 'I' as u8 && j == 0 {\n            boredoms += 1;\n\
    \        } else if S[j] == 'I' as u8 && j == k && S[j - 1] == '.' as u8 {\n  \
    \          boredoms += 1;\n        } else if S[j] == 'I' as u8 && j != 0 && j\
    \ != k && (S[j - 1] == '.' as u8 || S[j - 1] == '?' as u8 || S[j - 1] == '!' as\
    \ u8) {\n            boredoms += 1;\n        }\n        j += 1;\n    }\n    boredoms",
  "    let s = S.as_str();\n    let mut cnt = 0;\n    let v: Vec<&str> = s.split(|c|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for s in v {\n        let\
    \ v: Vec<&str> = s.split_whitespace().collect();\n        if v.len() > 0 && v[0]\
    \ == \"I\" {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut\
    \ boredoms = 0;\n    let mut found_i = false;\n    for word in S.split(\" \")\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \      found_i = true;\n        } else if found_i && (word.ends_with(\"!\") ||\
    \ word.ends_with(\".\") || word.ends_with(\"?\")) {\n            found_i = false;\n\
    \        }\n    }\n    boredoms", "    let is_capital_i = |ch: char| {\n     \
    \   ch == 'I'\n    };\n    let is_uppercase = |ch: char| {\n        ch.is_uppercase()\n\
    \    };\n    let mut cnt = 0;\n    let mut words = S.split(|ch: char| {\n    \
    \    ch == '.' || ch == '?' || ch == '!'\n    });\n    while let Some(word) =\
    \ words.next() {\n        let mut chars = word.trim().chars();\n        if chars.next().map_or(false,\
    \ is_capital_i) && chars.next().map_or(true, is_uppercase) {\n            cnt\
    \ += 1;\n        }\n    }\n    cnt", "    let mut boring = 0;\n    let mut i =\
    \ 0;\n    for word in S.split(|c: char| c == '.' || c == '?' || c == '!') {\n\
    \        if word.trim().chars().next().unwrap() == 'I' {\n            boring +=\
    \ 1;\n        }\n    }\n    boring", "    let words: Vec<&str> = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').collect();\n    let mut counter = 0;\n   \
    \ for word in words {\n        if word.trim().starts_with(\"I\") {\n         \
    \   counter += 1;\n        }\n    }\n    counter", "    let mut count = 0;\n \
    \   let mut cnt = 0;\n    let v: Vec<char> = S.chars().collect();\n    for i in\
    \ 0..v.len() {\n        if (v[i] == 'I') {\n            cnt += 1;\n        }\n\
    \        if (v[i] == '.' || v[i] == '?' || v[i] == '!') {\n            count +=\
    \ cnt;\n            cnt = 0;\n        }\n    }\n    return count;"]
stop_tokens:
- "\n}"
