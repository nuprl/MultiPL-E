name: HumanEval_34_unique
language: rust
results:
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().unique().collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmph720nukp.rs:5:19\n  |\n5 |     l.into_iter().unique().collect()\n\
    \  |                   ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = l;\n    result.sort();\n    result.dedup();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpk86ccqtm.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if !res.contains(&x)\
    \ {\n            res.push(x);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpocmui4qk.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    let mut r = Vec::new();\n\
    \    let mut i = 0;\n    while i < l.len() {\n        r.push(l[i]);\n        while\
    \ i < l.len() && l[i] == l[i + 1] {\n            i += 1;\n        }\n        i\
    \ += 1;\n    }\n    r\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 9 but the index\
    \ is 9', /tmp/tmpezax0ujf.rs:11:38\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if !res.contains(&x)\
    \ {\n            res.push(x);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for x in l {\n        if\
    \ !result.contains(&x) {\n            result.push(x);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().unique().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpv35dbweq.rs:5:23\n  |\n5 |     l.iter().cloned().unique().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz0p9lruh.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    l.dedup();\n\
    \    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().unique().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpskuntfl_.rs:5:23\n  |\n5 |     l.iter().cloned().unique().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut m = HashMap::new();\n    for x in l {\n        m.insert(x,\
    \ 0);\n    }\n    let mut v = m.keys().cloned().collect::<Vec<isize>>();\n   \
    \ v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpo1o2zi9s.rs:5:17\n  |\n5 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut t = Vec::new();\n    let mut s = l.clone();\n    s.sort();\n\
    \    t.push(s[0]);\n    for i in 1..s.len() {\n        if s[i] != s[i - 1] {\n\
    \            t.push(s[i]);\n        }\n    }\n    t\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    vec![]\n}\n\nfn main() {\n    let candidate = unique;\n  \
    \  assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpo4pyt31n.rs:10:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if !res.contains(&i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = BTreeSet::new();\n    for n in l {\n        s.insert(n);\n\
    \    }\n    s.into_iter().collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpg3wbkiak.rs:5:17\n  |\n5 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpmvrw9_je.rs:5:73\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                                                         ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcs4d5qxf.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut u = vec![];\n    for x in l {\n        if !u.contains(&x)\
    \ {\n            u.push(x);\n        }\n    }\n    u.sort();\n    u\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() == 0 {\n        return l;\n    }\n\n    let mut\
    \ tmp = l.clone();\n    tmp.sort();\n    tmp.dedup();\n    tmp\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut temp = l;\n    temp.sort();\n    temp.dedup();\n \
    \   temp\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpwbtynbrn.rs:5:29\n\
    \  |\n5 |     l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    \  |                             ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() == 0 {\n        return l;\n    }\n    let mut xs\
    \ = l.to_vec();\n    xs.sort();\n    xs.dedup();\n    xs\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut l = l;\n    l.sort();\n\
    \    for x in l {\n        set.insert(x);\n    }\n    let mut l = Vec::new();\n\
    \    for x in set {\n        l.push(x);\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpcmpw7nni.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpk8o6t57q.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut sorted = l.clone();\n\
    \    sorted.sort();\n    let mut i = 0;\n    while i < sorted.len() {\n      \
    \  if i == 0 || sorted[i - 1] != sorted[i] {\n            result.push(sorted[i]);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<BTreeSet<isize>>().iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpdpif5sbb.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<BTreeSet<isize>>().iter().cloned().collect()\n\
    \  |                                 ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l2 = l.clone();\n    l2.sort();\n    let mut ret =\
    \ Vec::new();\n    let mut last = -1;\n    for e in l2 {\n        if e != last\
    \ {\n            ret.push(e);\n            last = e;\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut cnt: HashMap<isize, bool> = HashMap::new();\n    for\
    \ i in l {\n        cnt.insert(i, true);\n    }\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for (&k, _) in cnt.iter() {\n        res.push(k);\n    }\n\
    \    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique;\n   \
    \ assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpyma4n2i5.rs:5:18\n\
    \  |\n5 |     let mut cnt: HashMap<isize, bool> = HashMap::new();\n  |       \
    \           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpyma4n2i5.rs:5:41\n\
    \  |\n5 |     let mut cnt: HashMap<isize, bool> = HashMap::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<BTreeSet<isize>>().iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpfqrrockt.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<BTreeSet<isize>>().iter().cloned().collect()\n\
    \  |                                 ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp6x8rdlwl.rs:5:73\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                                                         ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsfcr_gms.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx86jjtka.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    let mut v = l.clone();\n\
    \    v.sort();\n    ret.push(v[0]);\n    for i in v {\n        if i != ret[ret.len()\
    \ - 1] {\n            ret.push(i);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut m = HashMap::new();\n    for e in l {\n        m.insert(e,\
    \ true);\n    }\n    let mut r = Vec::new();\n    for (k, _) in m {\n        r.push(k);\n\
    \    }\n    r.sort();\n    r\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpk5o1qzp8.rs:5:17\n  |\n5 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // let mut u: HashSet<isize> = HashSet::new();\n    // let\
    \ mut x = l.clone();\n    // x.sort();\n    // for &i in &x {\n    //     u.insert(i);\n\
    \    // }\n    // let mut ux: Vec<isize> = u.into_iter().collect();\n    // ux.sort();\n\
    \    // ux\n    let mut u: HashSet<isize> = HashSet::new();\n    for &i in &l\
    \ {\n        u.insert(i);\n    }\n    let mut ux: Vec<isize> = u.into_iter().collect();\n\
    \    ux.sort();\n    ux\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmply24jnz5.rs:14:16\n\
    \   |\n14 |     let mut u: HashSet<isize> = HashSet::new();\n   |            \
    \    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmply24jnz5.rs:14:33\n   |\n14\
    \ |     let mut u: HashSet<isize> = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpclsfy6at.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut l = l;\n  l.sort();\n  l.dedup();\n  l\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdrhmes9y.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l2 = l.clone();\n    l2.sort();\n    l2.dedup();\n\
    \    l2\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut _l = l;\n    _l.sort();\n    _l.dedup();\n    _l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = BTreeSet::new();\n    set.extend(l);\n    set.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpy3mekhg2.rs:5:19\n  |\n5 |     let mut set = BTreeSet::new();\n  | \
    \                  ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp30xfob0p.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = BTreeSet::new();\n    for i in l {\n        s.insert(i);\n\
    \    }\n    s.into_iter().collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpfcnu3fqa.rs:5:17\n  |\n5 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpp41fy8sd.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    sorted.dedup();\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for &v in l.iter() {\n    \
    \    if !res.contains(&v) {\n            res.push(v);\n        }\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgcb620y9.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    let mut tmp = l.clone();\n\
    \    tmp.sort();\n    let mut p = 0;\n    while p < tmp.len() {\n        res.push(tmp[p]);\n\
    \        while p < tmp.len() && tmp[p] == tmp[p+1] {\n            p += 1;\n  \
    \      }\n        p += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 9 but the index\
    \ is 9', /tmp/tmptbqye33s.rs:11:42\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut a = l;\n    a.sort();\n    a.dedup();\n    a\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = l;\n    result.sort();\n    result.dedup();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = BTreeSet::new();\n    for el in l {\n        s.insert(el);\n\
    \    }\n    let mut v = Vec::new();\n    for el in s {\n        v.push(el);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpsv_w3air.rs:5:17\n  |\n5 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    let mut\
    \ unique = Vec::new();\n    let mut last = -1;\n    for &n in sorted.iter() {\n\
    \        if n != last {\n            unique.push(n);\n            last = n;\n\
    \        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpt_qeg50n.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nl = l.clone();\n    nl.sort();\n    nl.dedup();\n\
    \    nl\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    let mut added = HashSet::new();\n\
    \    for i in l {\n        if !added.contains(&i) {\n            res.push(i);\n\
    \            added.insert(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplr838089.rs:6:21\n  |\n6 |     let mut added = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpmpj6cmt1.rs:5:29\n\
    \  |\n5 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut m = HashMap::new();\n    for e in l {\n        m.insert(e,\
    \ false);\n    }\n    m.keys().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpnj4ftl1_.rs:5:17\n  |\n5 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for i in l {\n        if !result.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_l = l.clone();\n    new_l.sort();\n    new_l.dedup();\n\
    \    new_l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut last = -1;\n   \
    \ for i in l {\n        if i != last {\n            result.push(i);\n        \
    \    last = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp4hq8q4ny.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpmf16qw7h.rs:5:29\n\
    \  |\n5 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut temp: Vec<isize> = l.clone();\n    temp.sort();\n\
    \    let mut result: Vec<isize> = Vec::new();\n    for x in temp {\n        if\
    \ result.len() == 0 || result[result.len() - 1] != x {\n            result.push(x);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = HashSet::new();\n    l.iter().filter(|x| s.insert(*x)).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpxop7gvkf.rs:5:17\n  |\n5 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if\
    \ !result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut v = Vec::new();\n\
    \    for item in l {\n        if !set.contains(&item) {\n            set.insert(item);\n\
    \            v.push(item);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp38vzbpww.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_70_7dnw.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut l = l;\n  l.sort();\n  l.dedup();\n  l\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for item in l {\n        if\
    \ !res.contains(&item) {\n            res.push(item);\n        }\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut li = l;\n    li.sort();\n    let mut i = 0;\n    while\
    \ i < li.len() - 1 {\n        if li[i] == li[i + 1] {\n            li.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    li\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    let mut i =\
    \ 1;\n    while i < l.len() {\n        if l[i - 1] == l[i] {\n            l.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut temp = l;\n    temp.sort();\n    let mut result =\
    \ Vec::new();\n    for i in temp {\n        if result.len() == 0 || result[result.len()\
    \ - 1] != i {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut uniq: Vec<isize> = vec![];\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for i in l {\n        if !seen.contains(&i) {\n     \
    \       uniq.push(i);\n            seen.insert(i);\n        }\n    }\n    uniq.sort();\n\
    \    uniq\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpnqlgvy9v.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpnqlgvy9v.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut my_vec = l;\n    my_vec.sort();\n    my_vec.dedup();\n\
    \    my_vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // let mut ret = Vec::<isize>::new();\n    let mut ret = Vec::with_capacity(l.len());\n\
    \    let mut hm = HashMap::<isize, isize>::new();\n    for e in l {\n        hm.insert(e,\
    \ e);\n    }\n    for (k, _) in hm {\n        ret.push(k);\n    }\n    ret.sort();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpayawwsqo.rs:7:18\n  |\n7 |     let mut hm = HashMap::<isize, isize>::new();\n\
    \  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptdwmbf0s.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut last = None;\n    let mut res = Vec::new();\n    for\
    \ i in l.into_iter().sorted() {\n        if last != Some(i) {\n            res.push(i);\n\
    \            last = Some(i);\n        }\n    }\n    res\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpri7b35ul.rs:7:28\n  |\n7 |     for i in l.into_iter().sorted()\
    \ {\n  |                            ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    fn aux(l: Vec<isize>, result: Vec<isize>) -> Vec<isize> {\n\
    \        match l {\n            [] => result,\n            hd::tl => if mem(hd,\
    \ result) { aux(tl, result) } else { aux(tl, result.concat([hd])) }\n        }\n\
    \    }\n    aux(l, []).sort()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hd`\n\
    \ --> /tmp/tmpr8ufkwar.rs:8:13\n  |\n8 |             hd::tl => if mem(hd, result)\
    \ { aux(tl, result) } else { aux(tl, result.concat([hd])) }\n  |             ^^\
    \ use of undeclared crate or module `hd`\n\nerror[E0425]: cannot find function\
    \ `mem` in this scope\n --> /tmp/tmpr8ufkwar.rs:8:26\n  |\n8 |             hd::tl\
    \ => if mem(hd, result) { aux(tl, result) } else { aux(tl, result.concat([hd]))\
    \ }\n  |                          ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `hd` in this scope\n --> /tmp/tmpr8ufkwar.rs:8:30\n  |\n8\
    \ |             hd::tl => if mem(hd, result) { aux(tl, result) } else { aux(tl,\
    \ result.concat([hd])) }\n  |                              ^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `tl` in this scope\n --> /tmp/tmpr8ufkwar.rs:8:48\n\
    \  |\n8 |             hd::tl => if mem(hd, result) { aux(tl, result) } else {\
    \ aux(tl, result.concat([hd])) }\n  |                                        \
    \        ^^ help: a local variable with a similar name exists: `l`\n\nerror[E0425]:\
    \ cannot find value `tl` in this scope\n --> /tmp/tmpr8ufkwar.rs:8:73\n  |\n8\
    \ |             hd::tl => if mem(hd, result) { aux(tl, result) } else { aux(tl,\
    \ result.concat([hd])) }\n  |                                                \
    \                         ^^ help: a local variable with a similar name exists:\
    \ `l`\n\nerror[E0425]: cannot find value `hd` in this scope\n --> /tmp/tmpr8ufkwar.rs:8:92\n\
    \  |\n8 |             hd::tl => if mem(hd, result) { aux(tl, result) } else {\
    \ aux(tl, result.concat([hd])) }\n  |                                        \
    \                                                    ^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr8ufkwar.rs:11:12\n   |\n11 |\
    \     aux(l, []).sort()\n   |            ^^- help: try using a conversion method:\
    \ `.to_vec()`\n   |            |\n   |            expected struct `Vec`, found\
    \ array of 0 elements\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \        found array `[_; 0]`\n\nerror[E0308]: mismat"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sl = l.clone();\n    sl.sort();\n    sl.dedup();\n\
    \    sl\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = BTreeSet::new();\n    for e in l {\n        s.insert(e);\n\
    \    }\n    s.into_iter().collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpz0g5q61f.rs:5:17\n  |\n5 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = l.clone();\n    unique.sort();\n    unique.dedup();\n\
    \    unique\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut u: Vec<isize> = Vec::new();\n    for el in l {\n \
    \       if !(u.contains(&el)) {\n            u.push(el);\n        }\n    }\n \
    \   u.sort();\n    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpff9e0eqx.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut i = 0;\n    let mut j = 1;\n    let mut list = l;\n\
    \    let len = list.len();\n    list.sort();\n    while j < len {\n        if\
    \ list[i] == list[j] {\n            list.remove(j);\n        } else {\n      \
    \      i += 1;\n            j += 1;\n        }\n    }\n    list\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 6 but the index\
    \ is 6', /tmp/tmpejs3uiy0.rs:11:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i == 0 {\n            result.push(l[i]);\n        } else {\n     \
    \       if !result.contains(&l[i]) {\n                result.push(l[i]);\n   \
    \         }\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4_y31z4b.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    return l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>();\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpbfejrjtm.rs:5:40\n\
    \  |\n5 |     return l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>();\n\
    \  |                                        ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut a = l;\n    a.sort();\n    a.dedup();\n    a\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp38c73ev_.rs:5:29\n\
    \  |\n5 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut set = HashSet::new();\n\
    \    for i in l {\n        if !set.contains(&i) {\n            set.insert(i);\n\
    \            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpft97kyg4.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvx6w_qdd.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_l = l.clone();\n    new_l.sort();\n    new_l.dedup();\n\
    \    new_l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if !res.contains(&x)\
    \ {\n            res.push(x);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    let mut unique_list = Vec::new();\n\
    \    let mut prev = None;\n    for item in l {\n        if prev.is_none() || Some(item)\
    \ != prev {\n            unique_list.push(item);\n        }\n        prev = Some(item);\n\
    \    }\n    unique_list\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp06gu5q_4.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: implement\n\n    let len = l.len();\n    let mut\
    \ sorted: Vec<isize> = sort(l);\n    sorted.dedup();\n    if len == sorted.len()\
    \ {\n        return sorted;\n    } else {\n        let mut new_vec: Vec<isize>\
    \ = vec![];\n        for i in 0..len {\n            if new_vec.contains(&sorted[i])\
    \ {\n                continue;\n            } else {\n                new_vec.push(sorted[i]);\n\
    \            }\n        }\n        return new_vec;\n    }\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort` in this scope\n --> /tmp/tmpk72zi97a.rs:8:34\n\
    \  |\n8 |     let mut sorted: Vec<isize> = sort(l);\n  |                     \
    \             ^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut h: HashSet<isize> = HashSet::new();\n    for item\
    \ in l {\n        h.insert(item);\n    }\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for item in h {\n        v.push(item);\n    }\n    v.sort();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7hjggrkn.rs:5:16\n\
    \  |\n5 |     let mut h: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp7hjggrkn.rs:5:33\n  |\n5 |  \
    \   let mut h: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ll = l;\n    ll.sort();\n    ll.dedup();\n    ll\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_set: Vec<isize> = Vec::new();\n    let mut\
    \ unique_vec: Vec<isize> = Vec::new();\n    let mut sorted_vec: Vec<isize> = Vec::new();\n\
    \n    for i in l {\n        if !unique_set.contains(&i) {\n            unique_set.push(i);\n\
    \        }\n    }\n\n    for i in unique_set {\n        unique_vec.push(i);\n\
    \    }\n\n    sorted_vec = unique_vec.clone();\n    sorted_vec.sort();\n\n   \
    \ sorted_vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: Your code here\n    let mut new_vec = l.clone();\n\
    \    new_vec.sort();\n    for i in 0..new_vec.len() {\n        if i < new_vec.len()\
    \ - 1 {\n            if new_vec[i] == new_vec[i + 1] {\n                new_vec.remove(i);\n\
    \            }\n        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 3, 3, 5, 9, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpx4a8z08d.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<BTreeSet<isize>>().iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpxrvlpx0z.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<BTreeSet<isize>>().iter().cloned().collect()\n\
    \  |                                 ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_j06_571.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut l2 = l.clone();\n  l2.sort();\n  l2.dedup();\n  l2\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppo41vpc7.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = BTreeSet::new();\n    for x in l {\n       \
    \ set.insert(x);\n    }\n    set.into_iter().collect()\n}\n\nfn main() {\n   \
    \ let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpw689cjql.rs:5:19\n  |\n5 |     let mut set = BTreeSet::new();\n  | \
    \                  ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut tmp = l;\n    tmp.sort();\n    tmp.dedup();\n    tmp\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let\
    \ mut prev = l[0];\n    let mut result = vec![];\n    for i in 0..l.len() {\n\
    \        if l[i] != prev {\n            result.push(l[i]);\n            prev =\
    \ l[i];\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 5, 9, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp8gm7eb08.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() == 0 {\n        return l;\n    }\n    let mut h\
    \ = HashSet::new();\n    let mut v = Vec::new();\n    for i in l {\n        if\
    \ !h.contains(&i) {\n            h.insert(i);\n            v.push(i);\n      \
    \  }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpvbnbysuv.rs:8:17\n  |\n8 |     let mut h = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ll = l;\n    ll.sort();\n    ll.dedup();\n    ll\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut _l = l;\n    _l.sort();\n    let mut _new_l = Vec::new();\n\
    \    let mut _last_e = -1;\n    for e in _l {\n        if e != _last_e {\n   \
    \         _new_l.push(e);\n            _last_e = e;\n        }\n    }\n    _new_l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = l;\n    result.sort();\n    result.dedup();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for &i in l.iter() {\n \
    \       if !result.contains(&i) {\n            result.push(i);\n        }\n  \
    \  }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpexblfvkl.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmp98rkc8x9.rs:5:29\n\
    \  |\n5 |     l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    \  |                             ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = l;\n    ret.sort();\n    ret.dedup();\n    ret\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l2 = l.clone();\n    l2.sort();\n    l2.dedup();\n\
    \    l2\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n  \
    \  s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    let mut count\
    \ = 0;\n    let mut current_value = l[0];\n    let mut result = Vec::new();\n\
    \    for i in l {\n        if i != current_value {\n            result.push(current_value);\n\
    \            current_value = i;\n            count = 0;\n        }\n        count\
    \ += 1;\n    }\n    if count > 0 {\n        result.push(current_value);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8ipcax96.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.into_iter().filter(|v|\
    \ seen.insert(*v)).collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp_cuifixq.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    for i in l {\n        if !ret.contains(&i)\
    \ {\n            ret.push(i);\n        }\n    }\n    ret.sort();\n    ret\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    let mut r = Vec::<isize>::new();\n\
    \    let mut cur = None;\n    for i in l {\n        if i != cur {\n          \
    \  r.push(i);\n            cur = Some(i);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxsqgch2a.rs:10:17\n   |\n\
    10 |         if i != cur {\n   |                 ^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ll = l;\n    ll.sort();\n    ll.dedup();\n    ll\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0hln4jaj.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.into_iter().filter(|&e|\
    \ seen.insert(e)).collect()\n}\n\nfn main() {\n    let candidate = unique;\n \
    \   assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpce810dfy.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = Set::new();\n    for x in l {\n        s.insert(x);\n\
    \    }\n    let mut res = s.into_iter().collect::<Vec<isize>>();\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmpwpjoy6_2.rs:5:17\n\
    \  |\n5 |     let mut s = Set::new();\n  |                 ^^^ use of undeclared\
    \ type `Set`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ul = l.clone();\n    ul.sort();\n    ul.dedup();\n\
    \    ul\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = HashSet::new();\n    let mut out = Vec::new();\n\
    \    for i in l {\n        if !s.contains(&i) {\n            s.insert(i);\n  \
    \          out.push(i);\n        }\n    }\n    out.sort();\n    out\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1f2xui0f.rs:5:17\n  |\n5 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO\n    return vec![];\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpvl7xe58n.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    l.dedup();\n\
    \    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut dict = HashMap::new();\n    let mut res = Vec::new();\n\
    \    for e in l {\n        dict.insert(e, true);\n    }\n    for (k, v) in dict\
    \ {\n        res.push(k);\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpap4hnu74.rs:5:20\n  |\n5 |     let mut dict = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut u: Vec<isize> = Vec::new();\n    for &n in &l {\n\
    \        if !u.contains(&n) {\n            u.push(n);\n        }\n    }\n    u.sort();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    l.dedup();\n\
    \    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l2 = l.clone();\n    l2.sort();\n    l2.dedup();\n\
    \    l2\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    fn uniq(l: Vec<isize>, r: Vec<isize>) -> Vec<isize> {\n  \
    \      match l {\n            [] => r,\n            [x, ..xs] => {\n         \
    \       let mut r = r;\n                if !r.contains(&x) {\n               \
    \     r.push(x);\n                }\n                uniq(xs, r)\n           \
    \ }\n        }\n    }\n    uniq(l, Vec::new())\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `xs` in this scope\n --> /tmp/tmp_g3y3q5j.rs:8:19\n\
    \  |\n8 |             [x, ..xs] => {\n  |                   ^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `xs` in this scope\n  --> /tmp/tmp_g3y3q5j.rs:13:22\n\
    \   |\n13 |                 uniq(xs, r)\n   |                      ^^ help: a\
    \ local variable with a similar name exists: `x`\n\nerror[E0658]: half-open range\
    \ patterns are unstable\n --> /tmp/tmp_g3y3q5j.rs:8:17\n  |\n8 |             [x,\
    \ ..xs] => {\n  |                 ^^^^\n  |\n  = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmp_g3y3q5j.rs:8:17\n  |\n8 |             [x, ..xs] => {\n  |     \
    \            ^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n\
    \ --> /tmp/tmp_g3y3q5j.rs:7:13\n  |\n6 |         match l {\n  |              \
    \ - help: consider slicing here: `l[..]`\n7 |             [] => r,\n  |      \
    \       ^^ pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]:\
    \ expected an array or slice, found `Vec<isize>`\n --> /tmp/tmp_g3y3q5j.rs:8:13\n\
    \  |\n6 |         match l {\n  |               - help: consider slicing here:\
    \ `l[..]`\n7 |             [] => r,\n8 |             [x, ..xs] => {\n  |     \
    \        ^^^^^^^^^ pattern cannot match with input type `Vec<isize>`\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0529, E0658.\nFor more information about an error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7cytcfql.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    l.dedup();\n\
    \    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l_: Vec<isize> = l.clone();\n    l_.sort();\n    l_.dedup();\n\
    \    l_\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // start with an empty set\n    let mut unique: BTreeSet<isize>\
    \ = BTreeSet::new();\n    // insert all the elements of l into the set\n    for\
    \ v in l {\n        unique.insert(v);\n    }\n    // create a new Vec and return\
    \ it\n    let mut result: Vec<isize> = Vec::new();\n    for v in unique {\n  \
    \      result.push(v);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpu3qnaq9g.rs:6:21\n\
    \  |\n6 |     let mut unique: BTreeSet<isize> = BTreeSet::new();\n  |        \
    \             ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `BTreeSet`\n --> /tmp/tmpu3qnaq9g.rs:6:39\n\
    \  |\n6 |     let mut unique: BTreeSet<isize> = BTreeSet::new();\n  |        \
    \                               ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3ox8uc41.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut hm = HashMap::new();\n    for x in l {\n        hm.insert(x,\
    \ true);\n    }\n    let mut keys: Vec<isize> = hm.keys().map(|x| *x).collect();\n\
    \    keys.sort();\n    keys\n}\n\nfn main() {\n    let candidate = unique;\n \
    \   assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpoekx09od.rs:5:18\n  |\n5 |     let mut hm = HashMap::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpfkat7nwi.rs:5:29\n\
    \  |\n5 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    let mut last\
    \ = l[0];\n    let mut unique = vec![last];\n    for i in 1..l.len() {\n     \
    \   if l[i] != last {\n            unique.push(l[i]);\n            last = l[i];\n\
    \        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for item in l {\n        if !seen.contains(&item) {\n            seen.insert(item);\n\
    \            result.push(item);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpwqtn16mt.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if\
    \ !result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = Vec::new();\n    let mut final = Vec::new();\n\
    \    for item in l {\n        if !seen.contains(&item) {\n            seen.push(item);\n\
    \            final.push(item);\n        }\n    }\n    final.sort();\n    final\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found reserved keyword `final`\n --> /tmp/tmpsoi9grvi.rs:6:13\n\
    \  |\n6 |     let mut final = Vec::new();\n  |             ^^^^^ expected identifier,\
    \ found reserved keyword\n  |\nhelp: escape `final` to use it as an identifier\n\
    \  |\n6 |     let mut r#final = Vec::new();\n  |             ++\n\nerror: expected\
    \ expression, found reserved keyword `final`\n  --> /tmp/tmpsoi9grvi.rs:10:13\n\
    \   |\n10 |             final.push(item);\n   |             ^^^^^ expected expression\n\
    \nerror: expected expression, found reserved keyword `final`\n  --> /tmp/tmpsoi9grvi.rs:13:5\n\
    \   |\n13 |     final.sort();\n   |     ^^^^^ expected expression\n\nerror: aborting\
    \ due to 3 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sl = l.clone();\n    sl.sort();\n    sl.dedup();\n\
    \    sl\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::<isize>::new();\n    for it in l {\n  \
    \      if !(res.contains(&it)) {\n            res.push(it);\n        }\n    }\n\
    \    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique;\n   \
    \ assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = l;\n    result.sort();\n    result.dedup();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    fn part(l: Vec<isize>, a: Vec<isize>, b: Vec<isize>) -> Vec<isize>\
    \ {\n        if l.len() == 0 {\n            return a;\n        }\n        let\
    \ h = l[0];\n        if contains(b, h) {\n            part(tail(l), a, b)\n  \
    \      } else {\n            part(tail(l), append(a, vec![h]), b)\n        }\n\
    \    }\n    part(l, vec![], vec![])\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `contains` in this scope\n  --> /tmp/tmpbw18nwxp.rs:10:12\n\
    \   |\n10 |         if contains(b, h) {\n   |            ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `tail` in this scope\n  -->\
    \ /tmp/tmpbw18nwxp.rs:11:18\n   |\n11 |             part(tail(l), a, b)\n   |\
    \                  ^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `tail` in this scope\n  --> /tmp/tmpbw18nwxp.rs:13:18\n   |\n13 |          \
    \   part(tail(l), append(a, vec![h]), b)\n   |                  ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `append` in this scope\n\
    \  --> /tmp/tmpbw18nwxp.rs:13:27\n   |\n13 |             part(tail(l), append(a,\
    \ vec![h]), b)\n   |                           ^^^^^^ not found in this scope\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // Sort the list\n    let mut list = l.clone();\n    list.sort();\n\
    \n    // Create a new vector to store unique values\n    let mut res = Vec::new();\n\
    \n    // Add the first value to the vector\n    res.push(list[0]);\n\n    // Iterate\
    \ through the list and add new values\n    for i in list {\n        if res[res.len()\
    \ - 1] != i {\n            res.push(i);\n        }\n    }\n\n    // Return the\
    \ vector\n    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0q3vv14m.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
