name: HumanEval_28_concatenate
language: rust
results:
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, x| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for string in\
    \ strings {\n        s.push_str(&string);\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result += &string;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |sum, s| sum\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut result,\
    \ string| {\n        result.push_str(string);\n        result\n    })\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += &s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut result,\
    \ s| {\n        result.push_str(s);\n        result\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut res = String::new();\n    for s in strings\
    \ {\n        res.push_str(&s);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| acc\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut ret = String::new();\n    for string in\
    \ strings {\n        ret.push_str(&string);\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| acc\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    return strings.concat();\n}\n\nfn main() {\n \
    \   let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, cur|\
    \ acc + cur)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, x|\
    \ {\n        acc.push_str(x);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| &**s).collect()\n}\n\n\
    fn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| acc\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut new_string = String::new();\n    for string\
    \ in strings {\n        new_string.push_str(&string);\n    }\n    new_string\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // We don't have to worry about overflow when\
    \ summing all the lengths,\n    // because that's just the length of the output.\n\
    \    let mut result = String::with_capacity(strings.iter().map(|s| s.len()).sum());\n\
    \    for s in strings {\n        result.push_str(&s);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    return strings.join(\"\");\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // to_string_method makes a string from any type\n\
    \    // iter_mut is a mutable iterator that iterates over the elements\n    strings.iter().fold(String::new(),\
    \ |mut a, b| {\n        a.push_str(&b);\n        a\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |str1, str2|\
    \ str1 + str2)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for string in\
    \ strings {\n        s.push_str(&string);\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut ret: String = String::new();\n    for\
    \ s in strings {\n        ret += &s;\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().collect()\n}\n\nfn main() {\n \
    \   let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmppnmyhdv2.rs:7:20\n     |\n\
    7    |     strings.iter().collect()\n     |                    ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += &s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut xs = String::new();\n    for s in strings\
    \ {\n        xs.push_str(&s);\n    }\n    xs\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for str in strings\
    \ {\n        s.push_str(&str);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |string, concat|\
    \ string + concat)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // Convert a slice of strings into a single string.\n\
    \    let mut result = String::new();\n    for s in strings {\n        result +=\
    \ &s;\n    }\n    result\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for item\
    \ in strings {\n        result.push_str(&item);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut out = String::new();\n    for string in\
    \ strings {\n        out.push_str(&string);\n    }\n    out\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |sum, string|\
    \ sum + string)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // TODO: reimplement with fold\n    let mut res\
    \ = String::new();\n    for s in strings {\n        res.push_str(&s);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for string in\
    \ strings {\n        s.push_str(&string);\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |s, v| s +\
    \ v)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut output = String::new();\n    for item\
    \ in strings {\n        output += &item;\n    }\n    output\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut concatenated = String::new();\n    for\
    \ s in strings {\n        concatenated.push_str(&s);\n    }\n    concatenated\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |a, b| a +\
    \ b)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut concatenated = String::new();\n    for\
    \ string in strings {\n        concatenated.push_str(&string);\n    }\n    concatenated\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, x| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let concatenated = strings.into_iter().fold(String::new(),\
    \ |acc, x| acc + &x);\n    concatenated\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().collect()\n}\n\nfn main() {\n \
    \   let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpfgbnoxa0.rs:7:20\n     |\n\
    7    |     strings.iter().collect()\n     |                    ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut new_string = String::new();\n    for s\
    \ in strings {\n        new_string.push_str(&s);\n    }\n    new_string\n}\n\n\
    fn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| acc\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut r = String::new();\n    for mut s in strings\
    \ {\n        r.push_str(&s);\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |a, b| a +\
    \ b)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut accum,\
    \ next| {\n        accum.push_str(next);\n        accum\n    })\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for i in strings\
    \ {\n        s.push_str(&i);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    if strings.len() == 0 {\n        return String::new();\n\
    \    }\n    let mut result = String::new();\n    for s in strings {\n        result.push_str(&s);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut out = String::new();\n    for s in strings\
    \ {\n        out.push_str(&s);\n    }\n    out\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut concatenated_string = String::new();\n\
    \    for string in strings {\n        concatenated_string.push_str(&string);\n\
    \    }\n    concatenated_string\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut string = String::new();\n    for s in\
    \ strings {\n        string.push_str(&s);\n    }\n    string\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, &s| acc\
    \ + &s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of a shared reference\n --> /tmp/tmpj7z9zvkk.rs:7:46\n\
    \  |\n7 |     strings.iter().fold(String::new(), |acc, &s| acc + &s)\n  |    \
    \                                          ^-\n  |                           \
    \                   ||\n  |                                              |data\
    \ moved here\n  |                                              |move occurs because\
    \ `s` has type `String`, which does not implement the `Copy` trait\n  |      \
    \                                        help: consider removing the `&`: `s`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().collect()\n}\n\nfn main() {\n \
    \   let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp3db2rrnx.rs:7:20\n     |\n\
    7    |     strings.iter().collect()\n     |                    ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut a, b|\
    \ { a.push_str(b); a})\n}\n\nfn main() {\n    let candidate = concatenate;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, word|\
    \ acc + word)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // Rust is smart enough to know that the following\
    \ code can be reduced\n    // to a single line using the `fold` method.\n    //\
    \ for s in strings {\n    //     string.push_str(&s);\n    // }\n    // string\n\
    \    strings.iter().fold(String::new(), |string, s| string + s)\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, x| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    if strings.len() == 0 {\n        return String::new();\n\
    \    }\n    strings.iter().fold(String::new(), |acc, s| acc + s)\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for i in\
    \ strings {\n        result.push_str(&i);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    return strings.concat();\n}\n\nfn main() {\n \
    \   let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // TODO write code here\n    \"\".to_string()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"xyz\"`', /tmp/tmp65t1z2ig.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // TODO\n    \"\".to_string()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"xyz\"`', /tmp/tmp0uvn4s8d.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |a, b| a +\
    \ b)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut combined = String::new();\n    for string\
    \ in strings {\n        combined.push_str(&string);\n    }\n    combined\n}\n\n\
    fn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // TODO: implement this\n    let mut res = String::new();\n\
    \    for i in strings {\n        res.push_str(&i);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut ret = String::new();\n    for s in strings\
    \ {\n        ret.push_str(&s);\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut res = String::new();\n    for s in strings\
    \ {\n        res.push_str(&s);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    //let mut s = String::new();\n    //for string\
    \ in strings {\n    //    s.push_str(&string);\n    //}\n    //s\n    strings.join(\"\
    \")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut str = String::new();\n    for string in\
    \ strings {\n        str.push_str(&string);\n    }\n    str\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for str in\
    \ strings {\n        result.push_str(&str);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += &s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().collect()\n}\n\nfn main() {\n \
    \   let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp1cju1wwx.rs:7:20\n     |\n\
    7    |     strings.iter().collect()\n     |                    ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut concatenated = String::new();\n    for\
    \ string in strings {\n        concatenated.push_str(&string);\n    }\n    concatenated\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // TODO\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9rpna8sq.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| acc\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // unimplemented!(\"Concatenate the list of strings\
    \ {:?}\", strings)\n    strings.iter().fold(String::new(), |acc, s| acc + s)\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for string in\
    \ strings {\n        s.push_str(&string);\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    // IMPLEMENT\n    strings.join(\"\")\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
