name: HumanEval_57_monotonic
language: rust
results:
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut d\
    \ = l[1] - l[0];\n    for i in 1..l.len() - 1 {\n        if (l[i + 1] - l[i])\
    \ * d < 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Write your code here\n    let mut flag = 0;\n    for i in\
    \ 0..l.len()-1 {\n        if (l[i] > l[i+1]) {\n            if flag == 1 {\n \
    \               return false;\n            }\n            flag = -1;\n       \
    \ }\n        else if (l[i] < l[i+1]) {\n            if flag == -1 {\n        \
    \        return false;\n            }\n            flag = 1;\n        }\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n    let mut is_decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            is_increasing\
    \ = false;\n        }\n        if l[i] > l[i - 1] {\n            is_decreasing\
    \ = false;\n        }\n    }\n    is_increasing || is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increase = true;\n    let mut decrease = true;\n    for\
    \ pair in l.windows(2) {\n        if pair[0] > pair[1] {\n            increase\
    \ = false;\n        }\n        if pair[0] < pair[1] {\n            decrease =\
    \ false;\n        }\n    }\n    increase || decrease\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut b = true;\n    let mut c = l[0];\n    let mut d = c;\n\
    \    for a in &l {\n        if a < &c {\n            c = *a;\n            if c\
    \ > d {\n                d = c;\n            }\n        } else if a > &c {\n \
    \           c = *a;\n            if c < d {\n                d = c;\n        \
    \    }\n        }\n    }\n    let mut e = l[0];\n    let mut f = e;\n    for a\
    \ in &l {\n        if a < &e {\n            e = *a;\n            if e > f {\n\
    \                f = e;\n            }\n        } else if a > &e {\n         \
    \   e = *a;\n            if e < f {\n                f = e;\n            }\n \
    \       }\n    }\n    if e == f || d == c {\n        b = true;\n    } else {\n\
    \        b = false;\n    }\n    b\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb0rdhdx3.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut out\
    \ = true;\n    let mut inc: bool;\n    if l[0] < l[1] {\n        inc = true;\n\
    \    } else if l[0] > l[1] {\n        inc = false;\n    } else {\n        inc\
    \ = true;\n    }\n    for i in 1..l.len() - 1 {\n        if l[i] < l[i + 1] {\n\
    \            if !inc {\n                out = false;\n                break;\n\
    \            }\n        } else if l[i] > l[i + 1] {\n            if inc {\n  \
    \              out = false;\n                break;\n            }\n        }\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut left\
    \ = l[0];\n    let mut direction = None;\n    for right in l.iter().skip(1) {\n\
    \        if left == *right {\n            // when there is duplicate, ignore it\n\
    \            continue;\n        }\n        if direction == None {\n          \
    \  direction = Some(left < *right);\n        }\n        if direction != Some(left\
    \ < *right) {\n            return false;\n        }\n        left = *right;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // True if monotonically increasing.\n    let mut incr = true;\n\
    \    // True if monotonically decreasing.\n    let mut decr = true;\n    // None\
    \ if last number is None, i.e. the first one.\n    let mut last: Option<isize>\
    \ = None;\n    for n in l {\n        match last {\n            None => {}\n  \
    \          Some(x) => {\n                if n < x {\n                    incr\
    \ = false;\n                } else if n > x {\n                    decr = false;\n\
    \                }\n            }\n        }\n        last = Some(n);\n    }\n\
    \    incr || decr\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut i\
    \ = 0;\n    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n          \
    \  break;\n        }\n        i += 1;\n    }\n    if i == l.len() - 1 {\n    \
    \    return true;\n    }\n    let mut j = 0;\n    while j < l.len() - 1 {\n  \
    \      if l[j] < l[j + 1] {\n            break;\n        }\n        j += 1;\n\
    \    }\n    j == l.len() - 1\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().zip(l.iter().skip(1)).all(|(a, b)| a < b) ||\n    l.iter().zip(l.iter().skip(1)).all(|(a,\
    \ b)| a > b)\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt4i1y3er.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut pre = l[0];\n    let mut has_equal = false;\n    for\
    \ cur in l {\n        if cur > pre {\n            if has_equal {\n           \
    \     return false;\n            }\n        } else if cur < pre {\n          \
    \  if has_equal {\n                return false;\n            }\n        } else\
    \ {\n            has_equal = true;\n        }\n        pre = cur;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpco147da4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    let mut i =\
    \ 0;\n    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n            inc\
    \ = false;\n        }\n        if l[i] < l[i + 1] {\n            dec = false;\n\
    \        }\n        i += 1;\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = None;\n    for (i, n) in l.iter().enumerate()\
    \ {\n        if i == 0 {\n            continue;\n        }\n        if *n < l[i\
    \ - 1] {\n            if increasing == Some(true) {\n                return false;\n\
    \            }\n            increasing = Some(false);\n        } else if *n >\
    \ l[i - 1] {\n            if increasing == Some(false) {\n                return\
    \ false;\n            }\n            increasing = Some(true);\n        }\n   \
    \ }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7y7b47sw.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|w| {\n        let diff = w[1] - w[0];\n   \
    \     diff == 0 || w.iter().all(|n| (n - w[0]) * diff >= 0)\n    })\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprahjz9kl.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(\n        Some(0),\n        |last, &x| match last\
    \ {\n            Some(last) => if x == last {\n                Some(last)\n  \
    \          } else if x > last {\n                Some(1)\n            } else {\n\
    \                Some(-1)\n            },\n            None => Some(x),\n    \
    \    },\n    )\n    .is_some()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw8ipcsg2.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // BEGIN SOLUTION\n    if l.len() < 2 {\n        return true;\n\
    \    }\n    let mut is_mono = l[0] < l[1];\n    for i in 1..l.len() - 1 {\n  \
    \      if is_mono {\n            if l[i] > l[i + 1] {\n                return\
    \ false;\n            }\n        } else {\n            if l[i] < l[i + 1] {\n\
    \                return false;\n            }\n        }\n    }\n    true\n  \
    \  // END SOLUTION\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut v = l.clone();\n    v.sort();\n    v == l || v.iter().rev().collect::<Vec<_>>()\
    \ == l\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpqo3zacw3.rs:11:50\n\
    \   |\n11 |     v == l || v.iter().rev().collect::<Vec<_>>() == l\n   |      \
    \                                            ^^ no implementation for `&isize\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n   = note: required because of the requirements on the impl\
    \ of `PartialEq<Vec<isize>>` for `Vec<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut i\
    \ = 0;\n    while i < l.len() - 1 {\n        if l[i] == l[i + 1] {\n         \
    \   i += 1;\n            continue;\n        }\n        if l[i] < l[i + 1] {\n\
    \            return increasing(l);\n        } else {\n            return decreasing(l);\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `increasing` in this scope\n  --> /tmp/tmpvb69fdc7.rs:19:20\n\
    \   |\n19 |             return increasing(l);\n   |                    ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `decreasing` in\
    \ this scope\n  --> /tmp/tmpvb69fdc7.rs:21:20\n   |\n21 |             return decreasing(l);\n\
    \   |                    ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    l == l.iter().rev().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpaeqh9d_9.rs:11:7\n\
    \   |\n11 |     l == l.iter().rev().collect::<Vec<_>>()\n   |       ^^ no implementation\
    \ for `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // YOUR CODE HERE\n    unimplemented!();\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsi0fei1o.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // your code here\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppo8enj6v.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            decreasing\
    \ = false;\n        } else if l[i] < l[i - 1] {\n            increasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut tmp = l[0];\n    let mut flag = false;\n    for elem\
    \ in l.iter() {\n        if *elem > tmp {\n            if flag == true {\n   \
    \             return false;\n            }\n            tmp = *elem;\n       \
    \ } else if *elem < tmp {\n            if flag == false {\n                flag\
    \ = true;\n            }\n            tmp = *elem;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Your code goes here\n    let mut flag = false;\n    for i\
    \ in 0..l.len() - 1 {\n        if l[i] != l[i + 1] {\n            flag = true;\n\
    \            break;\n        }\n    }\n    if flag == false {\n        return\
    \ true;\n    }\n    let mut flag1 = true;\n    let mut flag2 = true;\n    for\
    \ i in 0..l.len() - 1 {\n        if l[i] < l[i + 1] {\n            flag1 = true;\n\
    \        } else {\n            flag1 = false;\n            break;\n        }\n\
    \    }\n    for i in 0..l.len() - 1 {\n        if l[i] > l[i + 1] {\n        \
    \    flag2 = true;\n        } else {\n            flag2 = false;\n           \
    \ break;\n        }\n    }\n    if flag1 == true || flag2 == true {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpya6ii5w8.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    if l.len()\
    \ == 1 {\n        return true;\n    }\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1]\
    \ {\n            decreasing = false;\n        }\n        if l[i] < l[i - 1] {\n\
    \            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let (mut decreasing, mut increasing) = (true, true);\n    for\
    \ pair in l.windows(2) {\n        if pair[0] > pair[1] {\n            increasing\
    \ = false;\n        } else if pair[0] < pair[1] {\n            decreasing = false;\n\
    \        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_decreasing = true;\n    let mut is_increasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            is_increasing\
    \ = false;\n        }\n        if l[i - 1] < l[i] {\n            is_decreasing\
    \ = false;\n        }\n    }\n    is_decreasing || is_increasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    for i in 1..l.len() {\n        if l[i - 1] < l[i] {\n       \
    \     for j in (i + 1)..l.len() {\n                if l[j - 1] > l[j] {\n    \
    \                return false;\n                }\n            }\n        } else\
    \ if l[i - 1] > l[i] {\n            for j in (i + 1)..l.len() {\n            \
    \    if l[j - 1] < l[j] {\n                    return false;\n               \
    \ }\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // TODO: add code here\n    return false;\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzazjb1ze.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfup696es.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    let first = l.pop().unwrap();\n    let mut\
    \ cur = first;\n    for &next in l.iter() {\n        let result = cur.cmp(&next);\n\
    \        cur = next;\n        if result != Equal && result != Less && result !=\
    \ Greater {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `Equal` in this scope\n  --> /tmp/tmpc8krlfx8.rs:15:22\n\
    \   |\n15 |         if result != Equal && result != Less && result != Greater\
    \ {\n   |                      ^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this unit variant\n   |\n1  | use std::cmp::Ordering::Equal;\n   |\n\
    \nerror[E0425]: cannot find value `Less` in this scope\n  --> /tmp/tmpc8krlfx8.rs:15:41\n\
    \   |\n15 |         if result != Equal && result != Less && result != Greater\
    \ {\n   |                                         ^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this unit variant\n   |\n1  | use std::cmp::Ordering::Less;\n\
    \   |\n\nerror[E0425]: cannot find value `Greater` in this scope\n  --> /tmp/tmpc8krlfx8.rs:15:59\n\
    \   |\n15 |         if result != Equal && result != Less && result != Greater\
    \ {\n   |                                                           ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n\
    1  | use std::cmp::Ordering::Greater;\n   |\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n    let mut is_decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] - l[i - 1] < 0 {\n            is_increasing\
    \ = false;\n        }\n        if l[i] - l[i - 1] > 0 {\n            is_decreasing\
    \ = false;\n        }\n    }\n    is_increasing || is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut mono = true;\n    let mut inc = true;\n    let mut i\
    \ = 0;\n    while i < l.len() - 1 && mono {\n        if l[i] < l[i + 1] {\n  \
    \          inc = true;\n        } else if l[i] > l[i + 1] {\n            inc =\
    \ false;\n        } else {\n            mono = false;\n        }\n        i +=\
    \ 1;\n    }\n    mono && inc\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfq14c0h3.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l.iter().peekable();\n    match s.peek() {\n    \
    \    Some(_) => {\n            let first = s.next().unwrap();\n            let\
    \ mut current = first;\n            let mut total_incr = 0;\n            let mut\
    \ total_decr = 0;\n            let mut all_eq = true;\n            for i in s\
    \ {\n                if i > current {\n                    total_incr += 1;\n\
    \                    all_eq = false;\n                } else if i < current {\n\
    \                    total_decr += 1;\n                    all_eq = false;\n \
    \               }\n                current = i;\n            }\n            total_incr\
    \ != 0 && total_decr != 0 && !all_eq\n        }\n        None => true,\n    }\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn1fucdcf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let l = l.into_iter();\n    let mut l = l.collect::<Vec<isize>>();\n\
    \    l.sort();\n    l == l.clone().into_iter().rev()\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `Vec<isize>` with `Rev<std::vec::IntoIter<isize>>`\n\
    \  --> /tmp/tmp6891uw7t.rs:12:7\n   |\n12 |     l == l.clone().into_iter().rev()\n\
    \   |       ^^ no implementation for `Vec<isize> == Rev<std::vec::IntoIter<isize>>`\n\
    \   |\n   = help: the trait `PartialEq<Rev<std::vec::IntoIter<isize>>>` is not\
    \ implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false;\n        }\n        if l[i] > l[i - 1] {\n            decreasing =\
    \ false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = false;\n    for i in 0..l.len() - 1 {\n        if\
    \ l[i] < l[i + 1] {\n            if m {\n                return false;\n     \
    \       }\n        } else if l[i] > l[i + 1] {\n            if !m {\n        \
    \        m = true;\n            }\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false;\n        }\n        if l[i] > l[i - 1] {\n            decreasing =\
    \ false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut ascend = true;\n    let mut descend = true;\n    for\
    \ (i, j) in l.iter().tuple_windows() {\n        ascend = ascend && i <= j;\n \
    \       descend = descend && i >= j;\n    }\n    ascend || descend\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `tuple_windows` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpc765mpxl.rs:11:28\n   |\n11 |     for (i,\
    \ j) in l.iter().tuple_windows() {\n   |                            ^^^^^^^^^^^^^\
    \ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            decreasing\
    \ = false;\n        } else if l[i] < l[i - 1] {\n            increasing = false;\n\
    \        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut direction = None;\n    for i in 0..l.len()-1 {\n    \
    \    let next = l[i+1];\n        let curr = l[i];\n        if direction == None\
    \ {\n            if next > curr {\n                direction = Some(1);\n    \
    \        } else if next < curr {\n                direction = Some(-1);\n    \
    \        }\n        } else {\n            if next > curr && direction.unwrap()\
    \ == -1 {\n                return false;\n            } else if next < curr &&\
    \ direction.unwrap() == 1 {\n                return false;\n            }\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut d = 0;\n    for i in 0..l.len() - 1 {\n        let j\
    \ = i + 1;\n        let v = l[i] - l[j];\n        if d == 0 {\n            d =\
    \ v;\n        } else if d * v < 0 {\n            return false;\n        }\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // BEGIN_SOLUTION\n    let mut increasing = None;\n    for i\
    \ in 1..l.len() {\n        let delta = l[i] - l[i-1];\n        if delta != 0 {\n\
    \            if increasing.is_none() {\n                increasing = Some(delta\
    \ > 0);\n            } else if (delta > 0) != increasing.unwrap() {\n        \
    \        return false;\n            }\n        }\n    }\n    true\n    // END_SOLUTION\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdz9asixv.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut result = true;\n    let mut order = 0;\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i != 0 {\n            let ord = x.cmp(&l[i\
    \ - 1]);\n            if order == 0 {\n                order = ord;\n        \
    \    } else if order != ord {\n                result = false;\n             \
    \   break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4qs19591.rs:15:25\n   |\n\
    10 |     let mut order = 0;\n   |                     - expected due to this value\n\
    ...\n15 |                 order = ord;\n   |                         ^^^ expected\
    \ integer, found enum `std::cmp::Ordering`\n\nerror[E0277]: can't compare `{integer}`\
    \ with `std::cmp::Ordering`\n  --> /tmp/tmp4qs19591.rs:16:29\n   |\n16 |     \
    \        } else if order != ord {\n   |                             ^^ no implementation\
    \ for `{integer} == std::cmp::Ordering`\n   |\n   = help: the trait `PartialEq<std::cmp::Ordering>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let n = l.len();\n    if n <= 1 {\n        return true;\n   \
    \ }\n    let mut incr = true;\n    let mut decr = true;\n    for i in 1..n {\n\
    \        incr = incr && l[i] >= l[i - 1];\n        decr = decr && l[i] <= l[i\
    \ - 1];\n    }\n    incr || decr\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpckfcmhkj.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut s\
    \ = l[0];\n    let mut is_dec = false;\n    let mut is_inc = false;\n    for e\
    \ in l {\n        if e > s {\n            is_inc = true;\n        } else if e\
    \ < s {\n            is_dec = true;\n        }\n        if is_dec && is_inc {\n\
    \            return false;\n        }\n        s = e;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let first = l[0];\n    let mut is_increasing = first < l[1];\n\
    \    let mut is_decreasing = first > l[1];\n    for i in 2..l.len() {\n      \
    \  let curr = l[i];\n        if is_increasing && curr < l[i - 1] {\n         \
    \   return false;\n        }\n        if is_decreasing && curr > l[i - 1] {\n\
    \            return false;\n        }\n        is_increasing = is_increasing ||\
    \ curr > l[i - 1];\n        is_decreasing = is_decreasing || curr < l[i - 1];\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev = l[0];\n    let mut monotonic = true;\n    for\
    \ i in l {\n        if i != prev {\n            if prev < i {\n              \
    \  prev = i;\n            } else {\n                monotonic = false;\n     \
    \           break;\n            }\n        }\n    }\n    monotonic\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj1ryenuv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut r = true;\n    let mut i = 0;\n    while r && i < l.len()\
    \ - 1 {\n        r = l[i] == l[i + 1] || l[i] < l[i + 1];\n        i += 1;\n \
    \   }\n    r\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp419ff5_t.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prior: isize = 0;\n    let mut inc = true;\n    let mut\
    \ dec = true;\n    for x in l {\n        if prior > x {\n            inc = false;\n\
    \        }\n        if prior < x {\n            dec = false;\n        }\n    \
    \    prior = x;\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp32vwc_n1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev = None;\n    let (mut decreasing, mut increasing)\
    \ = (true, true);\n    for e in l {\n        if let Some(p) = prev {\n       \
    \     decreasing &= p > e;\n            increasing &= p < e;\n        }\n    \
    \    prev = Some(e);\n    }\n    decreasing || increasing\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp07egl79w.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let (first, rest) = l.split_first().unwrap();\n    let mut prev\
    \ = *first;\n    let mut ordered = true;\n    for element in rest {\n        if\
    \ *element < prev {\n            ordered = false;\n            break;\n      \
    \  }\n        prev = *element;\n    }\n    ordered\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp883c3m5z.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut ascending = true;\n    let mut descending = true;\n \
    \   for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            descending\
    \ = false;\n        }\n        if l[i] < l[i - 1] {\n            ascending = false;\n\
    \        }\n    }\n    return ascending || descending;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = false;\n    let mut dec = false;\n    for i in\
    \ 1..l.len() {\n        if l[i] > l[i - 1] {\n            inc = true;\n      \
    \  } else if l[i] < l[i - 1] {\n            dec = true;\n        }\n        if\
    \ inc && dec {\n            return false;\n        }\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut prev\
    \ = l[0];\n    let mut increasing = true;\n    for elem in l.iter().skip(1) {\n\
    \        if *elem > prev {\n            if !increasing {\n                return\
    \ false;\n            }\n        } else if *elem < prev {\n            increasing\
    \ = false;\n        }\n        prev = *elem;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut slope = 0;\n    for i in 1..l.len() {\n        let delta\
    \ = l[i] - l[i - 1];\n        if delta * slope < 0 {\n            return false;\n\
    \        }\n        if delta != 0 {\n            slope = delta;\n        }\n \
    \   }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let n = l.len();\n    if n <= 1 {\n        return true;\n   \
    \ }\n    let mut prev = l[0];\n    let mut increasing = None;\n    for i in 1..n\
    \ {\n        if prev < l[i] {\n            if increasing == Some(false) {\n  \
    \              return false;\n            }\n            increasing = Some(true);\n\
    \        } else if prev > l[i] {\n            if increasing == Some(true) {\n\
    \                return false;\n            }\n            increasing = Some(false);\n\
    \        }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n    let mut is_decreasing = true;\n\
    \    for (i, a) in l.iter().enumerate() {\n        if i != 0 {\n            if\
    \ is_increasing && a < &l[i - 1] {\n                is_increasing = false;\n \
    \           } else if is_decreasing && a > &l[i - 1] {\n                is_decreasing\
    \ = false;\n            }\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_inc = false;\n    let mut is_dec = false;\n    for\
    \ i in 0..l.len() - 1 {\n        if l[i] > l[i + 1] {\n            is_dec = true;\n\
    \        } else if l[i] < l[i + 1] {\n            is_inc = true;\n        } else\
    \ {\n            continue;\n        }\n        if is_dec && is_inc {\n       \
    \     return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    for (i, e)\
    \ in l.iter().enumerate() {\n        if i > 0 {\n            inc = inc && e >=\
    \ &l[i - 1];\n            dec = dec && e <= &l[i - 1];\n        }\n    }\n   \
    \ inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut going_up = true;\n    let mut going_down = true;\n  \
    \  for (a, b) in l.iter().zip(l.iter().skip(1)) {\n        if a < b {\n      \
    \      going_down = false;\n        } else if a > b {\n            going_up =\
    \ false;\n        }\n    }\n    going_up || going_down\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut ascending = true;\n    let mut descending = true;\n \
    \   let mut prev = None;\n    for current in l {\n        if let Some(p) = prev\
    \ {\n            if current > p {\n                descending = false;\n     \
    \       } else if current < p {\n                ascending = false;\n        \
    \    }\n        }\n        prev = Some(current);\n    }\n    ascending || descending\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt2qar4lk.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i]\
    \ > l[i + 1] {\n            i += 1;\n            break;\n        }\n        i\
    \ += 1;\n    }\n    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n  \
    \          return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq08xnay6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut first = l[0];\n    let mut inc = false;\n    let mut\
    \ dec = false;\n    for i in &l {\n        if first > *i {\n            inc =\
    \ true;\n        } else if first < *i {\n            dec = true;\n        }\n\
    \        if inc && dec {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4zcf6f2p.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    l == l.iter().rev().collect::<Vec<&isize>>()\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmphmbv06gk.rs:11:7\n\
    \   |\n11 |     l == l.iter().rev().collect::<Vec<&isize>>()\n   |       ^^ no\
    \ implementation for `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let sign = |x: &isize| {\n        if x > &0 {\n            1\n\
    \        } else if x < &0 {\n            -1\n        } else {\n            0\n\
    \        }\n    };\n    let mut previous = sign(&l[0]);\n    for v in l {\n  \
    \      let current = sign(&v);\n        if current != previous && current != 0\
    \ {\n            return false;\n        }\n        previous = current;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4qfqhvdv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut cmp = None;\n    for i in 1..l.len() {\n        let new_cmp\
    \ = l[i] - l[i - 1];\n        match (cmp, new_cmp) {\n            (None, a) =>\
    \ cmp = Some(a),\n            (Some(a), b) if a * b < 0 => return false,\n   \
    \         _ => {}\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    for i in 1..l.len()\
    \ {\n        if l[i] > l[i - 1] {\n            for j in i + 1..l.len() {\n   \
    \             if l[j] < l[j - 1] {\n                    return false;\n      \
    \          }\n            }\n            return true;\n        } else if l[i]\
    \ < l[i - 1] {\n            for j in i + 1..l.len() {\n                if l[j]\
    \ > l[j - 1] {\n                    return false;\n                }\n       \
    \     }\n            return true;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len()\
    \ {\n        if l[i] < l[i - 1] {\n            inc = false;\n        }\n     \
    \   if l[i] > l[i - 1] {\n            dec = false;\n        }\n    }\n    inc\
    \ || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let mut increasing\
    \ = l[0] < l[1];\n    for i in 1..l.len() - 1 {\n        if increasing && l[i]\
    \ > l[i + 1] {\n            return false;\n        }\n        if !increasing &&\
    \ l[i] < l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let direction\
    \ = l[1] - l[0];\n    for i in 1..l.len() {\n        if (l[i] - l[i - 1]) * direction\
    \ < 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for index in 1..l.len() {\n        if l[index] > l[index - 1] {\n       \
    \     decreasing = false;\n        } else if l[index] < l[index - 1] {\n     \
    \       increasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut max\
    \ = l[0];\n    let mut min = l[0];\n    for i in &l {\n        if *i < min {\n\
    \            min = *i;\n        }\n        if *i > max {\n            max = *i;\n\
    \        }\n    }\n    let mut ordered_inc = true;\n    let mut ordered_dec =\
    \ true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n           \
    \ ordered_inc = false;\n        }\n        if l[i] > l[i - 1] {\n            ordered_dec\
    \ = false;\n        }\n    }\n    return ordered_inc || ordered_dec;\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut monotonic = true;\n    let mut increase = l[0] > l[1];\n\
    \    for i in 0..l.len() - 1 {\n        let x = l[i];\n        let y = l[i + 1];\n\
    \        if x > y && increase {\n            monotonic = false;\n            break;\n\
    \        } else if x < y && !increase {\n            monotonic = false;\n    \
    \        break;\n        }\n    }\n    monotonic\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph16bo2qz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|x| x[0] <= x[1]) || l.windows(2).all(|x| x[0]\
    \ >= x[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut increasing\
    \ = true;\n    let mut decreasing = true;\n    for i in 1..l.len() {\n       \
    \ if l[i] > l[i - 1] {\n            decreasing = false;\n        }\n        if\
    \ l[i] < l[i - 1] {\n            increasing = false;\n        }\n    }\n    increasing\
    \ || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // TODO\n    let mut i: usize = 0;\n    let mut result = true;\n\
    \    while i < l.len() - 1 {\n        if l[i] < l[i + 1] {\n            result\
    \ = true;\n        } else if l[i] > l[i + 1] {\n            result = true;\n \
    \       } else {\n            result = false;\n        }\n        i += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8w8sddn1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_dec = true;\n    let mut is_inc = true;\n    for i\
    \ in 1..l.len() {\n        if l[i] < l[i - 1] {\n            is_inc = false;\n\
    \        }\n        if l[i] > l[i - 1] {\n            is_dec = false;\n      \
    \  }\n    }\n    is_dec || is_inc\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut increasing\
    \ = l[0] < l[1];\n    let mut decreasing = l[0] > l[1];\n    let mut equal = l[0]\
    \ == l[1];\n    for i in 1..l.len() - 1 {\n        increasing = increasing &&\
    \ l[i] < l[i + 1];\n        decreasing = decreasing && l[i] > l[i + 1];\n    \
    \    equal = equal && l[i] == l[i + 1];\n    }\n    increasing || decreasing ||\
    \ equal\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptvxygjhz.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut res = true;\n    for i in 1..l.len() {\n        if l[i]\
    \ < l[i - 1] {\n            res = false;\n            break;\n        }\n    }\n\
    \    if res {\n        return true;\n    }\n    for i in 1..l.len() {\n      \
    \  if l[i] > l[i - 1] {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = false;\n    let mut is_decreasing = false;\n\
    \    let mut previous_element = l[0];\n    for i in l {\n        if i > previous_element\
    \ {\n            is_increasing = true;\n        } else if i < previous_element\
    \ {\n            is_decreasing = true;\n        }\n        previous_element =\
    \ i;\n    }\n    return is_increasing != is_decreasing;\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1z6srdrs.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_up = false;\n    let mut is_down = false;\n    for\
    \ i in 1..l.len() {\n        let prev = l[i - 1];\n        let curr = l[i];\n\
    \        if prev < curr {\n            is_up = true;\n        } else if prev >\
    \ curr {\n            is_down = true;\n        }\n        if is_up && is_down\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    use std::cmp::Ordering;\n    let mut last = None;\n    for e\
    \ in l {\n        match last {\n            None => last = Some(e),\n        \
    \    Some(last) => {\n                let res = e.cmp(&last);\n              \
    \  match res {\n                    Ordering::Greater => last = Some(e),\n   \
    \                 Ordering::Less => last = Some(e),\n                    Ordering::Equal\
    \ => return false,\n                }\n            }\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi1jtj9is.rs:17:49\n   |\n\
    14 |             Some(last) => {\n   |                  ---- expected due to the\
    \ type of this binding\n...\n17 |                     Ordering::Greater => last\
    \ = Some(e),\n   |                                                 ^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpi1jtj9is.rs:18:46\n   |\n14 |             Some(last) => {\n   |    \
    \              ---- expected due to the type of this binding\n...\n18 |      \
    \               Ordering::Less => last = Some(e),\n   |                      \
    \                        ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<isize>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut prev_val\
    \ = l[0];\n    let mut is_dec = false;\n    let mut is_inc = false;\n    for val\
    \ in l.iter().skip(1) {\n        if prev_val < *val {\n            is_inc = true;\n\
    \        } else if prev_val > *val {\n            is_dec = true;\n        }\n\
    \        if is_dec && is_inc {\n            return false;\n        }\n       \
    \ prev_val = *val;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpb99kiwnc.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkc02a8u7.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut incr = 0;\n    let mut decr = 0;\n\
    \    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n            incr +=\
    \ 1;\n        } else if l[i] < l[i + 1] {\n            decr += 1;\n        }\n\
    \        i += 1;\n    }\n    incr == 0 || decr == 0\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    l == l.iter().rev().collect::<Vec<&isize>>()\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp27c52py7.rs:11:7\n\
    \   |\n11 |     l == l.iter().rev().collect::<Vec<&isize>>()\n   |       ^^ no\
    \ implementation for `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Your code goes here\n    l.is_empty() || l.windows(2).all(|w|\
    \ w[0] <= w[1]) || l.windows(2).all(|w| w[0] >= w[1])\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i]\
    \ < l[i + 1] {\n            i += 1;\n        } else {\n            break;\n  \
    \      }\n    }\n    if i == l.len() - 1 {\n        return true;\n    }\n    i\
    \ = 0;\n    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n          \
    \  i += 1;\n        } else {\n            break;\n        }\n    }\n    if i ==\
    \ l.len() - 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjldjw4e2.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut cnt = 0;\n    let mut l = l;\n    let mut f = true;\n\
    \    let mut inc = true;\n    while cnt < l.len() - 1 {\n        if l[cnt] <=\
    \ l[cnt + 1] {\n            cnt += 1;\n        } else {\n            f = false;\n\
    \            break;\n        }\n    }\n    if !f {\n        cnt = 0;\n       \
    \ while cnt < l.len() - 1 {\n            if l[cnt] >= l[cnt + 1] {\n         \
    \       cnt += 1;\n            } else {\n                inc = false;\n      \
    \          break;\n            }\n        }\n    }\n    inc\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_dec = true;\n    let mut is_inc = true;\n    let mut\
    \ prev = l[0];\n    for i in l.iter() {\n        is_dec = is_dec && prev >= *i;\n\
    \        is_inc = is_inc && prev <= *i;\n        prev = *i;\n    }\n    is_dec\
    \ || is_inc\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu4jjolih.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    fn recur(l: &[isize], r: bool) -> bool {\n        match l {\n\
    \            [] => true,\n            [a, b, tail..] => if r == (*a > *b) {\n\
    \                recur(tail, r)\n            } else {\n                false\n\
    \            },\n            [a, b] => *a != *b,\n            [a] => true,\n \
    \       }\n    }\n    recur(&l, true) || recur(&l, false)\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `tail` in this scope\n  --> /tmp/tmp7jmiq8yi.rs:12:20\n\
    \   |\n12 |             [a, b, tail..] => if r == (*a > *b) {\n   |          \
    \          ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `tail`\
    \ in this scope\n  --> /tmp/tmp7jmiq8yi.rs:13:23\n   |\n13 |                 recur(tail,\
    \ r)\n   |                       ^^^^ not found in this scope\n\nerror[E0658]:\
    \ `X..` patterns in slices are experimental\n  --> /tmp/tmp7jmiq8yi.rs:12:20\n\
    \   |\n12 |             [a, b, tail..] => if r == (*a > *b) {\n   |          \
    \          ^^^^^^\n   |\n   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264>\
    \ for more information\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0658.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // TODO\n    let mut max = l[0];\n    let mut min = l[0];\n \
    \   for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n        if l[i] < min {\n            min = l[i];\n        }\n    }\n\
    \    if max == l[0] {\n        true\n    } else if min == l[0] {\n        true\n\
    \    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp62172q68.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len()\
    \ {\n        if l[i - 1] > l[i] {\n            inc = false;\n        }\n     \
    \   if l[i - 1] < l[i] {\n            dec = false;\n        }\n    }\n    inc\
    \ || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            increasing\
    \ = false;\n        }\n        if l[i - 1] < l[i] {\n            decreasing =\
    \ false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut inc\
    \ = false;\n    let mut dec = false;\n    for (i, e) in l.iter().enumerate() {\n\
    \        if i != 0 {\n            if e > &l[i - 1] {\n                inc = true;\n\
    \            } else if e < &l[i - 1] {\n                dec = true;\n        \
    \    }\n        }\n        if inc && dec {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            increasing\
    \ = false;\n        }\n        if l[i - 1] < l[i] {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().zip(l.iter().skip(1)).all(|(x, y)| (x - y).abs() ==\
    \ 1)\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpis1xinth.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let length = l.len();\n    if length < 2 {\n        return true;\n\
    \    }\n    for i in 1..length {\n        if l[i - 1] == l[i] {\n            continue;\n\
    \        }\n        if l[i - 1] < l[i] {\n            for j in i + 1..length {\n\
    \                if l[j - 1] > l[j] {\n                    return false;\n   \
    \             }\n            }\n        } else {\n            for j in i + 1..length\
    \ {\n                if l[j - 1] < l[j] {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    (l.len() ==\
    \ 1) || (l.len() == l[0] as usize)\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp05a3ykwh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.is_empty() || \n    l.windows(2).all(|window| window[0] <=\
    \ window[1]) || \n    l.windows(2).all(|window| window[0] >= window[1])\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut asc = true;\n    let mut dsc = true;\n    for i in 1..l.len()\
    \ {\n        asc = asc && l[i] >= l[i - 1];\n        dsc = dsc && l[i] <= l[i\
    \ - 1];\n    }\n    asc || dsc\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_ascending = true;\n    let mut is_descending = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            is_ascending\
    \ = false;\n        }\n        if l[i] > l[i - 1] {\n            is_descending\
    \ = false;\n        }\n    }\n    is_ascending || is_descending\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|pair| (pair[0] - pair[1]).abs() <= 1)\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqvkzxrj7.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let mut dec\
    \ = false;\n    let mut inc = false;\n    for (i, e) in l.iter().enumerate() {\n\
    \        if i + 1 == l.len() {\n            break;\n        }\n        if e <\
    \ &l[i + 1] {\n            dec = true;\n        }\n        if e > &l[i + 1] {\n\
    \            inc = true;\n        }\n        if dec && inc {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut d = l[1] - l[0];\n    for i in 2..l.len() {\n       \
    \ if d * (l[i] - l[i - 1]) < 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    match l.as_slice() {\n        [] => true,\n        [one] => true,\n\
    \        [mut one, two] => {\n            let increasing = one < two;\n      \
    \      let mut prev = two;\n            for v in l.iter().skip(2) {\n        \
    \        if increasing {\n                    if prev > *v {\n               \
    \         return false;\n                    }\n                } else {\n   \
    \                 if prev < *v {\n                        return false;\n    \
    \                }\n                }\n                prev = *v;\n          \
    \  }\n            true\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoyvvth8o.rs:13:36\n   |\n\
    13 |             let increasing = one < two;\n   |                           \
    \         ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |             let increasing = one < *two;\n   |      \
    \                              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoyvvth8o.rs:17:31\n\
    \   |\n17 |                     if prev > *v {\n   |                         \
    \      ^^\n   |                               |\n   |                        \
    \       expected `&isize`, found `isize`\n   |                               help:\
    \ consider borrowing here: `&*v`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoyvvth8o.rs:21:31\n\
    \   |\n21 |                     if prev < *v {\n   |                         \
    \      ^^\n   |                               |\n   |                        \
    \       expected `&isize`, found `isize`\n   |                               help:\
    \ consider borrowing here: `&*v`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoyvvth8o.rs:25:24\n\
    \   |\n14 |             let mut prev = two;\n   |                            ---\
    \ expected due to this value\n...\n25 |                 prev = *v;\n   |     \
    \                   ^^\n   |                        |\n   |                  \
    \      expected `&isize`, found `isize`\n   |                        help: consider\
    \ borrowing here: `&*v`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|w| w[0] <= w[1]) || l.windows(2).all(|w| w[0]\
    \ >= w[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // unimplemented!(\"Is the list of integers '{:?}' monotonically\
    \ increasing or decreasing?\", l);\n    if l.len() <= 1 {\n        return true;\n\
    \    }\n\n    let mut cmp = l[0] - l[1];\n    for i in 1..l.len() - 1 {\n    \
    \    if (l[i] - l[i + 1]) * cmp < 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let mut first\
    \ = l[0];\n    let mut increasing = first < l[1];\n    for i in l {\n        if\
    \ i == first {\n            continue;\n        }\n        if (increasing && i\
    \ < first) || (!increasing && i > first) {\n            return false;\n      \
    \  }\n        first = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|w| w[0] < w[1]) || l.windows(2).all(|w| w[0]\
    \ > w[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpouqqtvfo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut first = true;\n    let mut prev: isize = 0;\n    let\
    \ mut incr = true;\n    for i in l {\n        if first {\n            prev = i;\n\
    \            first = false;\n        } else {\n            if i > prev {\n   \
    \             if !incr {\n                    return false;\n                }\n\
    \            } else if i < prev {\n                if incr {\n               \
    \     incr = false;\n                }\n            }\n            prev = i;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut sorted = l.clone();\n    sorted.sort();\n    sorted ==\
    \ l || sorted.into_iter().rev().collect::<Vec<isize>>() == l\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        panic!(\"List is too short.\");\n \
    \   }\n\n    let increasing = l[0] < l[1];\n    for (i, e) in l.iter().enumerate()\
    \ {\n        if i > 0 {\n            let prev = l[i - 1];\n            if e <\
    \ &prev {\n                if increasing {\n                    return false;\n\
    \                }\n            } else if e > &prev {\n                if !increasing\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        true\n    } else {\n        let mut\
    \ d = l[1] - l[0];\n        for i in 1..l.len() - 1 {\n            if d * (l[i\
    \ + 1] - l[i]) < 0 {\n                return false;\n            }\n        }\n\
    \        true\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvff59sei.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut up = false;\n    let mut down = false;\n    for i in\
    \ 1..l.len() {\n        if l[i] > l[i - 1] {\n            up = true;\n       \
    \ } else if l[i] < l[i - 1] {\n            down = true;\n        }\n        if\
    \ up && down {\n            return false;\n        }\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let (dir,\
    \ old) = l.iter().fold((0, l[0]), |(dir, old), &x| {\n        if dir != 0 {\n\
    \            if x > old && dir != 1 {\n                return (0, old);\n    \
    \        }\n            if x < old && dir != -1 {\n                return (0,\
    \ old);\n            }\n        } else {\n            if x > old {\n         \
    \       return (1, old);\n            }\n            if x < old {\n          \
    \      return (-1, old);\n            }\n        }\n        (dir, x)\n    });\n\
    \    dir != 0\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpphsea0hq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let first = l[0];\n    let mut inc = true;\n    let mut dec =\
    \ true;\n    for i in l {\n        if i < first {\n            inc = false;\n\
    \        }\n        if i > first {\n            dec = false;\n        }\n    }\n\
    \    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb95mduhw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut i\
    \ = 1;\n    let mut direction = 0;\n    while i < l.len() {\n        let d = l[i]\
    \ - l[i - 1];\n        if d * direction > 0 {\n            i += 1;\n        }\
    \ else if d == 0 {\n            return false;\n        } else if direction ==\
    \ 0 {\n            direction = d;\n            i += 1;\n        } else {\n   \
    \         return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpalbaj564.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut pos = true;\n    let mut neg = true;\n\
    \    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n            pos =\
    \ false;\n        }\n        if l[i] < l[i + 1] {\n            neg = false;\n\
    \        }\n        i += 1;\n    }\n    return pos || neg;\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let mut sign:\
    \ isize = l[1] - l[0];\n    for i in 1..l.len() {\n        if sign == 0 {\n  \
    \          sign = l[i] - l[i - 1];\n        } else if (l[i] - l[i - 1]) * sign\
    \ < 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l[0];\n    let mut u = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] < s {\n            s = l[i];\n        }\n        if l[i]\
    \ > u {\n            u = l[i];\n        }\n    }\n    let uminusl = u - s;\n \
    \   let sumul = (l.len() - 1) as isize;\n    sumul == uminusl || sumul == -uminusl\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw15lfabt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = l[0];\n    let mut sign = 0;\n    for x in l {\n\
    \        if x > m {\n            if sign == -1 {\n                return false;\n\
    \            }\n            sign = 1;\n        } else if x < m {\n           \
    \ if sign == 1 {\n                return false;\n            }\n            sign\
    \ = -1;\n        }\n        m = x;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpw3v3hyzb.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            increasing\
    \ = false;\n        }\n        if l[i - 1] < l[i] {\n            decreasing =\
    \ false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false;\n        }\n        if l[i] > l[i - 1] {\n            decreasing =\
    \ false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut res = true;\n    let mut i = 0;\n    while i < l.len()\
    \ - 1 {\n        if l[i] < l[i + 1] {\n            while i < l.len() - 1 {\n \
    \               if l[i] > l[i + 1] {\n                    res = false;\n     \
    \               break;\n                }\n                i += 1;\n         \
    \   }\n        } else if l[i] > l[i + 1] {\n            while i < l.len() - 1\
    \ {\n                if l[i] < l[i + 1] {\n                    res = false;\n\
    \                    break;\n                }\n                i += 1;\n    \
    \        }\n        }\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps96usarw.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_mono = true;\n    let mut is_mono_up = true;\n   \
    \ let mut is_mono_down = true;\n    for i in 1..l.len() {\n        if l[i] > l[i\
    \ - 1] {\n            is_mono_down = false;\n        } else if l[i] < l[i - 1]\
    \ {\n            is_mono_up = false;\n        }\n    }\n    if !is_mono_up &&\
    \ !is_mono_down {\n        is_mono = false;\n    }\n    is_mono\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut result = true;\n    let mut decreasing = true;\n    let\
    \ mut increasing = true;\n    let n = l.len();\n    for i in 0..n - 1 {\n    \
    \    if l[i] > l[i + 1] {\n            increasing = false;\n        }\n      \
    \  if l[i] < l[i + 1] {\n            decreasing = false;\n        }\n    }\n \
    \   if decreasing == false && increasing == false {\n        result = false;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n       \
    \     return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplcjhu8hn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len()\
    \ {\n        if l[i] < l[i - 1] {\n            inc = false;\n        }\n     \
    \   if l[i] > l[i - 1] {\n            dec = false;\n        }\n    }\n    return\
    \ inc || dec;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut x = l[0];\n    let mut y = l[1];\n    let mut m = y -\
    \ x;\n    for i in 2..l.len() {\n        x = y;\n        y = l[i];\n        if\
    \ m * (y - x) < 0 {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    l.windows(2).all(|win| win[0]\
    \ <= win[1]) || l.windows(2).all(|win| win[0] >= win[1])\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp14d68oku.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    use std::cmp::Ordering;\n    let mut ord = Ordering::Equal;\n\
    \    for i in 0..l.len()-1 {\n        match ord {\n            Ordering::Equal\
    \ => {\n                ord = l[i].cmp(&l[i+1]);\n            },\n           \
    \ _ => {\n                if l[i].cmp(&l[i+1]) != ord {\n                    return\
    \ false;\n                }\n            }\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkycuazdr.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 1;\n    let mut inc = None;\n    while i < l.len()\
    \ {\n        let cur = l[i - 1];\n        let next = l[i];\n        if cur < next\
    \ {\n            if inc.is_some() && !inc.unwrap() {\n                return false;\n\
    \            }\n            inc = Some(true);\n        } else if cur > next {\n\
    \            if inc.is_some() && inc.unwrap() {\n                return false;\n\
    \            }\n            inc = Some(false);\n        }\n        i += 1;\n \
    \   }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `Option<T>`\n  --> /tmp/tmpqgtyww_9.rs:15:38\n\
    \   |\n10 |     let mut inc = None;\n   |         ------- consider giving `inc`\
    \ the explicit type `Option<T>`, where the type parameter `T` is specified\n...\n\
    15 |             if inc.is_some() && !inc.unwrap() {\n   |                   \
    \                   ^^^^^^ cannot infer type for type parameter `T`\n   |\n  \
    \ = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = l[0];\n    let mut b = true;\n    for i in 1..l.len()\
    \ {\n        let c = l[i];\n        if c < m {\n            if b {\n         \
    \       b = false;\n            } else {\n                return false;\n    \
    \        }\n        } else if c > m {\n            if !b {\n                return\
    \ false;\n            }\n        }\n        m = c;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv4xcp43_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut p = l[0];\n    let d = (l[1] - l[0]) > 0;\n    for i\
    \ in l {\n        if (i - p) * d < 0 {\n            return false;\n        }\n\
    \        p = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `bool`\n  --> /tmp/tmphehzfurt.rs:12:20\n\
    \   |\n12 |         if (i - p) * d < 0 {\n   |                    ^ no implementation\
    \ for `isize * bool`\n   |\n   = help: the trait `Mul<bool>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let (mut inc, mut dec) = (true, true);\n    for i in 1..l.len()\
    \ {\n        if l[i] > l[i - 1] {\n            dec = false;\n        } else if\
    \ l[i] < l[i - 1] {\n            inc = false;\n        }\n    }\n    inc || dec\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut first\
    \ = l[0];\n    let mut inc = 0;\n    for i in 1..l.len() {\n        if first >\
    \ l[i] {\n            if inc == 0 {\n                inc = -1;\n            }\
    \ else if inc == 1 {\n                return false;\n            }\n        }\
    \ else if first < l[i] {\n            if inc == 0 {\n                inc = 1;\n\
    \            } else if inc == -1 {\n                return false;\n          \
    \  }\n        }\n        first = l[i];\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut d\
    \ = l[1] - l[0];\n    for i in 1..l.len() - 1 {\n        if (l[i + 1] - l[i])\
    \ * d < 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for (i, e) in l.iter().enumerate() {\n        if i > 0 {\n            if\
    \ l[i - 1] < *e {\n                decreasing = false;\n            } else if\
    \ l[i - 1] > *e {\n                increasing = false;\n            }\n      \
    \  }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let mut prev\
    \ = l[0];\n    let mut is_increasing = false;\n    let mut is_decreasing = false;\n\
    \    for &i in l.iter().skip(1) {\n        if i > prev {\n            is_increasing\
    \ = true;\n        } else if i < prev {\n            is_decreasing = true;\n \
    \       }\n        if is_increasing && is_decreasing {\n            return false;\n\
    \        }\n        prev = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            increasing\
    \ = false;\n        }\n        if l[i - 1] < l[i] {\n            decreasing =\
    \ false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // YOUR CODE HERE\n    let mut dec=false;\n    let mut inc=false;\n\
    \    let mut prev=l[0];\n    for i in l.into_iter() {\n        if i > prev {\n\
    \            inc=true;\n        }\n        if i < prev {\n            dec=true;\n\
    \        }\n        prev=i;\n    }\n    if (inc==true) && (dec==true) {\n    \
    \    return false;\n    }\n    else {\n        return true;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    fn is_monotonic(l: &[isize]) -> bool {\n        if l.len() <\
    \ 2 {\n            return true;\n        }\n        let (head, tail) = l.split_first().unwrap();\n\
    \        let is_up = *head < tail[0];\n        let mut previous = *head;\n   \
    \     for &i in tail {\n            if is_up && previous > i {\n             \
    \   return false;\n            }\n            if !is_up && previous < i {\n  \
    \              return false;\n            }\n            previous = i;\n     \
    \   }\n        true\n    }\n    is_monotonic(&l)\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.len() <= 1 ||\n    l.windows(2).all(|p| p[0] < p[1]) ||\n \
    \   l.windows(2).all(|p| p[0] > p[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppqko1_xu.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut a\
    \ = l[0];\n    let mut diff = l[1] - a;\n    for i in 2..l.len() {\n        if\
    \ diff == 0 {\n            diff = l[i] - a;\n        } else if (diff > 0 && l[i]\
    \ - a < 0) || (diff < 0 && l[i] - a > 0) {\n            return false;\n      \
    \  }\n        a = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq82rcu_m.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let mut last\
    \ = l[0];\n    let mut increasing = None;\n    for i in 1..l.len() {\n       \
    \ if last != l[i] {\n            if increasing.is_none() {\n                increasing\
    \ = Some(l[i] > last);\n            } else if increasing.unwrap() != (l[i] > last)\
    \ {\n                return false;\n            }\n        }\n        last = l[i];\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let (mut increasing, mut decreasing) = (true, true);\n    let\
    \ mut prev = l[0];\n    for i in l.iter().skip(1) {\n        if i > &prev {\n\
    \            decreasing = false;\n        } else if i < &prev {\n            increasing\
    \ = false;\n        }\n        prev = *i;\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = None;\n    for e in l {\n        match m {\n    \
    \        None => m = Some(e),\n            Some(v) => {\n                if v\
    \ == e {\n                    continue;\n                }\n                if\
    \ v > e {\n                    return false;\n                }\n            \
    \    m = Some(e);\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0ojhon61.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().scan(None, |state, &x| {\n        let ret = match *state\
    \ {\n            None => Some(x),\n            Some(state) => {\n            \
    \    if x > state {\n                    Some(x)\n                } else if x\
    \ < state {\n                    Some(x)\n                } else {\n         \
    \           None\n                }\n            }\n        };\n        *state\
    \ = ret;\n        ret\n    }).count() == l.len()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxomyq5hs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut ic = true;\n    let mut dc = true;\n    for i in 1..l.len()\
    \ {\n        ic = ic && l[i] >= l[i - 1];\n        dc = dc && l[i] <= l[i - 1];\n\
    \    }\n    ic || dc\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = l[0];\n    let mut inc = false;\n    let mut dec\
    \ = false;\n    for i in l {\n        if i > m {\n            inc = true;\n  \
    \      } else if i < m {\n            dec = true;\n        }\n        if inc &&\
    \ dec {\n            return false;\n        }\n        m = i;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Type inference does not work for l\n    if l.len() < 2 {\n\
    \        return true;\n    }\n    let mut prev = l[0];\n    let mut is_increasing\
    \ = prev < l[1];\n    for i in l {\n        if is_increasing {\n            if\
    \ prev > i {\n                return false;\n            }\n        } else {\n\
    \            if prev < i {\n                return false;\n            }\n   \
    \     }\n        prev = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut inc\
    \ = l[0] < l[1];\n    for pair in l.iter().zip(l.iter().skip(1)) {\n        let\
    \ (x, y) = pair;\n        if inc && *x > *y {\n            return false;\n   \
    \     }\n        if !inc && *x < *y {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        increasing = increasing && l[i] >= l[i - 1];\n\
    \        decreasing = decreasing && l[i] <= l[i - 1];\n    }\n    increasing ||\
    \ decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut monotonic = true;\n    for x in l.windows(2) {\n    \
    \    if x[0] > x[1] {\n            monotonic = false;\n            break;\n  \
    \      }\n    }\n    if !monotonic {\n        monotonic = true;\n        for x\
    \ in l.windows(2) {\n            if x[0] < x[1] {\n                monotonic =\
    \ false;\n                break;\n            }\n        }\n    }\n    monotonic\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut neg = true;\n    let mut pos = true;\n    for i in 1..l.len()\
    \ {\n        if l[i] > l[i - 1] {\n            neg = false;\n        }\n     \
    \   if l[i] < l[i - 1] {\n            pos = false;\n        }\n    }\n    neg\
    \ || pos\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = 1;\n    let mut x = l[0];\n    for i in 1..l.len()\
    \ {\n        let d = x - l[i];\n        if d != 0 {\n            if m == 0 {\n\
    \                m = d;\n            } else if d * m < 0 {\n                return\
    \ false;\n            }\n        }\n        x = l[i];\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd1am2unq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 1;\n    let mut result = true;\n    let l_len = l.len();\n\
    \    let mut sign: isize = 0;\n    while i < l_len && result {\n        if sign\
    \ == 0 {\n            sign = l[i] - l[i - 1];\n        }\n        if sign * (l[i]\
    \ - l[i - 1]) < 0 {\n            result = false;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjm6uxwyn.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len()\
    \ {\n        if l[i] < l[i - 1] {\n            inc = false;\n        }\n     \
    \   if l[i] > l[i - 1] {\n            dec = false;\n        }\n    }\n    return\
    \ inc || dec;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_monotonic = true;\n    let mut is_increasing = false;\n\
    \    let mut is_decreasing = false;\n    let mut last_num = l[0];\n    for (idx,\
    \ num) in l.iter().enumerate() {\n        if idx == 0 {\n            continue;\n\
    \        }\n        if num < &last_num {\n            if is_increasing {\n   \
    \             is_monotonic = false;\n                break;\n            }\n \
    \           is_decreasing = true;\n        } else if num > &last_num {\n     \
    \       if is_decreasing {\n                is_monotonic = false;\n          \
    \      break;\n            }\n            is_increasing = true;\n        }\n \
    \       last_num = *num;\n    }\n    is_monotonic\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    assert!(l.len() > 1);\n    if l[0] == l[1] {\n        return\
    \ false;\n    }\n    let sgn = l[0] - l[1];\n    for i in 1..l.len() - 1 {\n \
    \       if sgn * (l[i] - l[i + 1]) < 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp312v0aqn.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut cmp = None;\n    for i in 1..l.len() {\n        match\
    \ cmp {\n            None => cmp = Some(l[i] - l[i - 1]),\n            Some(c)\
    \ => {\n                if (c < 0 && l[i] - l[i - 1] > 0) || (c > 0 && l[i] -\
    \ l[i - 1] < 0) {\n                    return false;\n                }\n    \
    \        }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut b\
    \ = l[0];\n    let mut dir = 0; // 0 = unknown, 1 = ascending, -1 = descending\n\
    \    for i in 1..l.len() {\n        if l[i] != b {\n            if dir == 0 {\n\
    \                dir = if l[i] > b { 1 } else { -1 };\n            } else if dir\
    \ == 1 && l[i] < b {\n                return false;\n            } else if dir\
    \ == -1 && l[i] > b {\n                return false;\n            }\n        }\n\
    \        b = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut status = 0;\n\n    for i in 0..l.len() - 1 {\n      \
    \  let a = l[i];\n        let b = l[i + 1];\n\n        if a < b {\n          \
    \  if status < 0 {\n                return false;\n            }\n           \
    \ status = 1;\n        } else if a > b {\n            if status > 0 {\n      \
    \          return false;\n            }\n            status = -1;\n        }\n\
    \    }\n\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let f = l[0];\n    let mut s = true;\n    for v in l {\n    \
    \    if f == v {\n            continue;\n        }\n        if s {\n         \
    \   s = false;\n            continue;\n        }\n        if f > v {\n       \
    \     f = v;\n            continue;\n        }\n        if f < v {\n         \
    \   return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `f`\n  --> /tmp/tmp_qm5p71o.rs:20:13\n\
    \   |\n9  |     let f = l[0];\n   |         -\n   |         |\n   |         first\
    \ assignment to `f`\n   |         help: consider making this binding mutable:\
    \ `mut f`\n...\n20 |             f = v;\n   |             ^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwq7yg6ma.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|x| x[0] < x[1]) || l.windows(2).all(|x| x[0]\
    \ > x[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvrcgdxyb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut result = true;\n    let mut i = 0;\n    let n = l.len();\n\
    \    while i < n - 1 && result {\n        if l[i] < l[i + 1] {\n            while\
    \ i < n - 1 && l[i] < l[i + 1] {\n                i += 1;\n            }\n   \
    \     } else if l[i] > l[i + 1] {\n            while i < n - 1 && l[i] > l[i +\
    \ 1] {\n                i += 1;\n            }\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    i == n - 1\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8c6ipzbt.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|window| window[0] <= window[1]) ||\n    l.windows(2).all(|window|\
    \ window[0] >= window[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut positive = None;\n    let mut prev = None;\n    for x\
    \ in l {\n        if let Some(p) = prev {\n            if x < p {\n          \
    \      if positive.is_some() {\n                    return false;\n          \
    \      }\n                positive = Some(false);\n            } else if x > p\
    \ {\n                if positive.is_some() && !positive.unwrap() {\n         \
    \           return false;\n                }\n                positive = Some(true);\n\
    \            }\n        }\n        prev = Some(x);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmposrp_dwf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).all(|w| w[0] <= w[1]) || l.windows(2).all(|w| w[0]\
    \ >= w[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // \u5358\u8ABF\u5897\u52A0\u3067\u3042\u308B\u304B\n    let\
    \ is_increasing = l.windows(2).all(|w| w[0] <= w[1]);\n    // \u5358\u8ABF\u6E1B\
    \u5C11\u3067\u3042\u308B\u304B\n    let is_decreasing = l.windows(2).all(|w| w[0]\
    \ >= w[1]);\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut negative = true;\n    let mut positive = true;\n    for\
    \ a in 1..l.len() {\n        if l[a] < l[a - 1] {\n            positive = false;\n\
    \        }\n        if l[a] > l[a - 1] {\n            negative = false;\n    \
    \    }\n    }\n    negative || positive\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let first\
    \ = l[0];\n    let end = l.len() - 1;\n    let last = l[end];\n    if first >\
    \ last {\n        let mut current = first;\n        for i in 0..l.len() {\n  \
    \          if current < l[i] {\n                return false;\n            }\n\
    \            current = l[i];\n        }\n    } else {\n        let mut current\
    \ = first;\n        for i in 0..l.len() {\n            if current > l[i] {\n \
    \               return false;\n            }\n            current = l[i];\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5466n2k7.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len()\
    \ {\n        inc &= l[i] >= l[i - 1];\n        dec &= l[i] <= l[i - 1];\n    }\n\
    \    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    let n = l.len();\n    for i in 0..n - 1 {\n        if l[i] > l[i + 1] {\n\
    \            increasing = false;\n        }\n        if l[i] < l[i + 1] {\n  \
    \          decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut is_inc\
    \ = false;\n    for (i, e) in l.iter().enumerate() {\n        if i == 0 {\n  \
    \          continue;\n        }\n        let prev = l[i - 1];\n        if is_inc\
    \ {\n            if e < &prev {\n                return false;\n            }\n\
    \        } else {\n            if e > &prev {\n                return false;\n\
    \            }\n        }\n        is_inc = !is_inc;\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp43_sx5ak.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut asc = true;\n    let mut des = true;\n    for i in 1..l.len()\
    \ {\n        if l[i] > l[i - 1] {\n            des = false;\n        }\n     \
    \   if l[i] < l[i - 1] {\n            asc = false;\n        }\n    }\n    asc\
    \ || des\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbwsn7o66.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut dec = true;\n    let mut inc = true;\n    for i in 1..l.len()\
    \ {\n        if l[i] < l[i - 1] {\n            inc = false;\n        }\n     \
    \   if l[i] > l[i - 1] {\n            dec = false;\n        }\n    }\n    inc\
    \ || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut rising = false;\n    let mut falling = false;\n    let\
    \ mut prev = isize::min_value();\n    for x in l {\n        if x > prev {\n  \
    \          rising = true;\n        } else if x < prev {\n            falling =\
    \ true;\n        }\n        prev = x;\n    }\n    return rising == falling;\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9x7dyigc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut old\
    \ = l[0];\n    let mut increasing = None;\n    for x in l {\n        if increasing\
    \ == None {\n            if x > old {\n                increasing = Some(true);\n\
    \            } else if x < old {\n                increasing = Some(false);\n\
    \            }\n        } else if increasing.unwrap() {\n            if x < old\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if x > old {\n                return false;\n            }\n        }\n \
    \       old = x;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            decreasing\
    \ = false;\n        } else if l[i] < l[i - 1] {\n            increasing = false;\n\
    \        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.windows(2).map(|x| x[1] - x[0]).fold(Ordering::Equal,\n   \
    \     |acc, x| acc.then(x.cmp(&0))) == Ordering::Equal\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmp08ujxzdx.rs:9:44\n  |\n9 |     l.windows(2).map(|x| x[1] - x[0]).fold(Ordering::Equal,\n\
    \  |                                            ^^^^^^^^ use of undeclared type\
    \ `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmp08ujxzdx.rs:10:42\n   |\n10 |         |acc, x| acc.then(x.cmp(&0)))\
    \ == Ordering::Equal\n   |                                          ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut iter = l.iter();\n    let mut last = *iter.next().unwrap();\n\
    \    let is_increasing = last < *iter.next().unwrap();\n    let mut is_monotonic\
    \ = true;\n    for x in iter {\n        if is_increasing && *x < last {\n    \
    \        is_monotonic = false;\n            break;\n        } else if !is_increasing\
    \ && *x > last {\n            is_monotonic = false;\n            break;\n    \
    \    }\n        last = *x;\n    }\n    is_monotonic\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp57ghcibx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut increasing = true;\n    let mut decreasing = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false;\n        }\n        if l[i] > l[i - 1] {\n            decreasing =\
    \ false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    let mut prev\
    \ = l[0];\n    for n in l {\n        if n < prev {\n            inc = false;\n\
    \        }\n        if n > prev {\n            dec = false;\n        }\n     \
    \   prev = n;\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    let s = l.pop().unwrap();\n    l.iter().any(|&x|\
    \ s > x) && l.iter().any(|&x| s < x)\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp4i0x5s8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
