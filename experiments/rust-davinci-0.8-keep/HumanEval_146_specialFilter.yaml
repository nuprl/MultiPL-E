name: HumanEval_146_specialFilter
language: rust
prompt: "/// Write a function that takes an array of numbers as input and returns\
  \ \n/// the number of elements in the array that are greater than 10 and both \n\
  /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
  /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
  \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
  \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
  \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121,\
  \ 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n   \
  \ assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n}\n"
completions: ['    nums.iter().filter(|&n| *n > 10 && n.abs() / 10 % 2 != 0 && n.abs()
    % 10 % 2 != 0).count() as isize', '    return 0;', "    if nums.len() == 0 {\n\
    \        return 0;\n    }\n    let is_odd = |x: isize| -> bool {\n        let\
    \ mut y = x;\n        let mut ones = false;\n        let mut tens = false;\n \
    \       loop {\n            let z = y % 10;\n            if z % 2 == 1 {\n   \
    \             ones = true;\n            }\n            y = y / 10;\n         \
    \   if y == 0 {\n                break;\n            }\n            if y % 10\
    \ == 1 || y % 10 == 3 || y % 10 == 5 || y % 10 == 7 || y % 10 == 9 {\n       \
    \         tens = true;\n            }\n        }\n        ones && tens\n    };\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && is_odd(n) {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut cnt = 0;\n\
    \    for &n in &nums {\n        if n > 10 && (n/10)%2==1 && n%2==1 {\n       \
    \     cnt += 1;\n        }\n    }\n    cnt", '    nums.iter().filter(|n| **n >
    10 && **n % 2 == 1 && **n / 10 % 2 == 1).count() as isize', "    let mut count\
    \ = 0;\n    for num in nums {\n        let digits = num.abs().to_string().chars().collect::<Vec<char>>();\n\
    \        if digits.len() > 1 && digits[0] % 2 != 0 && digits[digits.len() - 1]\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut cnt = 0;\n    for i in nums {\n        if (i > 10) && ((i % 10) % 2 != 0)\
    \ && ((i / 10) % 2 != 0) {\n            cnt += 1;\n        }\n    }\n    cnt",
  "    let mut cnt = 0;\n    for num in nums {\n        if num > 10 && (num % 10)\
    \ % 2 != 0 && num / 10 % 2 != 0 {\n            cnt += 1;\n        }\n    }\n \
    \   cnt", "    let mut count = 0;\n    for i in nums {\n        if i > 10 && i\
    \ % 2 != 0 && is_odd(i) {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for elem in nums {\n        let first = elem / 10;\n\
    \        let last = elem % 10;\n        if elem > 10 && (first % 2 == 1 || last\
    \ % 2 == 1) {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ f = |x: isize| {\n        let mut f, l = 0;\n        let mut y = x;\n      \
    \  while y > 0 {\n            l = y % 10;\n            y /= 10;\n        }\n \
    \       f = y;\n        f != 0 && l != 0 && f % 2 != 0 && l % 2 != 0 && x > 10\n\
    \    };\n    nums.iter().filter(|&x| f(*x)).count() as isize", '    0', "    nums.iter().filter(|n|\
    \ {\n        if **n > 10 {\n            if **n % 2 == 1 {\n                let\
    \ mut temp = **n;\n                while temp > 10 {\n                    temp\
    \ /= 10;\n                }\n                if temp % 2 == 1 {\n            \
    \        return true;\n                }\n            }\n        }\n        false\n\
    \    }).count() as isize", '    nums.iter().filter(|x| first_and_last_odd(*x)
    && *x > 10).count() as isize', "    nums.iter().filter(|&x| {\n        *x > 10\
    \ && x.to_string().chars().last().unwrap().to_digit(10).unwrap() % 2 == 1\n  \
    \          && x.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2\
    \ == 1\n    }).count() as isize", "    nums.iter().filter(|&n| {\n        if *n\
    \ < 10 {\n            return false;\n        }\n        *n % 2 == 1 && (n / 10)\
    \ % 2 == 1 && (n % 10) % 2 == 1\n    }).count() as isize", "    let mut count\
    \ = 0;\n    for &num in &nums {\n        if num > 10 && isOdd(num) && isOdd(lastDigit(num))\
    \ {\n            count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|x|
    is_special(*x)).count() as isize', "    let digits = |n: isize| n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n    nums.iter().filter(|&n|\
    \ n > &10 && digits(*n).first().unwrap() % 2 != 0 && digits(*n).last().unwrap()\
    \ % 2 != 0).count() as isize", '    0', "  let mut count = 0;\n  for i in nums\
    \ {\n    if i > 10 && (i / 10 % 2 != 0 && i % 10 % 2 != 0) {\n      count += 1;\n\
    \    }\n  }\n  count", "    let mut count = 0;\n    for x in nums {\n        if\
    \ (x % 2 == 1) && (x > 10) {\n            count += 1;\n        }\n    }\n    count",
  '    unimplemented!();', '    nums.iter().filter(|x| x > &&10 && (x.to_string().chars().next().unwrap().to_digit(10).unwrap()
    % 2 == 1) && (x.to_string().chars().rev().next().unwrap().to_digit(10).unwrap()
    % 2 == 1)).count() as isize', '    unimplemented!();', "    // TODO\n    nums.iter().filter(|&n|\
    \ n > &10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count() as isize", '    return
    nums.iter().filter(|&x| *x > 10 && x.abs() / 10 % 2 == 1 && x.abs() % 10 % 2 ==
    1).count() as isize;', "    let mut count = 0;\n    for n in nums {\n        let\
    \ mut digits = n.abs();\n        if digits >= 10 {\n            let first = digits\
    \ % 10;\n            if first % 2 == 1 {\n                digits /= 10;\n    \
    \            let last = digits % 10;\n                if last % 2 == 1 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count", "    let mut r = 0;\n    for i in nums {\n        if i > 10\
    \ && is_first_and_last_odd(i) {\n            r += 1;\n        }\n    }\n    r",
  "    let mut count = 0;\n    for i in nums {\n        if (is_odd(i)) && (i >= 10)\
    \ {\n            count += 1;\n        }\n    }\n    count", '    return 0;', " \
    \   nums.iter().filter(|n| n.abs() > 10).filter(|n| {\n        let mut tmp = n.abs();\n\
    \        (tmp % 10) % 2 == 1 && tmp / 10 % 2 == 1\n    }).count() as isize", " \
    \   let mut filter_number = 0;\n    for i in nums.iter() {\n        if i > &10\
    \ && i % 2 != 0 && i > &10 && i % 2 != 0 {\n            filter_number += 1;\n\
    \        }\n    }\n    filter_number", "    let mut count = 0;\n    for num in\
    \ nums {\n        let num_str = num.to_string();\n        if num_str.len() >=\
    \ 2 && \n            num_str.chars().next().unwrap().to_digit(10).unwrap() % 2\
    \ != 0 &&\n            num_str.chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0 &&\n            num > 10 {\n            count += 1;\n        }\n    }\n\
    \    count", '    nums.iter().filter(|&&x| x > 10 && firstDigit(x) % 2 == 1 &&
    lastDigit(x) % 2 == 1).count() as isize', '    panic!("not implemented")', " \
    \   let mut count = 0;\n    for num in nums {\n        if (num > 10) && (num.abs()\
    \ % 10 % 2 != 0) && (num / 10 % 10 % 2 != 0) {\n            count += 1;\n    \
    \    }\n    }\n    count", "    // TODO\n    0", "    let mut out = 0;\n    for\
    \ num in nums {\n        if num > 10 && firstLastOdd(num) {\n            out +=\
    \ 1;\n        }\n    }\n    out", "    if nums.len() == 0 {\n        return 0;\n\
    \    }\n    return nums.iter().filter(|&x| (*x > 10) && (*x > 0) && (*x % 2 !=\
    \ 0) && (*x / 10 % 2 != 0) && (*x % 10 != 0)).count() as isize;", "    let mut\
    \ count = 0;\n    for i in nums {\n        if i > 10 && is_odd(i) && is_odd(last_digit(i))\
    \ {\n            count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&x|
    x>&10 && x.abs()%10%2==1 && x.abs()/10%10%2==1).count() as isize', '    return
    0;', "    if nums.len() < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    for n in nums {\n        if n > 10 {\n            let mut v = n;\n      \
    \      let f = v % 10;\n            v /= 10;\n            let l = v % 10;\n  \
    \          if f % 2 != 0 && l % 2 != 0 {\n                count += 1;\n      \
    \      }\n        }\n    }\n    count", "    let sum = nums.iter().filter(|&x|\
    \ {\n        *x > 10 && (x % 10) % 2 != 0 && (*x / 10) % 2 != 0\n    }).count();\n\
    \    sum as isize", "    let mut counter = 0;\n    for num in nums {\n       \
    \ if num > 10 && num > 0 && num % 2 != 0 {\n            let num = num as i64;\n\
    \            let mut num_copy = num;\n            let mut digit: i64 = num_copy\
    \ % 10;\n            num_copy /= 10;\n            while num_copy != 0 {\n    \
    \            num_copy /= 10;\n                digit = num_copy % 10;\n       \
    \     }\n            if digit % 2 != 0 {\n                counter += 1;\n    \
    \        }\n        }\n    }\n    counter", "    let mut counter = 0;\n    for\
    \ n in nums {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 != 0 {\n        \
    \    counter += 1;\n        }\n    }\n    counter", '    unimplemented!()', '    return
    nums.iter().filter(|&x| *x > 10 && x.abs() % 10 % 2 != 0 && x.abs() / 10 % 10
    % 2 != 0).count() as isize;', '    unimplemented!()', "    let mut count = 0;\n\
    \    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 % 2 != 0 {\n \
    \           count += 1;\n        }\n    }\n    count", '    unimplemented!()',
  '    unimplemented!()', "    nums.iter().fold(0, |mut acc, &x| {\n        if x >\
    \ 10 && get_digit(x, 0) % 2 != 0 && get_digit(x, -1) % 2 != 0 {\n            acc\
    \ += 1;\n        }\n        acc\n    })", "    // TODO: Implement me!\n    -1",
  "    // YOUR CODE HERE\n    0", '    unimplemented!();', "    //\n    // YOUR CODE\
    \ HERE\n    //\n    unimplemented!()", "    let mut count = 0;\n    for num in\
    \ nums {\n        if num > 10 && num % 2 != 0 && (num / 10) % 2 != 0 && (num %\
    \ 10) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "   \
    \ let mut count = 0;\n    for i in &nums {\n        if i > &10 && (i % 10) % 2\
    \ != 0 && i / 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    return nums.iter().filter(|&n| {\n        let mut x = *n;\n        let mut\
    \ last_odd = false;\n        let mut first_odd = false;\n        if x > 10 {\n\
    \            if x < 0 {\n                x = -x;\n            }\n            while\
    \ x > 0 {\n                if x % 10 % 2 == 1 {\n                    last_odd\
    \ = true;\n                }\n                x /= 10;\n            }\n      \
    \      if x % 10 % 2 == 1 {\n                first_odd = true;\n            }\n\
    \        }\n        return last_odd && first_odd;\n    }).count() as isize;",
  "    let mut filtered: Vec<isize> = Vec::new();\n    for i in nums {\n        if\
    \ i > 10 {\n            let mut first_digit = i;\n            while first_digit\
    \ >= 10 {\n                first_digit /= 10;\n            }\n            let\
    \ mut last_digit = i;\n            last_digit %= 10;\n            if first_digit\
    \ % 2 != 0 && last_digit % 2 != 0 {\n                filtered.push(i);\n     \
    \       }\n        }\n    }\n    filtered.len() as isize", "    let mut count\
    \ = 0;\n    for x in nums {\n        if is_greater_than_10(x) && first_digit_odd(x)\
    \ && last_digit_odd(x) {\n            count += 1;\n        }\n    }\n    count",
  "    let mut c = 0;\n    for i in nums {\n        if (i > 10) && (i < -10) {\n \
    \           let i = i.abs();\n            let mut a = i % 10;\n            let\
    \ mut b = i;\n            while b > 10 {\n                b /= 10;\n         \
    \   }\n            if (a % 2 != 0) && (b % 2 != 0) {\n                c += 1;\n\
    \            }\n        }\n    }\n    c", '    nums.iter().filter(|&&n| isFirstDigitOdd(n)
    && isLastDigitOdd(n) && n > 10).count() as isize', '    unimplemented!();', " \
    \   let mut ret = 0;\n    for n in nums {\n        if n.abs() / 10 > 0 && n.abs()\
    \ % 10 != 0 && n.abs() / 10 % 2 != 0 && n.abs() % 10 % 2 != 0 && n > 10 {\n  \
    \          ret += 1;\n        }\n    }\n    ret", '    unimplemented!();', '    unimplemented!()',
  '    unimplemented!()', "    let mut res = 0;\n    for i in nums {\n        if i\
    \ > 10 && firstDigit(i) % 2 != 0 && lastDigit(i) % 2 != 0 {\n            res +=\
    \ 1;\n        }\n    }\n    res", '    return nums.iter().filter(|n| n >= &10
    && n.to_string().chars().nth(0).unwrap().to_digit(10).unwrap() % 2 != 0 && n.to_string().chars().last().unwrap().to_digit(10).unwrap()
    % 2 != 0).count() as isize;', "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 {\n            if num / 10 % 2 != 0 && num % 10 % 2 != 0\
    \ {\n                count += 1;\n            }\n        }\n    }\n    count",
  "    let mut counter = 0;\n    for i in nums {\n        if i > 10 && i.abs() % 10\
    \ % 2 != 0 && i.abs() / 10 % 10 % 2 != 0 {\n            counter += 1;\n      \
    \  }\n    }\n    counter", "    let mut res = 0;\n    for num in nums {\n    \
    \    let x = num.abs();\n        if x >= 10 && is_odd(x % 10) && is_odd(x / 10)\
    \ {\n            res += 1;\n        }\n    }\n    res", "    let mut count = 0;\n\
    \    for n in nums {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 != 0 && n\
    \ % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "  nums.iter().filter(|&x|\
    \ {\n    *x > 10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n      && x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n  }).count() as isize", "    let mut result = 0;\n    for x in nums\
    \ {\n        if x > 10 && is_odd(x % 10) && is_odd(x / 10_isize.pow(number_of_digits(x)\
    \ - 1)) {\n            result += 1;\n        }\n    }\n    result", '    0', " \
    \   nums.iter().filter(|&x| {\n        if x >= &10 {\n            if (x / 10)\
    \ % 2 != 0 && x % 2 != 0 {\n                return true;\n            }\n    \
    \    }\n        false\n    }).count() as isize", "    let mut count = 0;\n   \
    \ for i in nums {\n        if i > 10 && first_digit(i) % 2 != 0 && last_digit(i)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", '    0',
  '  unimplemented!()', "  let mut count = 0;\n  for num in nums {\n    if num > 10\
    \ && num.abs() % 10 % 2 != 0 && (num.abs() / 10) % 10 % 2 != 0 {\n      count\
    \ += 1;\n    }\n  }\n  count", '    0', '    return nums.iter().filter(|n| *n
    % 2 != 0 && *n > 10 && *n / 10 % 2 != 0 && *n % 10 % 2 != 0).count() as isize;',
  "    nums.iter().fold(0, |acc, n| {\n        if n.abs() > 10 && is_odd(first_digit(*n))\
    \ && is_odd(last_digit(*n)) {\n            acc + 1\n        } else {\n       \
    \     acc\n        }\n    })", "    // TODO: Implement.\n    0", "    let mut\
    \ n = 0;\n    for num in nums {\n        if num > 10 {\n            if is_odd(first_digit(num))\
    \ && is_odd(last_digit(num)) {\n                n += 1;\n            }\n     \
    \   }\n    }\n    n", '    panic!("not implemented");', "    let one = nums.iter().filter(|&num|\
    \ {\n        *num > 10 && (*num % 10) % 2 != 0 && (*num / 10_isize.pow(num.to_string().len()\
    \ as u32 - 1)) % 2 != 0\n    }).count() as isize;\n    return one;", "    let\
    \ mut count = 0;\n    for num in nums {\n        let num_str = num.to_string();\n\
    \        if num > 10 && \n            num_str.chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n            num_str.chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    return\
    \ nums.iter().fold(0, |acc, x| {\n        let is_special = *x > 10 && (x / 10)\
    \ % 2 != 0 && x % 2 != 0;\n        if is_special { acc + 1 } else { acc }\n  \
    \  });", "    let mut counter = 0;\n    for i in nums {\n        if i > 10 &&\
    \ is_first_odd(i) && is_last_odd(i) {\n            counter += 1;\n        }\n\
    \    }\n    counter", '    nums.iter().filter(|&x| x > &10).filter(|&x| x.abs()
    % 10 % 2 != 0).count() as isize', "    let mut result = 0;\n    for num in nums\
    \ {\n        if num > 10 {\n            let mut tmp = num;\n            let mut\
    \ first_digit = tmp % 10;\n            tmp /= 10;\n            let last_digit\
    \ = tmp % 10;\n            if first_digit % 2 != 0 && last_digit % 2 != 0 {\n\
    \                result += 1;\n            }\n        }\n    }\n    result", " \
    \   let mut filtered = Vec::new();\n    for num in nums {\n        if (num > 10)\
    \ && (num % 2 != 0) && (num / 10 % 2 != 0) {\n            filtered.push(num);\n\
    \        }\n    }\n    return filtered.len() as isize;", "    let mut result =\
    \ 0;\n    for n in nums {\n        if n > 10 && is_odd(get_first_digit(n)) &&\
    \ is_odd(get_last_digit(n)) {\n            result += 1;\n        }\n    }\n  \
    \  result", "    // Your code here!\n    0", "    // enter your code here\n  \
    \  0", "    let (start, end) = (nums[0], nums[nums.len() - 1]);\n    let startEndDigits\
    \ = vec![start.abs() / 10, start.abs() % 10, end.abs() / 10, end.abs() % 10];\n\
    \    let mut counter = 0;\n    for i in nums {\n        if i > 10 {\n        \
    \    for j in startEndDigits {\n                if j % 2 != 0 {\n            \
    \        counter += 1;\n                }\n            }\n        }\n    }\n \
    \   counter", "    let mut r = 0;\n    for num in nums {\n        if num > 10\
    \ {\n            let s = num.to_string();\n            let mut v: Vec<char> =\
    \ s.chars().collect();\n            if v[0] != '-' {\n                if (v[0]\
    \ == '1' || v[0] == '3' || v[0] == '5' || v[0] == '7' || v[0] == '9')\n      \
    \              && (v[v.len() - 1] == '1' || v[v.len() - 1] == '3' || v[v.len()\
    \ - 1] == '5' || v[v.len() - 1] == '7' || v[v.len() - 1] == '9') {\n         \
    \           r += 1;\n                }\n            }\n        }\n    }\n    r",
  "    let is_digit_odd = |num: isize| num % 2 == 1;\n    let has_both_odd_digits\
    \ = |num: isize| {\n        let first_digit = (num / 10) % 10;\n        let last_digit\
    \ = num % 10;\n        is_digit_odd(first_digit) && is_digit_odd(last_digit)\n\
    \    };\n    let is_greater_than_10 = |num: isize| num > 10;\n    let is_special\
    \ = |num: isize| is_greater_than_10(num) && has_both_odd_digits(num);\n    let\
    \ mut count = 0;\n    for num in nums {\n        if is_special(num) {\n      \
    \      count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n  \
    \  for num in nums {\n        let first_digit = if num < 0 {\n            -(num\
    \ / 10) % 10\n        } else {\n            num / 10 % 10\n        };\n      \
    \  let last_digit = num % 10;\n        if first_digit % 2 != 0 && last_digit %\
    \ 2 != 0 && num > 10 {\n            count += 1;\n        }\n    }\n    count",
  "    // Complete the specialFilter function here\n    nums.iter().fold(0, |a, &x|\
    \ {\n        if x > 10 && x.abs() / 10 % 2 != 0 && x % 2 != 0 {\n            a\
    \ + 1\n        } else {\n            a\n        }\n    })", "    let mut count\
    \ = 0;\n    for i in nums {\n        if (i > 10) && (i % 2 != 0) && (first_digit(i)\
    \ % 2 != 0) && (last_digit(i) % 2 != 0) {\n            count += 1;\n        }\n\
    \    }\n    count", "    nums.iter().filter(|num| {\n        let (first, last)\
    \ = (num.abs() / 10, num.abs() % 10);\n        *num > 10 && (first % 2 != 0 &&\
    \ last % 2 != 0)\n    }).count() as isize", '    return 0;', '    unimplemented!();',
  "    return nums.iter().filter(|&x| {\n        x > &10 && x.abs() % 10 % 2 != 0\
    \ && x / 10 % 10 % 2 != 0\n    }).count() as isize;", "    let mut count = 0;\n\
    \    for val in nums {\n        if (val > 10) && (val%2 != 0) && (val%10 != 0)\
    \ {\n            count += 1;\n        }\n    }\n    count", '    0', "    let\
    \ mut sum = 0;\n    for i in nums {\n        if (i > 10) && (i % 2 != 0) && (first_digit(i)\
    \ % 2 != 0) && (last_digit(i) % 2 != 0) {\n            sum += 1;\n        }\n\
    \    }\n    sum", '    unimplemented!();', "    // Start with 0\n    let mut result\
    \ = 0;\n    // Iterate over each\n    for n in nums {\n        // Check if n >\
    \ 10\n        if n > 10 {\n            // If it is, now check if the number has\
    \ first and last digits odd\n            // First, get the last digit\n      \
    \      let mut last_digit = n % 10;\n            // Then remove it from the number\n\
    \            let mut num = n / 10;\n            // Then get the first digit\n\
    \            let first_digit = num % 10;\n            // Then check if both are\
    \ odd\n            if last_digit % 2 != 0 && first_digit % 2 != 0 {\n        \
    \        // If they are, increase the result\n                result += 1;\n \
    \           }\n        }\n    }\n    // Return the result\n    result", '    unimplemented!();',
  '    unimplemented!();', "    let mut result = 0;\n    for num in nums {\n     \
    \   let mut number:isize = num;\n        if number > 10 {\n            let mut\
    \ first_digit = number % 10;\n            let mut last_digit = first_digit;\n\
    \            while number > 0 {\n                last_digit = number % 10;\n \
    \               number /= 10;\n            }\n            if first_digit % 2 !=\
    \ 0 && last_digit % 2 != 0 {\n                result += 1;\n            }\n  \
    \      }\n    }\n    result", "    nums.iter().filter(|&x| {\n        let first\
    \ = *x / 10;\n        let last = *x % 10;\n        x > &10 && (first % 2 != 0\
    \ && last % 2 != 0)\n    }).count() as isize", '    return nums.iter().filter(|x|
    *x > 10 && (*x / 10) % 2 != 0 && *x % 2 != 0).count() as isize;', "  let mut count\
    \ = 0;\n  for num in nums {\n    if (num > 10) {\n      let first_digit = num.abs()\
    \ / 10;\n      let last_digit = num.abs() % 10;\n      if (first_digit % 2 !=\
    \ 0 && last_digit % 2 != 0) {\n        count += 1;\n      }\n    }\n  }\n  count",
  "    let mut count = 0;\n    for n in nums {\n        let n = n.abs();\n       \
    \ if n > 10 && (n % 10) % 2 != 0 && (n / 10) % 2 != 0 {\n            count +=\
    \ 1;\n        }\n    }\n    count", '    nums.iter().filter(|&n| n > &10 && isOdd(getFirst(*n))
    && isOdd(getLast(*n))).count() as isize', '    return 0;', '    unimplemented!()',
  "    // TODO: Implement the function here\n    0", "  let mut res = 0;\n  for n\
    \ in nums {\n    if is_odd(n) && is_odd(n / 10) && n > 10 {\n      res += 1;\n\
    \    }\n  }\n  res", "    let mut result = 0;\n    for num in nums {\n       \
    \ if num > 10 && firstDigit(num) % 2 != 0 && lastDigit(num) % 2 != 0 {\n     \
    \       result += 1;\n        }\n    }\n    result", "    let mut count = 0;\n\
    \    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(first_digit(num))\
    \ && is_odd(last_digit(num)) {\n            count += 1;\n        }\n    }\n  \
    \  count", "    let mut count = 0;\n    for n in nums {\n        if n > 10 &&\
    \ n % 2 != 0 && n / 10 % 2 != 0 && n % 10 % 2 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut result = 0;\n    for i in nums {\n\
    \        if i >= 10 && (i / 10) % 2 != 0 && i % 2 != 0 {\n            result +=\
    \ 1;\n        }\n    }\n    result", "    let mut count = 0;\n    for n in nums\
    \ {\n        if n > 10 && first_digit(n) % 2 != 0 && last_digit(n) % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut result =\
    \ 0;\n    for i in nums {\n        if i > 10 && (i / 10 % 2 != 0) && (i % 10 %\
    \ 2 != 0) {\n            result += 1;\n        }\n    }\n    result", '    unimplemented!()',
  "  let mut count = 0;\n  for i in nums {\n    if i >= 10 && (i%10)%2 != 0 && ((i\
    \ - (i%10))/10)%2 != 0 {\n      count += 1;\n    }\n  }\n  count", "    let mut\
    \ count = 0;\n    for n in nums {\n        let n_str = n.to_string();\n      \
    \  if n > 10 {\n            if n_str.chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n                if n_str.chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n                    count += 1;\n                }\n           \
    \ }\n        }\n    }\n    count", "    let mut num_greater_than_10_and_both_odd:\
    \ isize = 0;\n    for n in nums {\n        if n > 10 && n.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n                 && n.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n            num_greater_than_10_and_both_odd += 1;\n        }\n\
    \    }\n    num_greater_than_10_and_both_odd", '    nums.iter().filter(|x| **x
    > 10 && (*x % 10) % 2 != 0 && (*x / 10) % 2 != 0).count() as isize', "    let\
    \ mut ret = 0;\n    for num in nums {\n        if num > 10 && num < -10 {\n  \
    \          let s = num.to_string();\n            let c1 = s.chars().nth(0).unwrap().to_digit(10).unwrap();\n\
    \            let c2 = s.chars().last().unwrap().to_digit(10).unwrap();\n     \
    \       if c1 % 2 == 1 && c2 % 2 == 1 {\n                ret += 1;\n         \
    \   }\n        }\n    }\n    ret", '    0', "    let filtered = nums.into_iter().filter(|num|\
    \ *num > 10)\n        .filter(|num| {\n            let first = (num / 10) % 10;\n\
    \            let last = num % 10;\n            first % 2 != 0 && last % 2 != 0\n\
    \        });\n    filtered.count() as isize", "    nums.iter().filter(|&&x| {\n\
    \        //(x % 2 != 0) && (x > 10) && (x / 10 % 2 != 0) && (x % 10 % 2 != 0)\n\
    \        x.abs() > 10 && (x / 10).abs() % 2 != 0 && x % 10 % 2 != 0\n    }).count()\
    \ as isize", "    let mut sum = 0;\n    for x in nums {\n        if (x > 10) &&\
    \ ((x / 10) % 2 != 0) && (x % 2 != 0) {\n            sum += 1;\n        }\n  \
    \  }\n    sum", "    let mut s:isize = 0;\n    for i in nums {\n        if (i\
    \ > 10) && (i.abs() % 10) % 2 != 0 && i / 10 > 0 {\n            s += 1;\n    \
    \    }\n    }\n    s", "    let mut result = 0;\n    for n in nums {\n       \
    \ if n > 10 && is_last_and_first_odd(n) {\n            result += 1;\n        }\n\
    \    }\n    result", "    // Add code here\n    0", "    return nums.iter().filter(|&x|\
    \ *x > 10 && (*x as f64).log10().floor() as isize % 2 != 0 \n                \
    \                  && x % 10 != 0).count() as isize;", "    let isGreaterThan10\
    \ = |x: isize| -> bool { x > 10 };\n    let isFirstAndLastOdd = |x: isize| ->\
    \ bool { x % 2 != 0 };\n    let firstAndLastAreOdd = |x: isize| -> bool {\n  \
    \      let a = x / 10;\n        let b = x % 10;\n        isFirstAndLastOdd(a)\
    \ && isFirstAndLastOdd(b)\n    };\n    let specialFilter = |x: isize| -> bool\
    \ {\n        isGreaterThan10(x) && firstAndLastAreOdd(x)\n    };\n    nums.iter().fold(0,\
    \ |acc, &x| acc + if specialFilter(x) { 1 } else { 0 })", '    unimplemented!();',
  '    unimplemented!();', "    let isSpecial = |n: &isize| {\n        let mut first\
    \ = *n / 10;\n        let mut last = *n % 10;\n        while first > 0 {\n   \
    \         if first % 2 == 0 || last % 2 == 0 {\n                return false;\n\
    \            }\n            first /= 10;\n            last = first % 10;\n   \
    \     }\n        *n > 10\n    };\n    nums.iter().filter(isSpecial).count() as\
    \ isize", "    let mut count = 0;\n    for num in nums {\n        let digits =\
    \ digits(num);\n        if num > 10 && digits[0] % 2 != 0 && digits[digits.len()\
    \ - 1] % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", '    0',
  '  unimplemented!()', "    let mut result = 0;\n    for item in nums {\n       \
    \ if item > 10 && is_odd(first_digit(item)) && is_odd(last_digit(item)) {\n  \
    \          result += 1;\n        }\n    }\n    result", '  unimplemented!();',
  "    let mut counter = 0;\n    for n in nums {\n        let first = n.abs() / 10;\n\
    \        let last = n.abs() % 10;\n        if first % 2 != 0 && last % 2 != 0\
    \ && n > 10 {\n            counter += 1;\n        }\n    }\n    counter", "  \
    \  nums.iter().filter(|&n| {\n        *n > 10 &&\n        n.abs() % 10 % 2 ==\
    \ 1 &&\n        n.abs() / 10 % 10 % 2 == 1\n    }).count() as isize", "    let\
    \ mut count = 0;\n    for x in nums {\n        if x > 10 && ((x % 10) % 2 != 0)\
    \ && (x / 10 % 2 != 0) {\n            count += 1;\n        }\n    }\n    count",
  "    let is_odd = |x: isize| x % 2 == 1;\n    let first_last_odd = |n: isize| {\n\
    \        let first = n % 10;\n        let last = n / 10;\n        is_odd(first)\
    \ && is_odd(last)\n    };\n    let bigger_than_10 = |n: isize| n > 10;\n    let\
    \ num_bigger_than_10_with_odd_first_last = |n: isize| {\n        bigger_than_10(n)\
    \ && first_last_odd(n)\n    };\n    let count = nums.iter().fold(0, |acc, &n|\
    \ {\n        if num_bigger_than_10_with_odd_first_last(n) {\n            acc +\
    \ 1\n        } else {\n            acc\n        }\n    });\n    count as isize",
  "    let mut count = 0;\n    for i in nums {\n        if (i > 10) && (i.abs() %\
    \ 10 % 2 != 0) && (i.abs() / 10 % 10 % 2 != 0) {\n            count += 1;\n  \
    \      }\n    }\n    count", "    let mut count = 0;\n    for i in nums {\n  \
    \      if i > 10 && i % 2 != 0 && getFirstDigit(i) % 2 != 0 && getLastDigit(i)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut count = 0;\n    for num in nums {\n        if ((num > 10) && (firstDigit(num)\
    \ % 2 != 0) && (lastDigit(num) % 2 != 0)) {\n            count += 1;\n       \
    \ }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n     \
    \   if num > 10 && is_odd(num) && is_odd(num % 10) {\n            count += 1;\n\
    \        }\n    }\n    count", "    nums.iter().fold(0, |acc, &x| {\n        if\
    \ x > 10 {\n            if x.abs() % 10 % 2 != 0 && x / 10 % 10 % 2 != 0 {\n \
    \               acc + 1\n            } else {\n                acc\n         \
    \   }\n        } else {\n            acc\n        }\n    })", '    unimplemented!();',
  "    // TODO: add your code here\n    0", '    unimplemented!()', "    let mut res\
    \ = 0;\n    for num in nums {\n        if num > 10 && (num / 10) % 2 != 0 && num\
    \ % 2 != 0 {\n            res += 1;\n        }\n    }\n    res", "    nums.iter().filter(|&n|\
    \ n > &10 \n        && n.abs() / 10 % 2 != 0 \n        && n.abs() % 10 % 2 !=\
    \ 0).count() as isize", '    nums.iter().filter(|&x| *x>10 && x.to_string().chars().last().unwrap().to_digit(10).unwrap()%2
    != 0 && x.to_string().chars().next().unwrap().to_digit(10).unwrap()%2 != 0).count()
    as isize', "    nums.iter().filter(|x| {\n        let str_x = format!(\"{}\",\
    \ x);\n        (x > &10) &&\n        (&str_x.chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0) &&\n        (&str_x.chars().nth(str_x.len() - 1).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0)\n    }).count() as isize", "  // TODO\n  unimplemented!()", "    let\
    \ mut filter = 0;\n    for i in nums {\n        if (i >= 10) && (i % 2 != 0) &&\
    \ (i / 10 % 2 != 0) {\n            filter += 1;\n        }\n    }\n    filter",
  '    unimplemented!();', "    let mut sum = 0;\n    for num in nums {\n        if\
    \ (num > 10) && (num % 2 != 0) && (num / 100 != 0) && (num % 10 != 0) {\n    \
    \        sum += 1;\n        }\n    }\n    sum", '    unimplemented!()', "    let\
    \ mut count = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) &&\
    \ is_odd(num % 10) {\n            count += 1;\n        }\n    }\n    count", " \
    \   let mut answer = 0;\n    for i in nums {\n        if (i > 10) && (i.abs()\
    \ % 10 % 2 != 0) && (i.abs() / 10_isize.pow(i.abs().to_string().len() as u32 -\
    \ 1) % 2 != 0) {\n            answer += 1;\n        }\n    }\n    answer", " \
    \   let mut count = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 &&\
    \ (i / 10) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  '    return 0;', "    let mut count = 0;\n    for num in nums {\n        if num\
    \ > 10 && num.abs() % 10 % 2 != 0 && num / 10 % 10 % 2 != 0 {\n            count\
    \ += 1;\n        }\n    }\n    count", '    nums.iter().filter(|n| **n > 10 &&
    n.abs() % 10 % 2 != 0).count() as isize', "    // add your code here\n    unimplemented!();",
  "    nums.iter().fold(0, |acc, x| {\n        match (x / 10, x % 10) {\n        \
    \    (x, y) if x != 0 && x % 2 != 0 && y % 2 != 0 && *x > 10 => acc + 1,\n   \
    \         _ => acc,\n        }\n    })", '    0', '    nums.iter().filter(|&n|
    n > &10 && is_odd(n) && is_odd(&(n / 10))).count() as isize', '    nums.iter().filter(|&x|
    x > &10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 ==
    1 && x.to_string().chars().last().unwrap().to_digit(10).unwrap() % 2 == 1).count()
    as isize', "    nums.iter().filter(|&x| {\n        *x > 10 && x.abs() % 10 % 2\
    \ != 0 && *x / 10 % 10 % 2 != 0\n    }).count() as isize", "    let mut result\
    \ = 0;\n    for i in nums {\n        if i > 10 && i.abs() % 10 % 2 != 0 && (i\
    \ % 10) % 2 != 0 {\n            result += 1;\n        }\n    }\n    result", '    0',
  "    let mut cnt = 0;\n    for i in nums {\n        if i > 10 && is_odd(i % 10)\
    \ && is_odd(i / 10isize.pow(length(i) - 1)) {\n            cnt += 1;\n       \
    \ }\n    }\n    cnt", "    let mut result = 0;\n    for num in nums {\n      \
    \  if num > 10 && has_odd_first_and_last_digits(num) {\n            result +=\
    \ 1;\n        }\n    }\n    result", "    let mut count = 0;\n    for i in nums\
    \ {\n        if i > 10 && (i.abs() % 10 == 1 || i.abs() % 10 == 3 || i.abs() %\
    \ 10 == 5 || i.abs() % 10 == 7 || i.abs() % 10 == 9) && (i.abs() % 2 == 1 || i.abs()\
    \ % 2 == -1) {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ res: isize = nums.iter().filter(|&&n| is_both_digit_odd(n) && n > 10).count()\
    \ as isize;\n    res", '    return 0;', '    unimplemented!()', '    nums.iter().filter(|&n|
    is_odd(n / 10 % 10) && is_odd(n % 10) && *n > 10).count() as isize', "    nums.iter().fold(0,\
    \ |count, x| {\n        if x > &10 && x.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n           && x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n            count + 1\n        } else {\n            count\n   \
    \     }\n    })", "    let mut cnt = 0;\n    for num in nums {\n        if num\
    \ > 10 && num%2==1 && num/10%2==1 && num%10==1 {\n            cnt += 1;\n    \
    \    }\n    }\n    cnt"]
stop_tokens:
- "\n}"
