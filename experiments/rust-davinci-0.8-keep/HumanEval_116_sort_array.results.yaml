name: HumanEval_116_sort_array
language: rust
results:
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    return arr.iter().map(|n| (n, n.count_ones())).sorted_by(|a, b| b.1.cmp(&a.1)).map(|t|\
    \ t.0).collect();\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmp3xdohub4.rs:9:52\n  |\n9 |     return arr.iter().map(|n|\
    \ (n, n.count_ones())).sorted_by(|a, b| b.1.cmp(&a.1)).map(|t| t.0).collect();\n\
    \  |                                                    ^^^^^^^^^ method not found\
    \ in `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmp3xdohub4.rs:9:27: 9:50]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|&x| (x.count_ones(), x))\n        .sorted()\n \
    \       .map(|x| x.1)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmptsdybrdz.rs:11:10\n   |\n11 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmptsdybrdz.rs:10:14:\
    \ 10:38]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n        .into_iter()\n\
    \        .map(|x| x.0)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmprq4o6_nn.rs:13:10\n\
    \   |\n13 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut base: Vec<(usize, isize)> = arr.iter().map(|x| (x.count_ones(), *x)).collect();\n\
    \    base.sort();\n    base.iter().map(|x| x.1).collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n    --> /tmp/tmp9_9905jz.rs:9:82\n\
    \     |\n9    |     let mut base: Vec<(usize, isize)> = arr.iter().map(|x| (x.count_ones(),\
    \ *x)).collect();\n     |                                                    \
    \                              ^^^^^^^ value of type `Vec<(usize, isize)>` cannot\
    \ be built from `std::iter::Iterator<Item=(u32, isize)>`\n     |\n     = help:\
    \ the trait `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| {\n        match count_ones(a).cmp(&count_ones(b))\
    \ {\n            std::cmp::Ordering::Equal => a.cmp(b),\n            x => x,\n\
    \        }\n    });\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpg54ndmif.rs:11:15\n\
    \   |\n11 |         match count_ones(a).cmp(&count_ones(b)) {\n   |          \
    \     ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `count_ones` in this scope\n  --> /tmp/tmpg54ndmif.rs:11:34\n   |\n11 |    \
    \     match count_ones(a).cmp(&count_ones(b)) {\n   |                        \
    \          ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (-x.count_ones(), x))\n        .sorted()\n\
    \        .into_iter()\n        .map(|(_, x)| x)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `-` to type `u32`\n  --> /tmp/tmp1ifrt994.rs:10:19\n\
    \   |\n10 |         .map(|x| (-x.count_ones(), x))\n   |                   ^^^^^^^^^^^^^^^\
    \ cannot apply unary operator `-`\n   |\n   = note: unsigned values cannot be\
    \ negated\n\nerror[E0599]: no method named `sorted` found for struct `Map` in\
    \ the current scope\n  --> /tmp/tmp1ifrt994.rs:11:10\n   |\n11 |         .sorted()\n\
    \   |          ^^^^^^ method not found in `Map<std::vec::IntoIter<isize>, [closure@/tmp/tmp1ifrt994.rs:10:14:\
    \ 10:38]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0600.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .sorted_by(|a, b| {\n            if a.count_ones()\
    \ == b.count_ones() {\n                a.cmp(b)\n            } else {\n      \
    \          a.count_ones().cmp(&b.count_ones())\n            }\n        })\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpjtz3hbhn.rs:10:10\n   |\n10 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|n| {\n            (\n                std::char::from_digit(n.abs()\
    \ as u32, 2).unwrap(),\n                n.abs(),\n            )\n        })\n\
    \        .collect::<Vec<(char, isize)>>()\n        .sort_by(|a, b| {\n       \
    \     if a.0.count_ones() == b.0.count_ones() {\n                a.1.cmp(&b.1)\n\
    \            } else {\n                a.0.count_ones().cmp(&b.0.count_ones())\n\
    \            }\n        })\n        .iter()\n        .map(|(ch, n)| {\n      \
    \      if ch.is_alphabetic() {\n                return -(*n as isize);\n     \
    \       }\n            *n as isize\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `count_ones` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpiwlrycca.rs:18:20\n   |\n18 |             if a.0.count_ones()\
    \ == b.0.count_ones() {\n   |                    ^^^^^^^^^^ method not found in\
    \ `char`\n\nerror[E0599]: no method named `count_ones` found for type `char` in\
    \ the current scope\n  --> /tmp/tmpiwlrycca.rs:18:40\n   |\n18 |             if\
    \ a.0.count_ones() == b.0.count_ones() {\n   |                               \
    \         ^^^^^^^^^^ method not found in `char`\n\nerror[E0599]: no method named\
    \ `count_ones` found for type `char` in the current scope\n  --> /tmp/tmpiwlrycca.rs:21:21\n\
    \   |\n21 |                 a.0.count_ones().cmp(&b.0.count_ones())\n   |    \
    \                 ^^^^^^^^^^ method not found in `char`\n\nerror[E0599]: no method\
    \ named `count_ones` found for type `char` in the current scope\n  --> /tmp/tmpiwlrycca.rs:21:43\n\
    \   |\n21 |                 a.0.count_ones().cmp(&b.0.count_ones())\n   |    \
    \                                       ^^^^^^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpiwlrycca.rs:24:10\n   |\n24 |         .iter()\n   |   \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    let mut sorted_ones: Vec<(usize, isize)> = arr\n\
    \        .iter()\n        .map(|&e| {\n            let ones = e.abs().count_ones();\n\
    \            (ones, e)\n        })\n        .collect();\n    sorted_ones.sort_by(|&(o1,\
    \ _), &(o2, _)| o1.cmp(&o2));\n    for (_, v) in sorted_ones {\n        res.push(v);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n    --> /tmp/tmpm48d49ii.rs:16:10\n\
    \     |\n16   |         .collect();\n     |          ^^^^^^^ value of type `Vec<(usize,\
    \ isize)>` cannot be built from `std::iter::Iterator<Item=(u32, isize)>`\n   \
    \  |\n     = help: the trait `FromIterator<(u32, isize)>` is not implemented for\
    \ `Vec<(usize, isize)>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<isize> = arr;\n    arr.sort_by(|a, b| {\n        // we sort\
    \ all the non-negative integers according to number of ones in their binary\n\
    \        // representation in ascending order.\n\n        if a < &0 || b < &0\
    \ {\n            a.cmp(b)\n        } else {\n            let zeros_a = a.count_zeros();\n\
    \            let zeros_b = b.count_zeros();\n            if zeros_a != zeros_b\
    \ {\n                zeros_a.cmp(&zeros_b)\n            } else {\n           \
    \     a.cmp(b)\n            }\n        }\n    });\n    arr\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 1, 2, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp57zwcgqm.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| {\n        let a_ones\
    \ = a.count_ones();\n        let b_ones = b.count_ones();\n        match a_ones.cmp(&b_ones)\
    \ {\n            Ordering::Equal => a.cmp(b),\n            o => o,\n        }\n\
    \    });\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmphse_zagx.rs:14:13\n   |\n14 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut pos = 0;\n    for i in 0..arr.len() {\n        for j in 0..arr.len()\
    \ - 1 {\n            if arr[j].count_ones() > arr[j + 1].count_ones() {\n    \
    \            pos = arr[j];\n                arr[j] = arr[j + 1];\n           \
    \     arr[j + 1] = pos;\n            } else if arr[j].count_ones() == arr[j +\
    \ 1].count_ones() {\n                if arr[j] > arr[j + 1] {\n              \
    \      pos = arr[j];\n                    arr[j] = arr[j + 1];\n             \
    \       arr[j + 1] = pos;\n                }\n            }\n        }\n    }\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `pos` is never read\n --> /tmp/tmpg4c66rhm.rs:9:13\n\
    \  |\n9 |     let mut pos = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nwarning:\
    \ unused variable: `i`\n  --> /tmp/tmpg4c66rhm.rs:10:9\n   |\n10 |     for i in\
    \ 0..arr.len() {\n   |         ^ help: if this is intentional, prefix it with\
    \ an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpg4c66rhm.rs:14:17\n   |\n8  | fn sort_array(arr: Vec<isize>) ->\
    \ Vec<isize> {\n   |               --- help: consider changing this to be mutable:\
    \ `mut arr`\n...\n14 |                 arr[j] = arr[j + 1];\n   |            \
    \     ^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `arr` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpg4c66rhm.rs:15:17\n   |\n8 \
    \ | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |               --- help:\
    \ consider changing this to be mutable: `mut arr`\n...\n15 |                 arr[j\
    \ + 1] = pos;\n   |                 ^^^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmpg4c66rhm.rs:19:21\n\
    \   |\n8  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \  --- help: consider changing this to be mutable: `mut arr`\n...\n19 |      \
    \               arr[j] = arr[j + 1];\n   |                     ^^^ cannot borrow\
    \ as mutable\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpg4c66rhm.rs:20:21\n   |\n8  | fn sort_array(arr: Vec<isize>)\
    \ -> Vec<isize> {\n   |               --- help: consider changing this to be mutable:\
    \ `mut arr`\n...\n20 |                     arr[j + 1] = pos;\n   |           \
    \          ^^^ cannot borrow as mutable\n\nerror: aborting due to 4 previous errors;\
    \ 2 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let num_of_ones_a =\
    \ binary_ones(*a);\n        let num_of_ones_b = binary_ones(*b);\n        num_of_ones_a.cmp(&num_of_ones_b).then(a.cmp(b))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `binary_ones` in this scope\n  --> /tmp/tmpdzc2z9vl.rs:11:29\n\
    \   |\n11 |         let num_of_ones_a = binary_ones(*a);\n   |               \
    \              ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `binary_ones` in this scope\n  --> /tmp/tmpdzc2z9vl.rs:12:29\n   |\n\
    12 |         let num_of_ones_b = binary_ones(*b);\n   |                      \
    \       ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| ((count_ones(x.abs()), x.abs()), x))\n\
    \        .sorted_by_key(|&((count, val), _)| (count, val))\n        .map(|((_,\
    \ _), x)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpew5vm57d.rs:10:20\n\
    \   |\n10 |         .map(|x| ((count_ones(x.abs()), x.abs()), x))\n   |      \
    \              ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted_by_key` found for struct `Map` in the current scope\n  --> /tmp/tmpew5vm57d.rs:11:10\n\
    \   |\n11 |         .sorted_by_key(|&((count, val), _)| (count, val))\n   |  \
    \        ^^^^^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>, _>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut count_ones = vec![0isize; arr.len()];\n    for i in 0..arr.len()\
    \ {\n        count_ones[i] = format!(\"{:b}\", arr[i]).chars().filter(|&x| x ==\
    \ '1').count() as isize;\n    }\n    arr.into_iter().zip(count_ones.into_iter()).sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0))).map(|x| x.0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Zip` in the\
    \ current scope\n  --> /tmp/tmpseq8vmcp.rs:13:49\n   |\n13 |     arr.into_iter().zip(count_ones.into_iter()).sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0))).map(|x| x.0).collect()\n   |         \
    \                                        ^^^^^^^^^ method not found in `Zip<std::vec::IntoIter<isize>,\
    \ std::vec::IntoIter<isize>>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|&num| (num, num.count_ones()))\n        .sorted_by(|a,\
    \ b| {\n            if a.1 < b.1 {\n                Ordering::Less\n         \
    \   } else if a.1 > b.1 {\n                Ordering::Greater\n            } else\
    \ {\n                a.0.cmp(&b.0)\n            }\n        })\n        .map(|&(num,\
    \ _)| num)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp80227s3p.rs:13:17\n   |\n13 |                 Ordering::Less\n   | \
    \                ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp80227s3p.rs:15:17\n\
    \   |\n15 |                 Ordering::Greater\n   |                 ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0599]: no method named `sorted_by` found\
    \ for struct `Map` in the current scope\n  --> /tmp/tmp80227s3p.rs:11:10\n   |\n\
    11 |         .sorted_by(|a, b| {\n   |          ^^^^^^^^^ method not found in\
    \ `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmp80227s3p.rs:10:14: 10:44]>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        match a_ones.cmp(&b_ones) {\n \
    \           Ordering::Equal => a.cmp(b),\n            otherwise => otherwise,\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpbqvb3s19.rs:14:13\n   |\n14 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut n = arr.len();\n    let mut m = n;\n    let mut arr = arr;\n    while\
    \ m > 0 {\n        m = 0;\n        let mut j = 0;\n        for i in 1..n {\n \
    \           if let Some(f) = compare_binary(&arr[i - 1], &arr[i]) {\n        \
    \        arr.swap(i - 1, i);\n                m = j;\n            }\n        \
    \    j += 1;\n        }\n        n = m;\n    }\n    arr\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `compare_binary` in this scope\n  -->\
    \ /tmp/tmpoy_k27r2.rs:16:30\n   |\n16 |             if let Some(f) = compare_binary(&arr[i\
    \ - 1], &arr[i]) {\n   |                              ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.to_vec();\n    res.sort_by(|a, b| {\n        let a_ones\
    \ = a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones ==\
    \ b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjb1zhvse.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|n| (n, count_ones(n)))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| {\n            if a.1 != b.1 {\n                a.1.cmp(&b.1)\n\
    \            } else {\n                a.0.cmp(&b.0)\n            }\n        })\n\
    \        .into_iter()\n        .map(|(n, _)| n)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpsfdpod8s.rs:10:22\n\
    \   |\n10 |         .map(|n| (n, count_ones(n)))\n   |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0609]: no field `1` on type `&_`\n  --> /tmp/tmpsfdpod8s.rs:13:18\n\
    \   |\n13 |             if a.1 != b.1 {\n   |                  ^\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmpsfdpod8s.rs:19:10\n   |\n19 |       \
    \  .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \           which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599,\
    \ E0609.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut vec = arr.clone();\n    vec.sort_by(|a, b| {\n        let b1 = format!(\"\
    {:b}\", a).chars().filter(|&n| n == '1').count();\n        let b2 = format!(\"\
    {:b}\", b).chars().filter(|&n| n == '1').count();\n        if b1 == b2 {\n   \
    \         a.cmp(b)\n        } else {\n            b1.cmp(&b2)\n        }\n   \
    \ });\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpkdbs8smw.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| (a.1, a.0).cmp(&(b.1, b.0)))\n        .into_iter()\n\
    \        .map(|x| x.0)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmp7qdhnh_1.rs:13:10\n\
    \   |\n13 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones: Vec<(isize, isize)> = arr.iter().map(|x| (*x, count_ones(*x))).collect();\n\
    \    ones.sort_by(|a, b| match a.1.cmp(&b.1) {\n        Ordering::Equal => a.0.cmp(&b.0),\n\
    \        other => other,\n    });\n    ones.iter().map(|x| x.0).collect()\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpgqi4fdsn.rs:11:9\n   |\n11 |         Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]: cannot\
    \ find function `count_ones` in this scope\n --> /tmp/tmpgqi4fdsn.rs:9:65\n  |\n\
    9 |     let mut ones: Vec<(isize, isize)> = arr.iter().map(|x| (*x, count_ones(*x))).collect();\n\
    \  |                                                                 ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|n| (n, format!(\"{:b}\", n).chars().filter(|x|\
    \ *x == '1').count()))\n        .collect::<Vec<_>>()\n        .sort_by(|x, y|\
    \ x.1.cmp(&y.1).then(x.0.cmp(&y.0)))\n        .into_iter()\n        .map(|x| x.0)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmp2m_jscne.rs:13:10\n\
    \   |\n13 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v: Vec<_> = arr.into_iter().map(|i| (i, to_binary_string(i))).collect();\n\
    \    v.sort_by(|&(_, ref a), &(_, ref b)| {\n        let len_a = a.len();\n  \
    \      let len_b = b.len();\n        if len_a == len_b {\n            a.cmp(b)\n\
    \        } else {\n            len_a.cmp(&len_b)\n        }\n    });\n    v.into_iter().map(|(i,\
    \ _)| i).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_binary_string` in this scope\n -->\
    \ /tmp/tmp_yj_w_8t.rs:9:53\n  |\n9 |     let mut v: Vec<_> = arr.into_iter().map(|i|\
    \ (i, to_binary_string(i))).collect();\n  |                                  \
    \                   ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let ones_a = a.count_ones();\n\
    \        let ones_b = b.count_ones();\n        if ones_a == ones_b {\n       \
    \     a.cmp(b)\n        } else {\n            ones_a.cmp(&ones_b)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp_j6167h7.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_binary = format!(\"\
    {:b}\", a);\n        let b_binary = format!(\"{:b}\", b);\n        a_binary.chars().filter(|&c|\
    \ c == '1').count().cmp(&b_binary.chars().filter(|&c| c == '1').count()).then(a.cmp(b))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpdmlgn9u7.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut m: HashMap<_, _> = arr.iter().map(|&x| (x, num_of_ones(x))).collect();\n\
    \    arr.iter().map(|&x| *m.get(&x).unwrap()).collect::<Vec<_>>();\n    arr.sort_by(|&a,\
    \ &b| {\n        let (a_ones, b_ones) = (*m.get(&a).unwrap(), *m.get(&b).unwrap());\n\
    \        if a_ones == b_ones {\n            a.cmp(&b)\n        } else {\n    \
    \        a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmph868e9iz.rs:9:16\n\
    \  |\n9 |     let mut m: HashMap<_, _> = arr.iter().map(|&x| (x, num_of_ones(x))).collect();\n\
    \  |                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot\
    \ find function `num_of_ones` in this scope\n --> /tmp/tmph868e9iz.rs:9:56\n \
    \ |\n9 |     let mut m: HashMap<_, _> = arr.iter().map(|&x| (x, num_of_ones(x))).collect();\n\
    \  |                                                        ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0412, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|n| (n, n.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|(_, a1), (_, a2)| match a1.cmp(a2) {\n            Ordering::Equal\
    \ => a1.cmp(a2),\n            ord => ord,\n        })\n        .into_iter()\n\
    \        .map(|(num, _)| num)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmptv5hs358.rs:13:13\n   |\n13 |             Ordering::Equal => a1.cmp(a2),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmptv5hs358.rs:16:10\n   |\n16 |       \
    \  .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \           which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let ones = format!(\"\
    {:b}\", a).matches('1').count();\n        let twos = format!(\"{:b}\", b).matches('1').count();\n\
    \        if ones == twos {\n            a.cmp(b)\n        } else {\n         \
    \   ones.cmp(&twos)\n        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpiywx4uji.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| {\n        let a_ones\
    \ = format!(\"{:b}\", a)\n            .chars()\n            .filter(|&x| x ==\
    \ '1')\n            .count();\n        let b_ones = format!(\"{:b}\", b)\n   \
    \         .chars()\n            .filter(|&x| x == '1')\n            .count();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    res\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpg_ik2w4u.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones: Vec<(isize, usize)> = arr.iter().map(|n| (n, count_ones(*n))).collect();\n\
    \    ones.sort_by(|a, b| a.1.cmp(&b.1));\n    ones.iter().map(|n| n.0).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpelx6_a0e.rs:9:64\n\
    \  |\n9 |     let mut ones: Vec<(isize, usize)> = arr.iter().map(|n| (n, count_ones(*n))).collect();\n\
    \  |                                                                ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp25x_wov1.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones_and_zeros: Vec<(isize, Vec<bool>)> = arr\n        .iter()\n\
    \        .map(|num| (num.clone(), num.to_string(2).chars().map(|c| c == '1').collect()))\n\
    \        .collect();\n    ones_and_zeros.sort_by(|a, b| {\n        let ones_a\
    \ = a.1.iter().filter(|b| **b).count();\n        let ones_b = b.1.iter().filter(|b|\
    \ **b).count();\n        if ones_a < ones_b {\n            return std::cmp::Ordering::Less;\n\
    \        } else if ones_a > ones_b {\n            return std::cmp::Ordering::Greater;\n\
    \        }\n        let a_dec = format!(\"{:?}\", a.1).replace(\"true\", \"1\"\
    ).replace(\"false\", \"0\");\n        let b_dec = format!(\"{:?}\", b.1).replace(\"\
    true\", \"1\").replace(\"false\", \"0\");\n        a_dec.cmp(&b_dec)\n    });\n\
    \    ones_and_zeros.iter().map(|a| a.0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp70p5h24t.rs:11:38\n     |\n11   |         .map(|num| (num.clone(),\
    \ num.to_string(2).chars().map(|c| c == '1').collect()))\n     |             \
    \                         ^^^^^^^^^ - supplied 1 argument\n     |            \
    \                          |\n     |                                      expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|n| n.abs())\n        .map(|n| n as u64)\n\
    \        .map(|n| (n, n.count_ones()))\n        .collect::<Vec<(u64, u32)>>()\n\
    \        .sort_by(|a, b| {\n            if a.1 == b.1 {\n                a.0.cmp(&b.0)\n\
    \            } else {\n                a.1.cmp(&b.1)\n            }\n        })\n\
    \        .into_iter()\n        .map(|(n, _)| n as isize)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpkz21z85o.rs:21:10\n\
    \   |\n21 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut x = arr.clone();\n    x.sort_by(|a, b| {\n        let c = a.count_ones().cmp(&b.count_ones());\n\
    \        if c == std::cmp::Ordering::Equal {\n            b.cmp(a)\n        }\
    \ else {\n            c\n        }\n    });\n    x\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpefnsacaq.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn one_count(n: usize) -> usize {\n        let mut count = 0;\n        let\
    \ mut x = n;\n        while x > 0 {\n            count += x & 1;\n           \
    \ x >>= 1;\n        }\n        count\n    }\n    arr.into_iter().map(|n| (one_count(n\
    \ as usize), n)).sorted_by(|a, b| {\n        let cmp = a.0.cmp(&b.0);\n      \
    \  if cmp == std::cmp::Ordering::Equal {\n            a.1.cmp(&b.1)\n        }\
    \ else {\n            cmp\n        }\n    }).map(|(_, n)| n).collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpnscpf79e.rs:18:57\n   |\n18 |     arr.into_iter().map(|n|\
    \ (one_count(n as usize), n)).sorted_by(|a, b| {\n   |                       \
    \                                  ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpnscpf79e.rs:18:25: 18:55]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, x.count_ones()))\n        .sorted_by(|a,\
    \ b| {\n            let (i, a1) = a;\n            let (j, b1) = b;\n         \
    \   a1.cmp(&b1).then(i.cmp(&j))\n        })\n        .map(|(x, _)| x)\n      \
    \  .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpk7l1lnrm.rs:11:10\n   |\n11 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpk7l1lnrm.rs:10:14: 10:37]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let ones_a\
    \ = a.count_ones();\n        let ones_b = b.count_ones();\n        ones_a.cmp(&ones_b).then(a.cmp(b))\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpepe4vtu3.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // your code here\n    let mut vec: Vec<(isize, usize)> = arr.iter().map(|x|\
    \ (x.clone(), bits(*x))).collect();\n    vec.sort_by(|a, b| {\n        if a.1\
    \ == b.1 {\n            a.0.cmp(&b.0)\n        } else {\n            a.1.cmp(&b.1)\n\
    \        }\n    });\n    vec.iter().map(|x| x.0).collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `bits` in this scope\n  --> /tmp/tmpbjhafj3_.rs:10:71\n\
    \   |\n10 |     let mut vec: Vec<(isize, usize)> = arr.iter().map(|x| (x.clone(),\
    \ bits(*x))).collect();\n   |                                                \
    \                       ^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let a\
    \ = format!(\"{:b}\", a);\n        let b = format!(\"{:b}\", b);\n        if a.matches('1').count()\
    \ == b.matches('1').count() {\n            a.parse::<isize>().unwrap().cmp(&b.parse::<isize>().unwrap())\n\
    \        } else {\n            a.matches('1').count().cmp(&b.matches('1').count())\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: PosOverflow }', /tmp/tmpjzs1ive7.rs:14:32\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by(|a, b| (a.count_ones(),\
    \ a).cmp(&(b.count_ones(), b)));\n    sorted_arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphtb7gyd5.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    let mut one_count = 0;\n    for i in 0..arr.len()\
    \ {\n        one_count = num_ones(arr[i]);\n        for j in i..arr.len() {\n\
    \            if num_ones(arr[j]) < one_count || (num_ones(arr[j]) == one_count\
    \ && arr[j] < arr[i]) {\n                let temp = arr[i];\n                arr[i]\
    \ = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_ones` in this scope\n  --> /tmp/tmphyephusk.rs:12:21\n\
    \   |\n12 |         one_count = num_ones(arr[i]);\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `num_ones` in\
    \ this scope\n  --> /tmp/tmphyephusk.rs:14:16\n   |\n14 |             if num_ones(arr[j])\
    \ < one_count || (num_ones(arr[j]) == one_count && arr[j] < arr[i]) {\n   |  \
    \              ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `num_ones` in this scope\n  --> /tmp/tmphyephusk.rs:14:49\n   |\n14 |      \
    \       if num_ones(arr[j]) < one_count || (num_ones(arr[j]) == one_count && arr[j]\
    \ < arr[i]) {\n   |                                                 ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut tmp = arr.clone();\n    tmp.sort_by(|a, b| (a.count_ones(), *a).cmp(&(b.count_ones(),\
    \ *b)));\n    tmp\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4t40h7gp.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let x = count_ones(*a);\n\
    \        let y = count_ones(*b);\n        if x == y {\n            a.cmp(b)\n\
    \        } else {\n            x.cmp(&y)\n        }\n    });\n    arr\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpjqhlyr2m.rs:11:17\n\
    \   |\n11 |         let x = count_ones(*a);\n   |                 ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `count_ones` in this\
    \ scope\n  --> /tmp/tmpjqhlyr2m.rs:12:17\n   |\n12 |         let y = count_ones(*b);\n\
    \   |                 ^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut array: Vec<(usize, isize)> = arr.iter().map(|&x| (x.count_ones(),\
    \ x)).collect();\n    array.sort();\n    array.iter().map(|&(_, x)| x).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n    --> /tmp/tmpckozk545.rs:9:83\n\
    \     |\n9    |     let mut array: Vec<(usize, isize)> = arr.iter().map(|&x| (x.count_ones(),\
    \ x)).collect();\n     |                                                     \
    \                              ^^^^^^^ value of type `Vec<(usize, isize)>` cannot\
    \ be built from `std::iter::Iterator<Item=(u32, isize)>`\n     |\n     = help:\
    \ the trait `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut z: Vec<_> = arr.iter().map(|x| (x, format!(\"{:b}\", x))).collect();\n\
    \    z.sort_by(|a, b| match a.1.len().cmp(&b.1.len()) {\n        std::cmp::Ordering::Equal\
    \ => {\n            match a.0.cmp(b.0) {\n                std::cmp::Ordering::Equal\
    \ => std::cmp::Ordering::Equal,\n                std::cmp::Ordering::Greater =>\
    \ std::cmp::Ordering::Greater,\n                std::cmp::Ordering::Less => std::cmp::Ordering::Less,\n\
    \            }\n        }\n        std::cmp::Ordering::Greater => std::cmp::Ordering::Greater,\n\
    \        std::cmp::Ordering::Less => std::cmp::Ordering::Less,\n    });\n    z.iter().map(|x|\
    \ *x.0).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpzoaqlr9s.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<isize> = arr;\n    arr.sort_by(|x, y| {\n        let x_ones\
    \ = x.count_ones();\n        let y_ones = y.count_ones();\n        x_ones.cmp(&y_ones).then(x.cmp(y))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqcx1nsa0.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // sort by number of 1's in binary representation\n    // and then sort by\
    \ value\n    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n    \
    \    binary_ones(*a).cmp(&binary_ones(*b))\n            .then(a.cmp(b))\n    });\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `binary_ones` in this scope\n  --> /tmp/tmpgvx_1jyn.rs:13:9\n\
    \   |\n13 |         binary_ones(*a).cmp(&binary_ones(*b))\n   |         ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `binary_ones`\
    \ in this scope\n  --> /tmp/tmpgvx_1jyn.rs:13:30\n   |\n13 |         binary_ones(*a).cmp(&binary_ones(*b))\n\
    \   |                              ^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<_> = arr.into_iter().map(|n| (n, count_ones(n))).collect();\n\
    \    arr.sort_by(|(n1, ones1), (n2, ones2)| ones1.cmp(ones2).then(n1.cmp(n2)));\n\
    \    arr.into_iter().map(|(n, _)| n).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpyrr6ifky.rs:9:55\n\
    \  |\n9 |     let mut arr: Vec<_> = arr.into_iter().map(|n| (n, count_ones(n))).collect();\n\
    \  |                                                       ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        a_ones.cmp(&b_ones).then(a.cmp(b))\n    });\n   \
    \ arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpu89z2olk.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let bit_n = |i: isize| -> usize {\n        i.count_ones() as usize\n    };\n\
    \    arr.iter().enumerate().sorted_by(|&(i, a), &(j, b)| {\n        let ba = bit_n(*a);\n\
    \        let bb = bit_n(*b);\n        match ba.cmp(&bb) {\n            Ordering::Equal\
    \ => i.cmp(&j),\n            c => c,\n        }\n    }).map(|(_, c)| *c).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpv5i10fvx.rs:16:13\n   |\n16 |             Ordering::Equal => i.cmp(&j),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]:\
    \ no method named `sorted_by` found for struct `Enumerate` in the current scope\n\
    \  --> /tmp/tmpv5i10fvx.rs:12:28\n   |\n12 |     arr.iter().enumerate().sorted_by(|&(i,\
    \ a), &(j, b)| {\n   |                            ^^^^^^^^^ method not found in\
    \ `Enumerate<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let bin_a = format!(\"\
    {:b}\", a);\n        let bin_b = format!(\"{:b}\", b);\n        if bin_a.matches('1').count()\
    \ != bin_b.matches('1').count() {\n            bin_a.matches('1').count().cmp(&bin_b.matches('1').count())\n\
    \        } else {\n            a.cmp(&b)\n        }\n    });\n    arr\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpki5ksmnv.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut nums = arr.clone();\n    nums.sort_by(|a, b| {\n        let a_ones\
    \ = count_ones(a);\n        let b_ones = count_ones(b);\n        let ord = a_ones.cmp(&b_ones);\n\
    \        match ord {\n            Ord::Equal => a.cmp(&b),\n            _ => ord,\n\
    \        }\n    });\n    nums\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpkbwpgv0_.rs:11:22\n\
    \   |\n11 |         let a_ones = count_ones(a);\n   |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n  --> /tmp/tmpkbwpgv0_.rs:12:22\n   |\n12 |         let b_ones =\
    \ count_ones(b);\n   |                      ^^^^^^^^^^ not found in this scope\n\
    \nwarning: trait objects without an explicit `dyn` are deprecated\n  --> /tmp/tmpkbwpgv0_.rs:15:13\n\
    \   |\n15 |             Ord::Equal => a.cmp(&b),\n   |             ^^^\n   |\n\
    \   = note: `#[warn(bare_trait_objects)]` on by default\n   = warning: this is\
    \ accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n\
    \   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    help: use `dyn`\n   |\n15 |             <dyn Ord>::Equal => a.cmp(&b),\n   | \
    \            ++++    +\n\nerror[E0038]: the trait `Ord` cannot be made into an\
    \ object\n   --> /tmp/tmpkbwpgv0_.rs:15:13\n    |\n15  |             Ord::Equal\
    \ => a.cmp(&b),\n    |             ^^^ `Ord` cannot be made into an object\n \
    \   |\nnote: for a trait to be \"object safe\" it needs to allow building a vtable\
    \ to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n\
    \nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0038, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0038`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpmtwbu40r.rs:10:24\n\
    \   |\n10 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n   |\
    \                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `count_ones` in this scope\n  --> /tmp/tmpmtwbu40r.rs:10:44\n\
    \   |\n10 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n   |\
    \                                            ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut vec = arr.clone();\n    vec.sort_by(|a, b| {\n        let len_a =\
    \ a.to_string().len();\n        let len_b = b.to_string().len();\n        if len_a\
    \ == len_b {\n            a.cmp(b)\n        } else {\n            len_a.cmp(&len_b)\n\
    \        }\n    });\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpi764h_1l.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|x| format!(\"{:b}\", x))\n        .map(|x| (x.matches('1').count(),\
    \ x.parse::<isize>().unwrap()))\n        .collect::<Vec<(usize, isize)>>()\n \
    \       .sort_by(|&a, &b| {\n            let a = a.0.cmp(&b.0);\n            if\
    \ a == Ordering::Equal {\n                return a.then(a.1.cmp(&b.1));\n    \
    \        }\n            a\n        })\n        .iter()\n        .map(|x| x.1)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpgxojba17.rs:15:21\n   |\n15 |             if a == Ordering::Equal {\n\
    \   |                     ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0609]:\
    \ no field `1` on type `std::cmp::Ordering`\n  --> /tmp/tmpgxojba17.rs:16:33\n\
    \   |\n16 |                 return a.then(a.1.cmp(&b.1));\n   |              \
    \                   ^\n\nerror[E0599]: no method named `iter` found for unit type\
    \ `()` in the current scope\n  --> /tmp/tmpgxojba17.rs:20:10\n   |\n20 |     \
    \    .iter()\n   |          ^^^^ method not found in `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599,\
    \ E0609.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    use std::cmp::Ordering;\n    arr.into_iter()\n        .map(|n| (n, format!(\"\
    {:b}\", n)))\n        .sorted_by(|(_, a), (_, b)| {\n            a.chars()\n \
    \               .filter(|c| *c == '1')\n                .count()\n           \
    \     .cmp(&b.chars().filter(|c| *c == '1').count())\n        })\n        .sorted_by(|(a,\
    \ _), (b, _)| match a.cmp(b) {\n            Ordering::Equal => Ordering::Equal,\n\
    \            Ordering::Less => Ordering::Less,\n            Ordering::Greater\
    \ => Ordering::Greater,\n        })\n        .map(|(n, _)| n)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpzhdiv93p.rs:12:10\n   |\n12 |         .sorted_by(|(_,\
    \ a), (_, b)| {\n   |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpzhdiv93p.rs:11:14: 11:41]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        bin_ones(*a).cmp(&bin_ones(*b))\n\
    \            .then(a.cmp(b))\n    });\n    sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `bin_ones` in this scope\n  --> /tmp/tmpfn8hoscy.rs:11:9\n\
    \   |\n11 |         bin_ones(*a).cmp(&bin_ones(*b))\n   |         ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `bin_ones` in this\
    \ scope\n  --> /tmp/tmpfn8hoscy.rs:11:27\n   |\n11 |         bin_ones(*a).cmp(&bin_ones(*b))\n\
    \   |                           ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let a_ones\
    \ = format!(\"{:b}\", a)\n            .chars()\n            .filter(|c| *c ==\
    \ '1')\n            .count();\n        let b_ones = format!(\"{:b}\", b)\n   \
    \         .chars()\n            .filter(|c| *c == '1')\n            .count();\n\
    \        a_ones.cmp(&b_ones).then(a.cmp(b))\n    });\n    sorted\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5rh81a6s.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn bitcount(n: isize) -> usize {\n        let mut r = 0;\n        let mut\
    \ n = n;\n        while n > 0 {\n            if n & 1 != 0 {\n               \
    \ r += 1;\n            }\n            n >>= 1;\n        }\n        r\n    }\n\
    \    let mut v = arr.clone();\n    v.sort_by(|a, b| {\n        let s = bitcount(*a)\
    \ - bitcount(*b);\n        if s != 0 {\n            s\n        } else {\n    \
    \        a.cmp(b)\n        }\n    });\n    v\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuzbe3deq.rs:24:13\n   |\n\
    24 |             s\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| {\n        let a_ones\
    \ = a.count_ones();\n        let b_ones = b.count_ones();\n        a_ones.cmp(&b_ones).then(a.cmp(b))\n\
    \    });\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpkdrifoie.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp49jp6j9w.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // Find the number of ones in the binary representation of each element of\n\
    \    // the array. Create a map associating this number with the original value.\n\
    \    let mut ones_count: HashMap<isize, isize> = HashMap::new();\n    for value\
    \ in arr.iter() {\n        let mut ones = 0;\n        let mut num = *value;\n\
    \        while num > 0 {\n            ones += (num & 1) as isize;\n          \
    \  num >>= 1;\n        }\n        ones_count.insert(*value, ones);\n    }\n\n\
    \    // Sort the array in reverse order according to the number of ones, then\n\
    \    // according to the original value.\n    let mut sorted = arr.clone();\n\
    \    sorted.sort_by(|a, b| {\n        let ones_a = ones_count.get(a).unwrap();\n\
    \        let ones_b = ones_count.get(b).unwrap();\n        match ones_a.cmp(ones_b)\
    \ {\n            Ordering::Equal => a.cmp(b),\n            _ => ones_a.cmp(ones_b),\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpf85u2_y1.rs:29:13\n   |\n29 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0412]:\
    \ cannot find type `HashMap` in this scope\n  --> /tmp/tmpf85u2_y1.rs:11:25\n\
    \   |\n11 |     let mut ones_count: HashMap<isize, isize> = HashMap::new();\n\
    \   |                         ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpf85u2_y1.rs:11:49\n\
    \   |\n11 |     let mut ones_count: HashMap<isize, isize> = HashMap::new();\n\
    \   |                                                 ^^^^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v: Vec<(usize, isize)> = arr.iter().map(|&x| (to_bin(x), x)).collect();\n\
    \    v.sort_by(|a, b| (a.0).cmp(&b.0));\n    v.iter().map(|&x| x.1).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_bin` in this scope\n --> /tmp/tmpni2k2os3.rs:9:59\n\
    \  |\n9 |     let mut v: Vec<(usize, isize)> = arr.iter().map(|&x| (to_bin(x),\
    \ x)).collect();\n  |                                                        \
    \   ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<_> = arr.into_iter().map(|x| (x, (x as usize).count_ones())).collect();\n\
    \    arr.sort_by(|a, b| {\n        if a.1 == b.1 {\n            a.0.cmp(&b.0)\n\
    \        } else {\n            a.1.cmp(&b.1)\n        }\n    });\n    arr.into_iter().map(|(x,\
    \ _)| x).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpsgjlw0cc.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr_with_ones: Vec<_> = arr\n        .iter()\n        .map(|x| (*x,\
    \ x.count_ones()))\n        .collect();\n    arr_with_ones.sort_by(|a, b| match\
    \ a.1.cmp(&b.1) {\n        Ordering::Equal => a.0.cmp(&b.0),\n        x => x,\n\
    \    });\n    arr_with_ones.iter().map(|x| x.0).collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpr7o3t80u.rs:14:9\n   |\n14 |         Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<(usize, isize)> = arr.into_iter().map(|i| {\n        let\
    \ ones = i.to_string().chars().filter(|c| *c == '1').count();\n        (ones,\
    \ i)\n    }).collect();\n    arr.sort_by(|a, b| {\n        let ones = a.0.cmp(&b.0);\n\
    \        if ones == std::cmp::Ordering::Equal {\n            a.1.cmp(&b.1)\n \
    \       } else {\n            ones\n        }\n    });\n    arr.into_iter().map(|(_,\
    \ i)| i).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 5, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp2rlqq2et.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut bin_arr: Vec<(String, isize)> = arr.iter().map(|x| (format!(\"{:b}\"\
    , x), *x)).collect();\n    bin_arr.sort_by(|x, y| x.0.chars().filter(|c| *c ==\
    \ '1').count().cmp(&y.0.chars().filter(|c| *c == '1').count()));\n    bin_arr.sort_by(|x,\
    \ y| x.1.cmp(&y.1));\n    bin_arr.iter().map(|x| x.1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpl_dpnf1t.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr_ones = arr.clone();\n    arr_ones.sort_by(|a, b| {\n        let\
    \ ones_a = a.count_ones();\n        let ones_b = b.count_ones();\n        ones_a.cmp(&ones_b).then(a.cmp(b))\n\
    \    });\n    arr_ones\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpur9qmr6y.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    use std::collections::HashMap;\n    use std::cmp::Ordering;\n\n    let mut\
    \ ones_map: HashMap<isize, usize> = HashMap::new();\n    for num in arr.clone()\
    \ {\n        let mut x = num;\n        let mut count = 0;\n        while x > 0\
    \ {\n            if x % 2 == 1 {\n                count += 1;\n            }\n\
    \            x /= 2;\n        }\n        ones_map.insert(num, count);\n    }\n\
    \n    let mut sorted_vec: Vec<isize> = arr.clone();\n    sorted_vec.sort_by(|a,\
    \ b| {\n        let ones_a = ones_map.get(a).unwrap();\n        let ones_b = ones_map.get(b).unwrap();\n\
    \        match ones_a.cmp(ones_b) {\n            Ordering::Equal => a.cmp(b),\n\
    \            x => x,\n        }\n    });\n    sorted_vec\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpx0_nxvat.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let binary = arr.iter().map(|x| x.to_string(2));\n    let ones = binary.map(|x|\
    \ x.chars().filter(|y| *y == '1').count());\n    let sort = (arr, ones)\n    \
    \    .into_iter()\n        .sorted_by(|x, y| x.1.cmp(&y.1).then(x.0.cmp(&y.0)));\n\
    \    sort.into_iter().map(|x| x.0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpbjggal1g.rs:9:39\n     |\n9    |     let binary = arr.iter().map(|x|\
    \ x.to_string(2));\n     |                                       ^^^^^^^^^ - supplied\
    \ 1 argument\n     |                                       |\n     |         \
    \                              expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0599]: the method `into_iter` exists for tuple\
    \ `(Vec<isize>, Map<Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpbjggal1g.rs:9:33:\
    \ 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27: 10:70]>)`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpbjggal1g.rs:12:10\n   |\n12 |         .into_iter()\n\
    \   |          ^^^^^^^^^ method cannot be called on `(Vec<isize>, Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpbjggal1g.rs:9:33: 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27:\
    \ 10:70]>)` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `(Vec<isize>, Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpbjggal1g.rs:9:33: 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27:\
    \ 10:70]>): Iterator`\n           which is required by `(Vec<isize>, Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpbjggal1g.rs:9:33: 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27:\
    \ 10:70]>): IntoIterator`\n           `&(Vec<isize>, Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpbjggal1g.rs:9:33: 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27:\
    \ 10:70]>): Iterator`\n           which is required by `&(Vec<isize>, Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpbjggal1g.rs:9:33: 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27:\
    \ 10:70]>): IntoIterator`\n           `&mut (Vec<isize>, Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpbjggal1g.rs:9:33: 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27:\
    \ 10:70]>): Iterator`\n           which is required by `&mut (Vec<isize>, Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpbjggal1g.rs:9:33: 9:51]>, [closure@/tmp/tmpbjggal1g.rs:10:27:\
    \ 10:70]>): IntoIterator`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        num_ones(*a).cmp(&num_ones(*b))\n\
    \            .then(a.cmp(b))\n    });\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_ones` in this scope\n  --> /tmp/tmpfsrnl0nl.rs:11:9\n\
    \   |\n11 |         num_ones(*a).cmp(&num_ones(*b))\n   |         ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `num_ones` in this\
    \ scope\n  --> /tmp/tmpfsrnl0nl.rs:11:27\n   |\n11 |         num_ones(*a).cmp(&num_ones(*b))\n\
    \   |                           ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    use std::cmp::Ordering;\n    arr.iter()\n        .map(|x| {\n           \
    \ let mut ones = 0;\n            let mut c = *x;\n            while c > 0 {\n\
    \                ones += c & 1;\n                c >>= 1;\n            }\n   \
    \         (ones, *x)\n        })\n        .collect::<Vec<(isize, isize)>>()\n\
    \        .sort_by(|a, b| match a.0.cmp(&b.0) {\n            Ordering::Equal =>\
    \ a.1.cmp(&b.1),\n            res => res,\n        })\n        .iter()\n     \
    \   .map(|x| x.1)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmptupd3swn.rs:25:10\n   |\n25 |         .iter()\n   |   \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|n| (n, format!(\"{:b}\", n).chars().filter(|&x|\
    \ x == '1').count()))\n        .collect::<Vec<_>>()\n        .sort_by(|a, b| {\n\
    \            let (n1, c1) = a;\n            let (n2, c2) = b;\n            match\
    \ c1.cmp(&c2) {\n                Ordering::Equal => n1.cmp(&n2),\n           \
    \     o => o,\n            }\n        })\n        .into_iter()\n        .map(|(n,\
    \ _)| n)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpb8ecmhng.rs:16:17\n   |\n16 |                 Ordering::Equal => n1.cmp(&n2),\n\
    \   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmpb8ecmhng.rs:20:10\n   |\n20 |       \
    \  .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \           which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn count_ones(i: isize) -> usize {\n        i.count_ones() as usize\n   \
    \ }\n\n    fn index_ones(i: isize) -> usize {\n        i.index_ones() as usize\n\
    \    }\n\n    fn to_array(i: isize) -> [u8; 64] {\n        i.to_le_bytes()\n \
    \   }\n\n    arr.iter()\n        .map(|&i| (i, count_ones(i), index_ones(i), to_array(i)))\n\
    \        .sorted_by(|&(_, n, i, l), &(_, m, j, r)| match n.cmp(&m) {\n       \
    \     Ordering::Equal => match l[i].cmp(&r[j]) {\n                Ordering::Equal\
    \ => j.cmp(&i),\n                c => c,\n            },\n            c => c,\n\
    \        })\n        .map(|(i, _, _, _)| i)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpbvefqrdm.rs:24:13\n   |\n24 |             Ordering::Equal => match l[i].cmp(&r[j])\
    \ {\n   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpbvefqrdm.rs:25:17\n\
    \   |\n25 |                 Ordering::Equal => j.cmp(&i),\n   |              \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmpbvefqrdm.rs:23:10\n\
    \   |\n23 |         .sorted_by(|&(_, n, i, l), &(_, m, j, r)| match n.cmp(&m)\
    \ {\n   |          ^^^^^^^^^ method not found in `Map<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmpbvefqrdm.rs:22:14: 22:65]>`\n\nerror[E0599]: no method named\
    \ `index_ones` found for type `isize` in the current scope\n  --> /tmp/tmpbvefqrdm.rs:14:11\n\
    \   |\n14 |         i.index_ones() as usize\n   |           ^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbvefqrdm.rs:18:9\n\
    \   |\n17 |     fn to_array(i: isize) -> [u8; 64] {\n   |                    \
    \          -------- expected `[u8; 64]` because of return type\n18 |         i.to_le_bytes()\n\
    \   |         ^^^^^^^^^^^^^^^ expected an array with a fixed size of 64 elements,\
    \ found one with 8 elements\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut mut_arr = arr.clone();\n    let mut ones_vec: Vec<(usize, isize)>\
    \ = vec![];\n    let mut final_vec: Vec<isize> = vec![];\n\n    for num in arr\
    \ {\n        ones_vec.push((num.count_ones(), num));\n    }\n\n    ones_vec.sort();\n\
    \n    for num in ones_vec {\n        final_vec.push(num.1);\n    }\n\n    final_vec\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpijrw803h.rs:14:24\n   |\n\
    14 |         ones_vec.push((num.count_ones(), num));\n   |                   \
    \     ^^^^^^^^^^^^^^^^ expected `usize`, found `u32`\n   |\nhelp: you can convert\
    \ a `u32` to a `usize` and panic if the converted value doesn't fit\n   |\n14\
    \ |         ones_vec.push((num.count_ones().try_into().unwrap(), num));\n   |\
    \                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // Your code goes here\n    let mut neg: Vec<isize> = Vec::new();\n    let\
    \ mut pos: Vec<isize> = Vec::new();\n    for n in arr {\n        if n < 0 {\n\
    \            neg.push(n);\n        } else {\n            pos.push(n);\n      \
    \  }\n    }\n    neg.sort();\n    neg.reverse();\n    pos.sort();\n    let mut\
    \ ans: Vec<isize> = Vec::new();\n    ans.append(&mut neg);\n    ans.append(&mut\
    \ pos);\n    ans\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpkomlo_dw.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr.clone();\n    v.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()));\n\
    \    v\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpmrekwe5o.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|x, y| x.count_ones().cmp(&y.count_ones()).then(x.cmp(y)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnntpudkz.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|n| (n, n.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|x, y| (x.1, x.0).cmp(&(y.1, y.0)));\n    arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `arr`\n   --> /tmp/tmpqlu2ki22.rs:13:5\n\
    \    |\n8   | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    |          \
    \     --- move occurs because `arr` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n9   |     arr.into_iter()\n    |         ----------- `arr`\
    \ moved due to this method call\n...\n13  |     arr\n    |     ^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `arr`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut counts = HashMap::new();\n    let mut arr_copy = arr.clone();\n \
    \   arr_copy.sort();\n    arr_copy.iter().for_each(|i| {\n        let c = i.count_ones();\n\
    \        if counts.contains_key(&c) {\n            let mut v = counts.get_mut(&c).unwrap();\n\
    \            v.push(*i);\n        } else {\n            counts.insert(c, vec![*i]);\n\
    \        }\n    });\n    let mut keys: Vec<_> = counts.keys().collect();\n   \
    \ keys.sort();\n    let mut result = vec![];\n    keys.iter().for_each(|k| {\n\
    \        let mut v = counts.get(k).unwrap();\n        v.sort();\n        result.append(v);\n\
    \    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpef0ipuor.rs:9:22\n  |\n9 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut one_counts: Vec<_> = arr.iter().map(|num| {\n        num.abs()\n\
    \            .to_string(2)\n            .chars()\n            .map(|c| c.to_digit(10).unwrap())\n\
    \            .sum::<u32>()\n    }).collect();\n    let mut sorted_arr = arr.clone();\n\
    \    sorted_arr.sort_by(|a, b| {\n        let a_ones = one_counts[*a as usize];\n\
    \        let b_ones = one_counts[*b as usize];\n        if a_ones != b_ones {\n\
    \            a_ones.cmp(&b_ones)\n        } else {\n            a.cmp(b)\n   \
    \     }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp678128yk.rs:11:14\n     |\n11   |             .to_string(2)\n\
    \     |              ^^^^^^^^^ - supplied 1 argument\n     |              |\n\
    \     |              expected 0 arguments\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut a: Vec<isize> = arr.iter().map(|x| x.clone()).collect();\n    a.sort_by(|x,\
    \ y| x.count_ones().cmp(&y.count_ones()));\n    a\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpgsc9rn2j.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut list = arr.clone();\n    list.sort_by(|a, b| count_one(a) - count_one(b));\n\
    \    list\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_one` in this scope\n  --> /tmp/tmpksgatjsk.rs:10:25\n\
    \   |\n10 |     list.sort_by(|a, b| count_one(a) - count_one(b));\n   |      \
    \                   ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `count_one` in this scope\n  --> /tmp/tmpksgatjsk.rs:10:40\n \
    \  |\n10 |     list.sort_by(|a, b| count_one(a) - count_one(b));\n   |       \
    \                                 ^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        match a_ones.cmp(&b_ones) {\n \
    \           Ordering::Equal => a.cmp(b),\n            Ordering::Less => Ordering::Less,\n\
    \            Ordering::Greater => Ordering::Greater,\n        }\n    });\n   \
    \ arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpz8oqu1q5.rs:14:13\n   |\n14 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpz8oqu1q5.rs:15:13\n\
    \   |\n15 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpz8oqu1q5.rs:15:31\n   |\n15 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpz8oqu1q5.rs:16:13\n   |\n16\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpz8oqu1q5.rs:16:34\n   |\n16 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        format!(\"{:b}\", a).chars().count().cmp(&format!(\"\
    {:b}\", b).chars().count())\n            .then(a.cmp(b))\n    });\n    arr\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp_iocd4s1.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| {\n            let x = x.abs();\n     \
    \       (x, x.count_ones())\n        })\n        .sorted_by(|&(x1, c1), &(x2,\
    \ c2)| {\n            if c1 != c2 {\n                c1.cmp(&c2)\n           \
    \ } else {\n                x1.cmp(&x2)\n            }\n        })\n        .map(|(x,\
    \ _)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp5zabtsio.rs:14:10\n   |\n14 |         .sorted_by(|&(x1,\
    \ c1), &(x2, c2)| {\n   |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmp5zabtsio.rs:10:14: 13:10]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut unique = HashMap::new();\n    for v in arr.iter() {\n        let\
    \ mut ones = 0;\n        let mut vv = *v;\n        while vv > 0 {\n          \
    \  if vv % 2 != 0 {\n                ones += 1;\n            }\n            vv\
    \ /= 2;\n        }\n        let vec = unique.entry(ones).or_insert(Vec::new());\n\
    \        vec.push(*v);\n    }\n    let mut res = Vec::new();\n    let mut ones\
    \ = 0;\n    while res.len() < arr.len() {\n        if let Some(vec) = unique.get(&ones)\
    \ {\n            for v in vec.iter() {\n                res.push(*v);\n      \
    \      }\n        }\n        ones += 1;\n    }\n    res\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp8ajt3oyg.rs:9:22\n  |\n9 |     let mut unique = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr.clone();\n    v.sort_by(|a, b| format!(\"{:b}\", a).len().cmp(&format!(\"\
    {:b}\", b).len()));\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpv80ldzwi.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut unsorted: Vec<(usize, isize)> = arr.iter().map(|&x| (ones(x), x)).collect();\n\
    \    unsorted.sort_by(|&a, &b| a.0.cmp(&b.0).then(a.1.cmp(&b.1)));\n    unsorted.iter().map(|&(_,\
    \ x)| x).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ones` in this scope\n --> /tmp/tmp32gr2_vr.rs:9:66\n\
    \  |\n9 |     let mut unsorted: Vec<(usize, isize)> = arr.iter().map(|&x| (ones(x),\
    \ x)).collect();\n  |                                                        \
    \          ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<(usize, isize)> = arr.into_iter().map(|x| (x.count_ones(),\
    \ x)).collect();\n    arr.sort_by(|a, b| {\n        if a.0 == b.0 {\n        \
    \    a.1.cmp(&b.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n \
    \   });\n    arr.into_iter().map(|(_, x)| x).collect()\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n    --> /tmp/tmp3z2zbs5p.rs:9:85\n\
    \     |\n9    |     let mut arr: Vec<(usize, isize)> = arr.into_iter().map(|x|\
    \ (x.count_ones(), x)).collect();\n     |                                    \
    \                                                 ^^^^^^^ value of type `Vec<(usize,\
    \ isize)>` cannot be built from `std::iter::Iterator<Item=(u32, isize)>`\n   \
    \  |\n     = help: the trait `FromIterator<(u32, isize)>` is not implemented for\
    \ `Vec<(usize, isize)>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut map = arr.iter().map(|x| (x, format!(\"{:b}\", x).chars().filter(|&x|\
    \ x == '1').count())).collect::<Vec<(&isize, usize)>>();\n    map.sort_by(|&(_,\
    \ ref a), &(_, ref b)| a.cmp(b));\n    map.iter().map(|&(a, _)| *a).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpk0sde027.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let a_ones\
    \ = count_ones(*a);\n        let b_ones = count_ones(*b);\n        if a_ones ==\
    \ b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpher08dpi.rs:11:22\n\
    \   |\n11 |         let a_ones = count_ones(*a);\n   |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n  --> /tmp/tmpher08dpi.rs:12:22\n   |\n12 |         let b_ones =\
    \ count_ones(*b);\n   |                      ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = vec![];\n    let mut v = vec![];\n    for i in arr {\n \
    \       let bits = i.abs().count_ones();\n        if v.len() < bits as usize +\
    \ 1 {\n            v.push(vec![]);\n        }\n        v[bits as usize].push(i);\n\
    \    }\n    for i in 0..v.len() {\n        v[i].sort();\n        result.append(&mut\
    \ v[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 1 but the index\
    \ is 1', /tmp/tmpkj2ta5au.rs:16:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_count = a.count_ones();\n\
    \        let b_count = b.count_ones();\n        a_count.cmp(&b_count).then(a.cmp(b))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpp90x382n.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn num_of_ones(n: isize) -> usize {\n        n.count_ones() as usize\n  \
    \  }\n\n    arr.into_iter()\n        .map(|n| (n, num_of_ones(n)))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|&(x, y), &(x1, y1)| match y.cmp(&y1) {\n            Ordering::Equal\
    \ => x.cmp(&x1),\n            Ordering::Less => Ordering::Less,\n            Ordering::Greater\
    \ => Ordering::Greater,\n        })\n        .into_iter()\n        .map(|(n, _)|\
    \ n)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp8pu0yday.rs:17:13\n   |\n17 |             Ordering::Equal => x.cmp(&x1),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp8pu0yday.rs:18:13\n\
    \   |\n18 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp8pu0yday.rs:18:31\n   |\n18 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp8pu0yday.rs:19:13\n   |\n19\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp8pu0yday.rs:19:34\n   |\n19 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]: `()`\
    \ is not an iterator\n  --> /tmp/tmp8pu0yday.rs:21:10\n   |\n21 |         .into_iter()\n\
    \   |          ^^^^^^^^^ `()` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `(): Iterator`\n           which\
    \ is required by `(): IntoIterator`\n           `&(): Iterator`\n           which\
    \ is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n       \
    \    which is required by `&mut (): IntoIterator`\n\nerror: aborting due to 6\
    \ previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    use std::collections::BinaryHeap;\n    use std::cmp::Reverse;\n\n    // sort\
    \ by number of ones, then by decimal value\n    let mut heap = BinaryHeap::new();\n\
    \    for n in arr {\n        let mut n = n;\n        let mut ones = 0;\n     \
    \   while n > 0 {\n            if n % 2 == 1 {\n                ones += 1;\n \
    \           }\n            n /= 2;\n        }\n        heap.push(Reverse((ones,\
    \ n)));\n    }\n\n    let mut result = Vec::new();\n    while let Some(Reverse((_,\
    \ n))) = heap.pop() {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp4su27qez.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr.iter().enumerate().map(|(i, x)| (i, x)).collect::<Vec<_>>();\n\
    \    v.sort_by(|x, y| {\n        let xbits = x.1.count_ones();\n        let ybits\
    \ = y.1.count_ones();\n        match xbits.cmp(&ybits) {\n            Ordering::Equal\
    \ => x.0.cmp(&y.0),\n            r => r,\n        }\n    });\n    v.iter().map(|(_,\
    \ &x)| x).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp5ec5znva.rs:14:13\n   |\n14 |             Ordering::Equal => x.0.cmp(&y.0),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = arr.clone();\n    ret.sort_by(|a, b| (count_ones(*a), *a).cmp(&(count_ones(*b),\
    \ *b)));\n    ret\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmp1hm1tsbm.rs:10:25\n\
    \   |\n10 |     ret.sort_by(|a, b| (count_ones(*a), *a).cmp(&(count_ones(*b),\
    \ *b)));\n   |                         ^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmp1hm1tsbm.rs:10:51\n\
    \   |\n10 |     ret.sort_by(|a, b| (count_ones(*a), *a).cmp(&(count_ones(*b),\
    \ *b)));\n   |                                                   ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        match\
    \ a.count_ones().cmp(&b.count_ones()) {\n            Ordering::Equal => a.cmp(b),\n\
    \            x => x,\n        }\n    });\n    sorted\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp_fc0ttdt.rs:12:13\n   |\n12 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        get_ones(*a).cmp(&get_ones(*b))\n\
    \            .then(a.cmp(b))\n    });\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_ones` in this scope\n  --> /tmp/tmp9bsx6b1o.rs:11:9\n\
    \   |\n11 |         get_ones(*a).cmp(&get_ones(*b))\n   |         ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `get_ones` in this\
    \ scope\n  --> /tmp/tmp9bsx6b1o.rs:11:27\n   |\n11 |         get_ones(*a).cmp(&get_ones(*b))\n\
    \   |                           ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|a| (*a, a.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| {\n            if a.1 == b.1 {\n                a.0.cmp(&b.0)\n\
    \            } else {\n                a.1.cmp(&b.1)\n            }\n        })\n\
    \        .into_iter()\n        .map(|a| a.0)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmp4cdsaudl.rs:19:10\n\
    \   |\n19 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut one_count: Vec<(usize, isize)> = arr.iter().map(|x| (x.count_ones(),\
    \ *x)).collect();\n    one_count.sort();\n    one_count.iter().map(|(_, y)| *y).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n    --> /tmp/tmpfr048lrs.rs:9:87\n\
    \     |\n9    |     let mut one_count: Vec<(usize, isize)> = arr.iter().map(|x|\
    \ (x.count_ones(), *x)).collect();\n     |                                   \
    \                                                    ^^^^^^^ value of type `Vec<(usize,\
    \ isize)>` cannot be built from `std::iter::Iterator<Item=(u32, isize)>`\n   \
    \  |\n     = help: the trait `FromIterator<(u32, isize)>` is not implemented for\
    \ `Vec<(usize, isize)>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    if arr.len() < 2 {\n        return arr;\n    }\n    let n = arr.len();\n\
    \    let mut tmp = arr.clone();\n    tmp.sort_by(|a, b| {\n        let count_a\
    \ = count_ones(*a);\n        let count_b = count_ones(*b);\n        if count_a\
    \ == count_b {\n            a.cmp(b)\n        } else {\n            count_a.cmp(&count_b)\n\
    \        }\n    });\n    let mut res = vec![0; n];\n    res[..n].clone_from_slice(&tmp[..n]);\n\
    \    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpsonq31ox.rs:15:23\n\
    \   |\n15 |         let count_a = count_ones(*a);\n   |                      \
    \ ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `count_ones`\
    \ in this scope\n  --> /tmp/tmpsonq31ox.rs:16:23\n   |\n16 |         let count_b\
    \ = count_ones(*b);\n   |                       ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|x, y| {\n        let x_count = x.count_ones();\n\
    \        let y_count = y.count_ones();\n        match x_count.cmp(&y_count) {\n\
    \            Ordering::Equal => x.cmp(y),\n            Ordering::Less => Ordering::Less,\n\
    \            Ordering::Greater => Ordering::Greater,\n        }\n    });\n   \
    \ arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp_ttofgjf.rs:14:13\n   |\n14 |             Ordering::Equal => x.cmp(y),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp_ttofgjf.rs:15:13\n\
    \   |\n15 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp_ttofgjf.rs:15:31\n   |\n15 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp_ttofgjf.rs:16:13\n   |\n16\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp_ttofgjf.rs:16:34\n   |\n16 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones: Vec<usize> = arr.iter().map(|x| x.count_ones()).collect();\n\
    \    let mut neg: Vec<isize> = arr.iter().map(|x| *x).collect();\n    ones.sort();\n\
    \    ones.dedup();\n    let mut new: Vec<isize> = Vec::new();\n    for i in ones\
    \ {\n        for j in &neg {\n            if i == j.count_ones() {\n         \
    \       new.push(*j);\n            }\n        }\n    }\n    new\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<usize>` cannot be built from an iterator\
    \ over elements of type `u32`\n    --> /tmp/tmpom3nmgfg.rs:9:67\n     |\n9   \
    \ |     let mut ones: Vec<usize> = arr.iter().map(|x| x.count_ones()).collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<usize>` cannot be built from `std::iter::Iterator<Item=u32>`\n\
    \     |\n     = help: the trait `FromIterator<u32>` is not implemented for `Vec<usize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpom3nmgfg.rs:16:21\n\
    \   |\n16 |             if i == j.count_ones() {\n   |                     ^^^^^^^^^^^^^^\
    \ expected `usize`, found `u32`\n   |\nhelp: you can convert a `u32` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |             if i ==\
    \ j.count_ones().try_into().unwrap() {\n   |                                 \
    \  ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr.clone();\n    v.sort_by(|a, b| {\n        if a.count_ones()\
    \ == b.count_ones() {\n            a.cmp(b)\n        } else {\n            a.count_ones().cmp(&b.count_ones())\n\
    \        }\n    });\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpcn4_60jn.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut vec = arr.clone();\n    vec.sort_by(|a, b| {\n        let a = a.abs();\n\
    \        let b = b.abs();\n        let ones = |x: isize| {\n            let mut\
    \ count = 0;\n            let mut temp = x;\n            while temp > 0 {\n  \
    \              if temp % 2 == 1 {\n                    count += 1;\n         \
    \       }\n                temp /= 2;\n            }\n            count\n    \
    \    };\n        let ones_a = ones(a);\n        let ones_b = ones(b);\n      \
    \  if ones_a == ones_b {\n            a.cmp(&b)\n        } else {\n          \
    \  ones_a.cmp(&ones_b)\n        }\n    });\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -4, -3, -5, -6]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp0yo4win4.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, format!(\"{:b}\", x).chars().filter(|c|\
    \ *c == '1').count()))\n        .collect::<Vec<_>>()\n        .sort_by(|a, b|\
    \ (a.1, b.0).cmp(&(b.1, a.0)))\n        .into_iter()\n        .map(|x| x.0)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmp5ww63ssa.rs:13:10\n\
    \   |\n13 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let l: Vec<(usize, isize)> = arr.iter().map(|x| {\n        let mut num =\
    \ *x;\n        let mut ones = 0;\n        while num > 0 {\n            ones +=\
    \ num & 1;\n            num >>= 1;\n        }\n        (ones, *x)\n    }).collect();\n\
    \    l.iter().sorted_by(|a, b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    }).map(|x| x.1).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(isize, isize)`\n    --> /tmp/tmpfojesz2y.rs:17:8\n\
    \     |\n17   |     }).collect();\n     |        ^^^^^^^ value of type `Vec<(usize,\
    \ isize)>` cannot be built from `std::iter::Iterator<Item=(isize, isize)>`\n \
    \    |\n     = help: the trait `FromIterator<(isize, isize)>` is not implemented\
    \ for `Vec<(usize, isize)>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]: no method\
    \ named `sorted_by` found for struct `std::slice::Iter` in the current scope\n\
    \  --> /tmp/tmpfojesz2y.rs:18:14\n   |\n18 |     l.iter().sorted_by(|a, b| {\n\
    \   |              ^^^^^^^^^ method not found in `std::slice::Iter<'_, (usize,\
    \ isize)>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v: Vec<(usize, isize)> = arr.iter().map(|&x| (count_ones(x), x)).collect();\n\
    \    v.sort();\n    v.iter().map(|(_, x)| *x).collect()\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpyqtpw8ob.rs:9:59\n\
    \  |\n9 |     let mut v: Vec<(usize, isize)> = arr.iter().map(|&x| (count_ones(x),\
    \ x)).collect();\n  |                                                        \
    \   ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr;\n    res.sort_by(|a, b| {\n        let ones_a = a.count_ones();\n\
    \        let ones_b = b.count_ones();\n        if ones_a == ones_b {\n       \
    \     a.cmp(b)\n        } else {\n            ones_a.cmp(&ones_b)\n        }\n\
    \    });\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpea6uqifa.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        a_ones.cmp(&b_ones).then(a.cmp(b))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphldw_mhs.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|(x1, count1), (x2, count2)| {\n            if count1 == count2\
    \ {\n                Ord::cmp(x1, x2)\n            } else {\n                Ord::cmp(count1,\
    \ count2)\n            }\n        })\n        .into_iter()\n        .map(|(x,\
    \ _)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpx_pu7hsh.rs:19:10\n\
    \   |\n19 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let a_digits\
    \ = a.to_string()\n            .chars()\n            .filter(|ch| *ch == '1')\n\
    \            .count();\n        let b_digits = b.to_string()\n            .chars()\n\
    \            .filter(|ch| *ch == '1')\n            .count();\n        a_digits.cmp(&b_digits).then(a.cmp(b))\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 5, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpi24cj59i.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_num_ones = a.count_ones();\n\
    \        let b_num_ones = b.count_ones();\n        if a_num_ones == b_num_ones\
    \ {\n            a.cmp(b)\n        } else {\n            a_num_ones.cmp(&b_num_ones)\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpovmrh9f_.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v: Vec<(usize, isize)> = arr.iter().map(|n| (n.count_ones(), *n)).collect();\n\
    \    v.sort();\n    v.iter().map(|v| v.1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n    --> /tmp/tmpeyw2vw0l.rs:9:79\n\
    \     |\n9    |     let mut v: Vec<(usize, isize)> = arr.iter().map(|n| (n.count_ones(),\
    \ *n)).collect();\n     |                                                    \
    \                           ^^^^^^^ value of type `Vec<(usize, isize)>` cannot\
    \ be built from `std::iter::Iterator<Item=(u32, isize)>`\n     |\n     = help:\
    \ the trait `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<isize> = arr;\n    arr.sort_by(|a, b| {\n        if a.count_ones()\
    \ != b.count_ones() {\n            return a.count_ones().cmp(&b.count_ones());\n\
    \        }\n        a.cmp(b)\n    });\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpfuakv4kk.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn num_ones(n: isize) -> usize {\n        format!(\"{:b}\", n).matches('1').count()\n\
    \    }\n\n    arr.into_iter().map(|n| (num_ones(n), n)).sorted().into_iter().map(|(_,\
    \ n)| n).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpsnfzk7wv.rs:13:47\n   |\n13 |     arr.into_iter().map(|n|\
    \ (num_ones(n), n)).sorted().into_iter().map(|(_, n)| n).collect()\n   |     \
    \                                          ^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpsnfzk7wv.rs:13:25: 13:45]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones: Vec<(usize, isize)> = vec![];\n    let mut zeros: Vec<isize>\
    \ = vec![];\n    let mut base = 1;\n    while base < arr.len() {\n        base\
    \ *= 2;\n    }\n    base /= 2;\n    while base > 0 {\n        let mut head = base;\n\
    \        while head < arr.len() {\n            let mut r = 0;\n            let\
    \ mut i = head;\n            while i > 0 && i % 2 == 1 {\n                r +=\
    \ 1;\n                i /= 2;\n            }\n            if r > 0 {\n       \
    \         ones.push((r, arr[head]));\n            } else {\n                zeros.push(arr[head]);\n\
    \            }\n            head += 1;\n        }\n        ones.sort_by(|a, b|\
    \ {\n            if a.0 == b.0 {\n                a.1.cmp(&b.1)\n            }\
    \ else {\n                a.0.cmp(&b.0)\n            }\n        });\n        ones.iter().for_each(|x|\
    \ {\n            arr[x.0] = x.1;\n        });\n        let mut i = 0;\n      \
    \  for x in zeros.iter() {\n            arr[ones.len() + i] = *x;\n          \
    \  i += 1;\n        }\n        base /= 2;\n        ones.clear();\n        zeros.clear();\n\
    \    }\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `arr` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpecuo7vz_.rs:40:13\n   |\n8  | fn sort_array(arr: Vec<isize>)\
    \ -> Vec<isize> {\n   |               --- help: consider changing this to be mutable:\
    \ `mut arr`\n...\n40 |             arr[x.0] = x.1;\n   |             ^^^ cannot\
    \ borrow as mutable\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is\
    \ not declared as mutable\n  --> /tmp/tmpecuo7vz_.rs:44:13\n   |\n8  | fn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n   |               --- help: consider changing\
    \ this to be mutable: `mut arr`\n...\n44 |             arr[ones.len() + i] = *x;\n\
    \   |             ^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .cloned()\n        .sorted_by(|a, b| {\n            if\
    \ a.count_ones() == b.count_ones() {\n                a.cmp(b)\n            }\
    \ else {\n                a.count_ones().cmp(&b.count_ones())\n            }\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Cloned` in\
    \ the current scope\n  --> /tmp/tmpfpe9zyut.rs:11:10\n   |\n11 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    if arr.is_empty() {\n        return arr;\n    }\n    let mut ones = Vec::new();\n\
    \    let mut zeros = Vec::new();\n    for n in arr {\n        let mut cnt = 0;\n\
    \        let mut m = n;\n        while m > 0 {\n            cnt += m % 2;\n  \
    \          m /= 2;\n        }\n        if cnt == 0 {\n            zeros.push(n);\n\
    \        } else {\n            ones.push((cnt, n));\n        }\n    }\n    ones.sort();\n\
    \    let mut res = Vec::new();\n    for (cnt, n) in ones {\n        res.push(n);\n\
    \    }\n    res.extend(zeros);\n    res\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -3, -4, -5, -6]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5s996vq5.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn cmp(a: &isize, b: &isize) -> cmp::Ordering {\n        let a_bin = format!(\"\
    {:b}\", a);\n        let b_bin = format!(\"{:b}\", b);\n        match a_bin.matches('1').count().cmp(&b_bin.matches('1').count())\
    \ {\n            cmp::Ordering::Equal => a.cmp(&b),\n            x => x,\n   \
    \     }\n    }\n    let mut v = arr;\n    v.sort_by(cmp);\n    v\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \ --> /tmp/tmp7nva7kix.rs:9:37\n  |\n9 |     fn cmp(a: &isize, b: &isize) -> cmp::Ordering\
    \ {\n  |                                     ^^^ use of undeclared crate or module\
    \ `cmp`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `cmp`\n  --> /tmp/tmp7nva7kix.rs:13:13\n   |\n13 |             cmp::Ordering::Equal\
    \ => a.cmp(&b),\n   |             ^^^ use of undeclared crate or module `cmp`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = format!(\"\
    {:b}\", a).matches('1').count();\n        let b_ones = format!(\"{:b}\", b).matches('1').count();\n\
    \        match a_ones.cmp(&b_ones) {\n            std::cmp::Ordering::Equal =>\
    \ a.cmp(b),\n            _ => a_ones.cmp(&b_ones),\n        }\n    });\n    arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmptm4pbv_q.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<_> = arr.into_iter().map(|a| (a, count_bits(a))).collect();\n\
    \    arr.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    arr.into_iter().map(|(a,\
    \ _)| a).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_bits` in this scope\n --> /tmp/tmpo2jjn9s5.rs:9:55\n\
    \  |\n9 |     let mut arr: Vec<_> = arr.into_iter().map(|a| (a, count_bits(a))).collect();\n\
    \  |                                                       ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0609]: no field `1` on type `&_`\n  --> /tmp/tmpo2jjn9s5.rs:10:26\n\
    \   |\n10 |     arr.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n   | \
    \                         ^\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| {\n        match (a.count_ones(),\
    \ b.count_ones()) {\n            (a, b) if a > b => Ordering::Less,\n        \
    \    (a, b) if a < b => Ordering::Greater,\n            _ => a.cmp(b),\n     \
    \   }\n    });\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n \
    \   assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpy9c4xdk_.rs:12:32\n   |\n12 |             (a, b) if a > b => Ordering::Less,\n\
    \   |                                ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpy9c4xdk_.rs:13:32\n\
    \   |\n13 |             (a, b) if a < b => Ordering::Greater,\n   |          \
    \                      ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // Your code here!\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 2, 3, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpx1dkt8na.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    use std::cmp::Ordering;\n    let mut res = arr.clone();\n    res.sort_by(|a,\
    \ b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            return a.cmp(b);\n        }\n    \
    \    a_ones.cmp(&b_ones)\n    });\n    res\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5m0sblba.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let count_a\
    \ = count_ones(*a);\n        let count_b = count_ones(*b);\n        if count_a\
    \ == count_b {\n            return a.cmp(b);\n        }\n        count_a.cmp(&count_b)\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpsw24lbct.rs:11:23\n\
    \   |\n11 |         let count_a = count_ones(*a);\n   |                      \
    \ ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `count_ones`\
    \ in this scope\n  --> /tmp/tmpsw24lbct.rs:12:23\n   |\n12 |         let count_b\
    \ = count_ones(*b);\n   |                       ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1slt2h85.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|&(a, b), &(c, d)| if b == d { a.cmp(&c) } else { b.cmp(&d)\
    \ })\n        .into_iter()\n        .map(|(a, _)| a)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmp0c0eb5wz.rs:13:10\n\
    \   |\n13 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|x, y| {\n        let x_ones\
    \ = x.count_ones();\n        let y_ones = y.count_ones();\n        if x_ones ==\
    \ y_ones {\n            return x.cmp(y);\n        }\n        x_ones.cmp(&y_ones)\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpf2g0hv44.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<_> = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n\
    \    arr.sort_by(|a, b| match (a.1).cmp(&b.1) {\n        Ordering::Equal => a.0.cmp(&b.0),\n\
    \        Ordering::Less => Ordering::Less,\n        Ordering::Greater => Ordering::Greater,\n\
    \    });\n    arr.into_iter().map(|x| x.0).collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp2ons938d.rs:11:9\n   |\n11 |         Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp2ons938d.rs:12:9\n\
    \   |\n12 |         Ordering::Less => Ordering::Less,\n   |         ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmp2ons938d.rs:12:27\n   |\n12 |         Ordering::Less\
    \ => Ordering::Less,\n   |                           ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmp2ons938d.rs:13:9\n   |\n13 |         Ordering::Greater => Ordering::Greater,\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp2ons938d.rs:13:30\n\
    \   |\n13 |         Ordering::Greater => Ordering::Greater,\n   |            \
    \                  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|&x| (x, format!(\"{:b}\", x).chars().filter(|&d|\
    \ d == '1').count()))\n        .sorted_by(|a, b| {\n            if a.1 == b.1\
    \ {\n                a.0.cmp(&b.0)\n            } else {\n                a.1.cmp(&b.1)\n\
    \            }\n        })\n        .map(|(x, _)| x)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpkd2it7_l.rs:11:10\n   |\n11 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpkd2it7_l.rs:10:14: 10:80]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = arr.clone();\n    ret.sort_by(|a, b| {\n        let mut n1\
    \ = *a;\n        let mut n2 = *b;\n        let mut ones1 = 0;\n        let mut\
    \ ones2 = 0;\n        while n1 > 0 {\n            ones1 += n1 % 2;\n         \
    \   n1 /= 2;\n        }\n        while n2 > 0 {\n            ones2 += n2 % 2;\n\
    \            n2 /= 2;\n        }\n        match ones1.cmp(&ones2) {\n        \
    \    Ordering::Less => Ordering::Less,\n            Ordering::Greater => Ordering::Greater,\n\
    \            Ordering::Equal => a.cmp(&b),\n        }\n    });\n    ret\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp2inxb8wo.rs:24:13\n   |\n24 |             Ordering::Less => Ordering::Less,\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp2inxb8wo.rs:24:31\n\
    \   |\n24 |             Ordering::Less => Ordering::Less,\n   |              \
    \                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp2inxb8wo.rs:25:13\n\
    \   |\n25 |             Ordering::Greater => Ordering::Greater,\n   |        \
    \     ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp2inxb8wo.rs:25:34\n   |\n25\
    \ |             Ordering::Greater => Ordering::Greater,\n   |                \
    \                  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp2inxb8wo.rs:26:13\n\
    \   |\n26 |             Ordering::Equal => a.cmp(&b),\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones_and_decimals: Vec<(usize, isize)> =\n        arr.iter().map(|&x|\
    \ (x.count_ones(), x)).collect();\n    ones_and_decimals.sort();\n    ones_and_decimals.iter().map(|(_,\
    \ &x)| x).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n    --> /tmp/tmpv1h7kvdo.rs:10:50\n\
    \     |\n10   |         arr.iter().map(|&x| (x.count_ones(), x)).collect();\n\
    \     |                                                  ^^^^^^^ value of type\
    \ `Vec<(usize, isize)>` cannot be built from `std::iter::Iterator<Item=(u32, isize)>`\n\
    \     |\n     = help: the trait `FromIterator<(u32, isize)>` is not implemented\
    \ for `Vec<(usize, isize)>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv1h7kvdo.rs:12:39\n   |\n12 |     ones_and_decimals.iter().map(|(_,\
    \ &x)| x).collect()\n   |                                       ^^- expected due\
    \ to this\n   |                                       |\n   |                \
    \                       expected `isize`, found reference\n   |              \
    \                         help: you can probably remove the explicit borrow: `x`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones_map: HashMap<isize, isize> = HashMap::new();\n    for n in arr.iter()\
    \ {\n        *ones_map.entry(*n).or_insert(0) += 1;\n    }\n    let mut zeros_only:\
    \ Vec<isize> = arr.iter().filter(|n| n.abs() == 0).map(|n| *n).collect();\n  \
    \  let mut sorted: Vec<isize> = ones_map.keys().map(|n| *n).collect();\n    sorted.sort_by(|x,\
    \ y| {\n        let x_ones = x.abs().count_ones();\n        let y_ones = y.abs().count_ones();\n\
    \        let x_zeros = 64 - x_ones;\n        let y_zeros = 64 - y_ones;\n    \
    \    if x_zeros == y_zeros {\n            if x_ones == y_ones {\n            \
    \    x.cmp(y)\n            } else {\n                x_ones.cmp(&y_ones)\n   \
    \         }\n        } else {\n            x_zeros.cmp(&y_zeros)\n        }\n\
    \    });\n    let mut sorted_ones: Vec<isize> = sorted.iter().map(|n| ones_map[n]\
    \ * *n).collect();\n    sorted_ones.append(&mut zeros_only);\n    sorted_ones\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpjw4hn8u3.rs:9:23\n\
    \  |\n9 |     let mut ones_map: HashMap<isize, isize> = HashMap::new();\n  | \
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpjw4hn8u3.rs:9:47\n\
    \  |\n9 |     let mut ones_map: HashMap<isize, isize> = HashMap::new();\n  | \
    \                                              ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let n = arr.len();\n    let mut ones = vec![0; n];\n    for i in 0..n {\n\
    \        ones[i] = arr[i].count_ones();\n    }\n    let mut index = vec![0; n];\n\
    \    for i in 0..n {\n        index[i] = i;\n    }\n    index.sort_by(|&i, &j|\
    \ {\n        let r = ones[i].cmp(&ones[j]);\n        if r == std::cmp::Ordering::Equal\
    \ {\n            arr[i].cmp(&arr[j])\n        } else {\n            r\n      \
    \  }\n    });\n    let mut ans = vec![0; n];\n    for i in 0..n {\n        ans[i]\
    \ = arr[index[i]];\n    }\n    ans\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpcky2tiv6.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn binary_ones(mut n: isize) -> isize {\n        let mut ret = 0;\n     \
    \   while n > 0 {\n            if n % 2 == 1 {\n                ret += 1;\n  \
    \          }\n            n /= 2;\n        }\n        ret\n    }\n\n    fn sort_ones(a:\
    \ &isize, b: &isize) -> std::cmp::Ordering {\n        let ao = binary_ones(*a);\n\
    \        let bo = binary_ones(*b);\n        if ao > bo {\n            std::cmp::Ordering::Less\n\
    \        } else if ao < bo {\n            std::cmp::Ordering::Greater\n      \
    \  } else {\n            a.cmp(b)\n        }\n    }\n\n    let mut ret = arr.clone();\n\
    \    ret.sort_by(sort_ones);\n    ret\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 1, 2, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmph4urf5zf.rs:39:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = arr.clone();\n    result.sort_by(|a, b| {\n        let (ones_a,\
    \ ones_b) = (a.count_ones(), b.count_ones());\n        if ones_a == ones_b {\n\
    \            return a.cmp(b);\n        }\n        ones_a.cmp(&ones_b)\n    });\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmptyiic3gs.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut map = HashMap::new();\n    let mut vec = vec![];\n    let mut highest\
    \ = 0;\n    for x in arr {\n        let ones = x.count_ones();\n        if ones\
    \ > highest {\n            highest = ones;\n        }\n        if !map.contains_key(&ones)\
    \ {\n            map.insert(ones, vec![x]);\n        } else {\n            let\
    \ mut tmp = map.get_mut(&ones).unwrap();\n            tmp.push(x);\n        }\n\
    \    }\n    for n in 0..=highest {\n        let tmp = map.get(&n).unwrap();\n\
    \        vec.extend(tmp);\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmps5yzwzyh.rs:9:19\n  |\n9 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut vec: Vec<_> = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n\
    \    vec.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    vec.into_iter().map(|x|\
    \ x.0).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpef_1gl2e.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr;\n    v.sort_by(|a, b| {\n        let a1 = a.count_ones();\n\
    \        let b1 = b.count_ones();\n        if a1 == b1 {\n            return a.cmp(b);\n\
    \        }\n        a1.cmp(&b1)\n    });\n    v\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp403mezr7.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n\
    \    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmp7tmpu0gg.rs:10:24\n\
    \   |\n10 |     res.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n   |\
    \                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `count_ones` in this scope\n  --> /tmp/tmp7tmpu0gg.rs:10:44\n\
    \   |\n10 |     res.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n   |\
    \                                            ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, format!(\"{:0t$b}\", x, t = 10)))\n\
    \        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n        .map(|x|\
    \ x.0)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpcjfuh1k0.rs:11:10\n   |\n11 |         .sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n   |          ^^^^^^^^^ method not found\
    \ in `Map<std::vec::IntoIter<isize>, [closure@/tmp/tmpcjfuh1k0.rs:10:14: 10:52]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    use std::cmp::Ordering;\n    if arr.len() == 0 {\n        return arr;\n \
    \   }\n    let mut res = arr.clone();\n    res.sort_by(|a, b| {\n        let c\
    \ = num_ones(*a) - num_ones(*b);\n        if c == 0 {\n            a.cmp(b)\n\
    \        } else {\n            c.cmp(&0)\n        }\n    });\n    res\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_ones` in this scope\n  --> /tmp/tmpzytg015p.rs:15:17\n\
    \   |\n15 |         let c = num_ones(*a) - num_ones(*b);\n   |               \
    \  ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `num_ones`\
    \ in this scope\n  --> /tmp/tmpzytg015p.rs:15:32\n   |\n15 |         let c = num_ones(*a)\
    \ - num_ones(*b);\n   |                                ^^^^^^^^ not found in this\
    \ scope\n\nwarning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpzytg015p.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror: aborting due to 2\
    \ previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut binarr: Vec<(usize, isize)> = vec![];\n    for x in arr {\n     \
    \   let b = x.abs();\n        let mut c = 0;\n        let mut v = b;\n       \
    \ while v > 0 {\n            c += v % 2;\n            v /= 2;\n        }\n   \
    \     binarr.push((c, x));\n    }\n    binarr.sort();\n    binarr.iter().map(|&(_,\
    \ v)| v).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmputgw41p5.rs:18:22\n   |\n\
    18 |         binarr.push((c, x));\n   |                      ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |         binarr.push((c.try_into().unwrap(),\
    \ x));\n   |                       ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr.clone();\n    v.sort_by(|a, b| {\n        let cnt_a = format!(\"\
    {:b}\", a).chars().filter(|&c| c == '1').count();\n        let cnt_b = format!(\"\
    {:b}\", b).chars().filter(|&c| c == '1').count();\n        match cnt_a.cmp(&cnt_b)\
    \ {\n            Ordering::Equal => a.cmp(&b),\n            Ordering::Less =>\
    \ Ordering::Less,\n            Ordering::Greater => Ordering::Greater,\n     \
    \   }\n    });\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n   \
    \ assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpzrx4tnpx.rs:14:13\n   |\n14 |             Ordering::Equal => a.cmp(&b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpzrx4tnpx.rs:15:13\n\
    \   |\n15 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpzrx4tnpx.rs:15:31\n   |\n15 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpzrx4tnpx.rs:16:13\n   |\n16\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpzrx4tnpx.rs:16:34\n   |\n16 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr_vec: Vec<(usize, isize)> = arr.iter().map(|x| (to_bin(*x).len(),\
    \ *x)).collect();\n    arr_vec.sort();\n    arr_vec.iter().map(|x| x.1).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_bin` in this scope\n --> /tmp/tmpohjf46ai.rs:9:64\n\
    \  |\n9 |     let mut arr_vec: Vec<(usize, isize)> = arr.iter().map(|x| (to_bin(*x).len(),\
    \ *x)).collect();\n  |                                                       \
    \         ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v: Vec<isize> = arr.iter().map(|i| {\n        let mut cnt = 0;\n\
    \        let mut n = *i;\n        while n > 0 {\n            cnt += n & 1;\n \
    \           n >>= 1;\n        }\n        (cnt, *i)\n    }).collect();\n    v.sort();\n\
    \    v.iter().map(|(_, i)| *i).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `(isize, isize)`\n    --> /tmp/tmp5p9qlr6b.rs:17:8\n \
    \    |\n17   |     }).collect();\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=(isize, isize)>`\n     |\n  \
    \   = help: the trait `FromIterator<(isize, isize)>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5p9qlr6b.rs:19:19\n\
    \   |\n19 |     v.iter().map(|(_, i)| *i).collect()\n   |                   ^^^^^-\n\
    \   |                   |    |\n   |                   |    expected due to this\n\
    \   |                   expected `isize`, found tuple\n   |\n   = note: expected\
    \ type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<_> = arr.into_iter().map(|n| (n, n.count_ones())).collect();\n\
    \    arr.sort_by(|&(a, x), &(b, y)| {\n        if x == y {\n            a.cmp(&b)\n\
    \        } else {\n            x.cmp(&y)\n        }\n    });\n    arr.into_iter().map(|(a,\
    \ _)| a).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpihqdwyrm.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|n| (n, n.count_ones()))\n        .sort_by(|(_,\
    \ a), (_, b)| a.cmp(b))\n        .map(|(n, _)| *n)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmplvmz1ti0.rs:11:10\n   |\n11 |         .sort_by(|(_, a),\
    \ (_, b)| a.cmp(b))\n   |          ^^^^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmplvmz1ti0.rs:10:14: 10:37]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|i| (i, i.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n        .into_iter()\n\
    \        .map(|(i, _)| i)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmppvm5pt_v.rs:13:10\n\
    \   |\n13 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n    \
    \    let ones_a = format!(\"{:b}\", a).matches('1').count();\n        let ones_b\
    \ = format!(\"{:b}\", b).matches('1').count();\n        ones_a.cmp(&ones_b).then(a.cmp(b))\n\
    \    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpfo8bl2v3.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v: Vec<_> = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n\
    \    v.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    v.into_iter().map(|(a,\
    \ _)| a).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp89zom0xm.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr.iter().map(|&x| (x, x.count_ones())).collect::<Vec<_>>();\n\
    \    v.sort_by(|a, b| {\n        if a.1 != b.1 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    v.iter().map(|&(x,\
    \ _)| x).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjtmanbyk.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr: Vec<isize> = arr;\n    arr.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5ga5v3za.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones = HashMap::new();\n    let mut zeros = HashMap::new();\n   \
    \ let mut both = HashMap::new();\n    let mut new_arr = Vec::new();\n\n    for\
    \ i in arr {\n        let i_bin = format!(\"{:b}\", i);\n        let j = i_bin.matches(\"\
    1\").count();\n        let k = i_bin.matches(\"0\").count();\n        if j > 0\
    \ && k > 0 {\n            both.insert(i, j);\n        } else if j > 0 {\n    \
    \        ones.insert(i, j);\n        } else {\n            zeros.insert(i, k);\n\
    \        }\n    }\n\n    let mut sorted_ones = ones.into_iter().collect::<Vec<(isize,\
    \ usize)>>();\n    sorted_ones.sort_by(|a, b| a.1.cmp(&b.1));\n    let mut sorted_zeros\
    \ = zeros.into_iter().collect::<Vec<(isize, usize)>>();\n    sorted_zeros.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n    let mut sorted_both = both.into_iter().collect::<Vec<(isize,\
    \ usize)>>();\n    sorted_both.sort_by(|a, b| a.1.cmp(&b.1));\n\n    for i in\
    \ sorted_zeros {\n        new_arr.push(i.0);\n    }\n    for i in sorted_ones\
    \ {\n        new_arr.push(i.0);\n    }\n    for i in sorted_both {\n        new_arr.push(i.0);\n\
    \    }\n\n    new_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n   \
    \ assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmptpv9wjuf.rs:9:20\n  |\n9 |     let mut ones = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmptpv9wjuf.rs:10:21\n\
    \   |\n10 |     let mut zeros = HashMap::new();\n   |                     ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashMap;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashMap`\n  --> /tmp/tmptpv9wjuf.rs:11:20\n   |\n11\
    \ |     let mut both = HashMap::new();\n   |                    ^^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones = Vec::with_capacity(arr.len());\n    let mut zeros = Vec::with_capacity(arr.len());\n\
    \    for &x in &arr {\n        if x >= 0 {\n            ones.push(x);\n      \
    \  } else {\n            zeros.push(x);\n        }\n    }\n    ones.sort_by(|a,\
    \ b| {\n        a.count_ones()\n            .cmp(&b.count_ones())\n          \
    \  .then(a.cmp(b))\n    });\n    zeros.sort_by(|a, b| {\n        a.count_ones()\n\
    \            .cmp(&b.count_ones())\n            .then(a.cmp(b))\n    });\n   \
    \ let mut result = ones;\n    result.extend(zeros);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp2nr45d8z.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|e| (e, e.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| {\n            a.1.cmp(&b.1).then(a.0.cmp(&b.0))\n  \
    \      })\n        .into_iter()\n        .map(|e| e.0)\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmp869z1un4.rs:15:10\n\
    \   |\n15 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut new_arr = arr.clone();\n    new_arr.sort_by(|a, b| {\n        let\
    \ a_binary = format!(\"{:b}\", a);\n        let b_binary = format!(\"{:b}\", b);\n\
    \        let a_ones = a_binary.matches('1').count();\n        let b_ones = b_binary.matches('1').count();\n\
    \        a_ones.cmp(&b_ones).then(a.cmp(b))\n    });\n    new_arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpoyygrz_p.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|i| (i, i.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| {\n            if a.1 == b.1 {\n                a.0.cmp(&b.0)\n\
    \            } else {\n                a.1.cmp(&b.1)\n            }\n        })\n\
    \        .into_iter()\n        .map(|i| i.0)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpa522se3h.rs:19:10\n\
    \   |\n19 |         .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .cloned()\n        .map(|n| (n, n.count_ones()))\n  \
    \      .sorted_by(|&(a, ones_a), &(b, ones_b)| {\n            if ones_a == ones_b\
    \ {\n                a.cmp(&b)\n            } else {\n                ones_a.cmp(&ones_b)\n\
    \            }\n        })\n        .map(|(n, _)| n)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpq91r0asn.rs:12:10\n   |\n12 |         .sorted_by(|&(a,\
    \ ones_a), &(b, ones_b)| {\n   |          ^^^^^^^^^ method not found in `Map<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpq91r0asn.rs:11:14: 11:37]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut vec = arr.clone();\n    let mut length = vec.len();\n    if length\
    \ == 0 {\n        return vec;\n    }\n    let mut idx = 0;\n    while idx < length\
    \ {\n        let first = vec[idx];\n        let mut min_idx = idx;\n        let\
    \ mut min_val = first;\n        let mut min_ones = get_ones(first);\n        for\
    \ j in idx + 1..length {\n            let curr = vec[j];\n            let curr_ones\
    \ = get_ones(curr);\n            if curr_ones < min_ones || (curr_ones == min_ones\
    \ && curr < min_val) {\n                min_idx = j;\n                min_val\
    \ = curr;\n                min_ones = curr_ones;\n            }\n        }\n \
    \       if min_idx != idx {\n            vec[idx] = min_val;\n            vec[min_idx]\
    \ = first;\n        }\n        idx += 1;\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_ones` in this scope\n  --> /tmp/tmpomwupwzk.rs:19:28\n\
    \   |\n19 |         let mut min_ones = get_ones(first);\n   |                \
    \            ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `get_ones` in this scope\n  --> /tmp/tmpomwupwzk.rs:22:29\n   |\n22 |      \
    \       let curr_ones = get_ones(curr);\n   |                             ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // Get the number of 1s in the binary representation of each number.\n  \
    \  let bin_ones = arr.iter().map(|&x| {\n        let mut counter = 0;\n      \
    \  let mut copy = x;\n        while copy > 0 {\n            counter += copy &\
    \ 1;\n            copy >>= 1;\n        }\n        counter\n    });\n\n    // Sort\
    \ arr using bin_ones as a sort key.\n    let mut zipped: Vec<_> = arr.iter().zip(bin_ones).collect();\n\
    \    zipped.sort_by(|&(a, b), &(c, d)| (b, a).cmp(&(d, c)));\n    zipped.iter().map(|&(a,\
    \ _)| *a).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp2m3foz_o.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = arr.iter().map(|&n| (n, n.count_ones())).collect::<Vec<_>>();\n\
    \    result.sort_by(|a, b| {\n        match a.1.cmp(&b.1) {\n            Ordering::Equal\
    \ => a.0.cmp(&b.0),\n            other => other,\n        }\n    });\n    result.iter().map(|(n,\
    \ _)| *n).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpsnkptzvq.rs:12:13\n   |\n12 |             Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpp4gqvvvw.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let an\
    \ = a.count_ones();\n        let bn = b.count_ones();\n        if an == bn {\n\
    \            a.cmp(b)\n        } else {\n            an.cmp(&bn)\n        }\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphle0k7or.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpz_cn32kr.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr;\n    sorted.sort_by(|a, b| {\n        if count_ones(*a)\
    \ == count_ones(*b) {\n            a.cmp(b)\n        } else {\n            count_ones(*a).cmp(&count_ones(*b))\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmppwk9v879.rs:11:12\n\
    \   |\n11 |         if count_ones(*a) == count_ones(*b) {\n   |            ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n  --> /tmp/tmppwk9v879.rs:11:30\n   |\n11 |         if count_ones(*a)\
    \ == count_ones(*b) {\n   |                              ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `count_ones` in this scope\n\
    \  --> /tmp/tmppwk9v879.rs:14:13\n   |\n14 |             count_ones(*a).cmp(&count_ones(*b))\n\
    \   |             ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `count_ones` in this scope\n  --> /tmp/tmppwk9v879.rs:14:33\n   |\n\
    14 |             count_ones(*a).cmp(&count_ones(*b))\n   |                   \
    \              ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 4\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|&n| (-(n as usize).count_ones(), n))\n        .sorted()\n\
    \        .into_iter()\n        .map(|(_, n)| n)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `-` to type `u32`\n  --> /tmp/tmpniqvnmml.rs:10:20\n\
    \   |\n10 |         .map(|&n| (-(n as usize).count_ones(), n))\n   |         \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot apply unary operator `-`\n   |\n\
    \   = note: unsigned values cannot be negated\n\nerror[E0599]: no method named\
    \ `sorted` found for struct `Map` in the current scope\n  --> /tmp/tmpniqvnmml.rs:11:10\n\
    \   |\n11 |         .sorted()\n   |          ^^^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpniqvnmml.rs:10:14: 10:50]>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0600.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpe9hr37jm.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|&e| (e, e.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| match a.1.cmp(&b.1) {\n            Ordering::Equal =>\
    \ a.0.cmp(&b.0),\n            o => o,\n        })\n        .into_iter()\n    \
    \    .map(|t| t.0)\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpjwey93fe.rs:13:13\n   |\n13 |             Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmpjwey93fe.rs:16:10\n   |\n16 |       \
    \  .into_iter()\n   |          ^^^^^^^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \           which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .enumerate()\n        .map(|(i, &x)| {\n            let\
    \ r = format!(\"{:b}\", x).chars().fold(0, |acc, ch| {\n                if ch\
    \ == '1' {\n                    acc + 1\n                } else {\n          \
    \          acc\n                }\n            });\n            (i, r, x)\n  \
    \      })\n        .sort_by(|&(_, a1, _), &(_, a2, _)| {\n            if a1 ==\
    \ a2 {\n                std::cmp::Ordering::Equal\n            } else if a1 <\
    \ a2 {\n                std::cmp::Ordering::Less\n            } else {\n     \
    \           std::cmp::Ordering::Greater\n            }\n        })\n        .into_iter()\n\
    \        .map(|(_, _, x)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmptdwngrro.rs:21:10\n   |\n21 |         .sort_by(|&(_, a1,\
    \ _), &(_, a2, _)| {\n   |          ^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmptdwngrro.rs:11:14: 20:10]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones != b_ones {\n       \
    \     a_ones.cmp(&b_ones)\n        } else {\n            a.cmp(b)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnebec70_.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let n = arr.len();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    let mut two = Vec::new();\n    for i in 0..n {\n        let mut k = arr[i];\n\
    \        let mut m = 0;\n        while k > 0 {\n            m += k % 2;\n    \
    \        k /= 2;\n        }\n        if m == 0 {\n            zeros.push(arr[i]);\n\
    \        } else if m == 1 {\n            ones.push(arr[i]);\n        } else {\n\
    \            two.push(arr[i]);\n        }\n    }\n    zeros.sort();\n    ones.sort();\n\
    \    two.sort();\n    let mut sorted = Vec::new();\n    sorted.append(&mut zeros);\n\
    \    sorted.append(&mut ones);\n    sorted.append(&mut two);\n    sorted\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqsrjnpdg.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_bits = a.count_ones();\n\
    \        let b_bits = b.count_ones();\n        if a_bits == b_bits {\n       \
    \     a.cmp(b)\n        } else {\n            a_bits.cmp(&b_bits)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpwo8hyf48.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // Convert the integers to binary strings, then count the number of ones\
    \ in\n    // each, and then sort the array by count then by integer.\n    arr.iter()\n\
    \        .map(|n| format!(\"{:b}\", n))\n        .map(|x| (x.chars().filter(|&x|\
    \ x == '1').count(), x.parse::<isize>().unwrap()))\n        .sorted_by(|x, y|\
    \ match x.0.cmp(&y.0) {\n            Ordering::Equal => x.1.cmp(&y.1),\n     \
    \       ord => ord,\n        })\n        .map(|x| x.1)\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpmctzs9g3.rs:15:13\n   |\n15 |             Ordering::Equal => x.1.cmp(&y.1),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]:\
    \ no method named `sorted_by` found for struct `Map` in the current scope\n  -->\
    \ /tmp/tmpmctzs9g3.rs:14:10\n   |\n14 |         .sorted_by(|x, y| match x.0.cmp(&y.0)\
    \ {\n   |          ^^^^^^^^^ method not found in `Map<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpmctzs9g3.rs:12:14: 12:36]>, [closure@/tmp/tmpmctzs9g3.rs:13:14:\
    \ 13:88]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn get_count_of_ones(n: usize) -> usize {\n        let mut ones = 0;\n  \
    \      let mut m = n;\n        while m > 0 {\n            ones += (m & 1) as usize;\n\
    \            m >>= 1;\n        }\n        ones\n    }\n\n    let mut arr: Vec<_>\
    \ = arr.into_iter().map(|x| x as usize).collect();\n    arr.sort_by_key(|x| (get_count_of_ones(*x),\
    \ *x));\n    arr.into_iter().map(|x| x as isize).collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpfceryetg.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|x| (get_ones(*x), *x))\n        .collect::<Vec<(usize,\
    \ isize)>>()\n        .sort_by(|a, b| {\n            if a.0 == b.0 {\n       \
    \         a.1.cmp(&b.1)\n            } else {\n                a.0.cmp(&b.0)\n\
    \            }\n        })\n        .iter()\n        .map(|&(_, v)| v)\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_ones` in this scope\n  --> /tmp/tmpbmxttkja.rs:10:19\n\
    \   |\n10 |         .map(|x| (get_ones(*x), *x))\n   |                   ^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `iter` found for unit\
    \ type `()` in the current scope\n  --> /tmp/tmpbmxttkja.rs:19:10\n   |\n19 |\
    \         .iter()\n   |          ^^^^ method not found in `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    return arr;\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 2, 3, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpqtcr878f.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // your code here\n    arr.into_iter().map(|n| {\n        let mut buf = vec![0;\
    \ 16];\n        buf[0] = n;\n        let mut tmp = vec![];\n        while buf[0]\
    \ != 0 {\n            tmp.push(buf[0] % 2);\n            buf[0] /= 2;\n      \
    \  }\n        (tmp.len(), n)\n    }).collect::<Vec<_>>().sort_by(|a, b| {\n  \
    \      match a.0.cmp(&b.0) {\n            Ordering::Equal => a.1.cmp(&b.1),\n\
    \            ordering => ordering,\n        }\n    }).into_iter().map(|(_, n)|\
    \ n).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpdub3ed20.rs:21:13\n   |\n21 |             Ordering::Equal => a.1.cmp(&b.1),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmpdub3ed20.rs:24:8\n   |\n24 |     }).into_iter().map(|(_,\
    \ n)| n).collect()\n   |        ^^^^^^^^^ `()` is not an iterator\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \           which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        if a.count_ones()\
    \ == b.count_ones() {\n            a.cmp(b)\n        } else {\n            a.count_ones().cmp(&b.count_ones())\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpfgq7x5sx.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let n = arr.len();\n    let mut sorted_by_ones = vec![(0, 0); n];\n    for\
    \ i in 0..n {\n        let mut num = arr[i];\n        let mut count = 0;\n   \
    \     while num > 0 {\n            if num % 2 == 1 {\n                count +=\
    \ 1;\n            }\n            num /= 2;\n        }\n        sorted_by_ones[i]\
    \ = (count, arr[i]);\n    }\n    sorted_by_ones.sort();\n    sorted_by_ones.iter().map(|&(_,\
    \ num)| num).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpyv0j6s5f.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut hm = HashMap::new();\n    let mut v: Vec<isize> = Vec::new();\n \
    \   for i in arr {\n        let n = format!(\"{:b}\", i);\n        let ones =\
    \ n.matches('1').count();\n        hm.insert(i, ones);\n        v.push(i);\n \
    \   }\n    v.sort_by(|a, b| {\n        let o1 = hm.get(a).unwrap();\n        let\
    \ o2 = hm.get(b).unwrap();\n        o1.cmp(o2).then(a.cmp(b))\n    });\n    v\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpdebk9315.rs:9:18\n  |\n9 |     let mut hm = HashMap::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.iter().map(|x| (x, x.count_ones())).collect::<Vec<_>>();\n\
    \    sorted.sort_by(|a, b| match a.1.cmp(&b.1) {\n        Ordering::Equal => a.0.cmp(&b.0),\n\
    \        Ordering::Less => Ordering::Less,\n        Ordering::Greater => Ordering::Greater,\n\
    \    });\n    sorted.iter().map(|(x, _)| *x).collect()\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpfzcgg2dk.rs:11:9\n   |\n11 |         Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpfzcgg2dk.rs:12:9\n\
    \   |\n12 |         Ordering::Less => Ordering::Less,\n   |         ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmpfzcgg2dk.rs:12:27\n   |\n12 |         Ordering::Less\
    \ => Ordering::Less,\n   |                           ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpfzcgg2dk.rs:13:9\n   |\n13 |         Ordering::Greater => Ordering::Greater,\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpfzcgg2dk.rs:13:30\n\
    \   |\n13 |         Ordering::Greater => Ordering::Greater,\n   |            \
    \                  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpfzcgg2dk.rs:15:36\n     |\n15   |     sorted.iter().map(|(x,\
    \ _)| *x).collect()\n     |                                    ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    fn one_count(x: isize) -> usize {\n        x.count_ones() as usize\n    }\n\
    \n    fn from_iter<I: IntoIterator<Item = T>, T: Ord>(iter: I) -> BinaryHeap<T>\
    \ {\n        BinaryHeap::from(iter)\n    }\n\n    fn to_vec<T: Ord>(heap: BinaryHeap<T>)\
    \ -> Vec<T> {\n        let mut v = heap.into_sorted_vec();\n        v.reverse();\n\
    \        v\n    }\n\n    fn sort(arr: Vec<isize>) -> Vec<isize> {\n        arr.into_iter()\n\
    \            .map(|x| (one_count(x), x))\n            .collect::<BinaryHeap<_>>()\n\
    \            .into_sorted_vec()\n            .into_iter()\n            .map(|(_,\
    \ x)| x)\n            .collect()\n    }\n\n    fn sort_harder(arr: Vec<isize>)\
    \ -> Vec<isize> {\n        arr.into_iter()\n            .map(|x| (one_count(x),\
    \ x))\n            .collect::<BinaryHeap<_>>()\n            .into_sorted_vec()\n\
    \            .into_iter()\n            .map(|(_, x)| x)\n            .collect()\n\
    \    }\n\n    fn sort_harder2(arr: Vec<isize>) -> Vec<isize> {\n        arr.into_iter()\n\
    \            .map(|x| (one_count(x), x))\n            .collect::<BinaryHeap<_>>()\n\
    \            .into_sorted_vec()\n            .into_iter()\n            .map(|(_,\
    \ x)| x)\n            .collect()\n    }\n\n    fn sort_harder3(arr: Vec<isize>)\
    \ -> Vec<isize> {\n        arr.into_iter()\n            .map(|x| (one_count(x),\
    \ x))\n            .collect::<BinaryHeap<_>>()\n            .into_sorted_vec()\n\
    \            .into_iter()\n            .map(|(_, x)| x)\n\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpk1kako75.rs:73:3\n\
    \   |\n8  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                                 - unclosed delimiter\n...\n53 |     fn sort_harder3(arr:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \          - this delimiter might not be properly closed...\n...\n61 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n73 | }\n   |\
    \   ^\n\nerror[E0412]: cannot find type `BinaryHeap` in this scope\n  --> /tmp/tmpk1kako75.rs:13:65\n\
    \   |\n13 |     fn from_iter<I: IntoIterator<Item = T>, T: Ord>(iter: I) -> BinaryHeap<T>\
    \ {\n   |                                                                 ^^^^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::BinaryHeap;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `BinaryHeap`\n  --> /tmp/tmpk1kako75.rs:14:9\n   |\n\
    14 |         BinaryHeap::from(iter)\n   |         ^^^^^^^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::BinaryHeap;\n\
    \   |\n\nerror[E0412]: cannot find type `BinaryHeap` in this scope\n  --> /tmp/tmpk1kako75.rs:17:29\n\
    \   |\n17 |     fn to_vec<T: Ord>(heap: BinaryHeap<T>) -> Vec<T> {\n   |     \
    \                        ^^^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::BinaryHeap;\n   |\n\n\
    error[E0412]: cannot find type `BinaryHeap` in this scope\n  --> /tmp/tmpk1kako75.rs:26:24\n\
    \   |\n26 |             .collect::<BinaryHeap<_>>()\n   |                    \
    \    ^^^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::BinaryHeap;\n   |\n\nerror[E0412]: cannot find\
    \ type `BinaryHeap` in this scope\n  --> /tmp/tmpk1kako75.rs:36:24\n   |\n36 |\
    \             .collect::<BinaryHeap<_>>()\n   |                        ^^^^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::BinaryHeap;\n   |\n\nerror[E0412]: cann"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.into_iter()\n        .map(|x| (x, x.count_ones()))\n        .sorted_by(|x,\
    \ y| match x.1.cmp(&y.1) {\n            Ordering::Equal => x.0.cmp(&y.0),\n  \
    \          Ordering::Less => Ordering::Less,\n            Ordering::Greater =>\
    \ Ordering::Greater,\n        })\n        .map(|x| x.0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp6l2vthb0.rs:12:13\n   |\n12 |             Ordering::Equal => x.0.cmp(&y.0),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp6l2vthb0.rs:13:13\n\
    \   |\n13 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp6l2vthb0.rs:13:31\n   |\n13 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp6l2vthb0.rs:14:13\n   |\n14\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp6l2vthb0.rs:14:34\n   |\n14 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]: no method\
    \ named `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmp6l2vthb0.rs:11:10\n\
    \   |\n11 |         .sorted_by(|x, y| match x.1.cmp(&y.1) {\n   |          ^^^^^^^^^\
    \ method not found in `Map<std::vec::IntoIter<isize>, [closure@/tmp/tmp6l2vthb0.rs:10:14:\
    \ 10:37]>`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut dec: Vec<_> = arr.clone();\n    let mut binary: Vec<_> = arr.clone();\n\
    \    dec.sort();\n    binary.sort_by(|x, y| {\n        format!(\"{:b}\", x).chars().filter(|c|\
    \ *c == '1').count()\n            .cmp(&format!(\"{:b}\", y).chars().filter(|c|\
    \ *c == '1').count())\n    });\n    binary.sort_by(|x, y| format!(\"{:b}\", x).cmp(&format!(\"\
    {:b}\", y)));\n    binary\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpiakzsjsi.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut count_ones = Vec::new();\n    for &i in &arr {\n        count_ones.push(((i\
    \ as u32).count_ones(), i));\n    }\n    count_ones.sort();\n    count_ones.iter().map(|x|\
    \ x.1).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphbq94qhy.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut data = arr.clone();\n    data.sort_by(|a, b| {\n        let (a_ones,\
    \ a_dec) = num_ones(*a);\n        let (b_ones, b_dec) = num_ones(*b);\n      \
    \  if a_ones == b_ones {\n            a_dec.cmp(&b_dec)\n        } else {\n  \
    \          a_ones.cmp(&b_ones)\n        }\n    });\n    data\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_ones` in this scope\n  --> /tmp/tmpsj1sxex9.rs:11:31\n\
    \   |\n11 |         let (a_ones, a_dec) = num_ones(*a);\n   |                \
    \               ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `num_ones` in this scope\n  --> /tmp/tmpsj1sxex9.rs:12:31\n   |\n12\
    \ |         let (b_ones, b_dec) = num_ones(*b);\n   |                        \
    \       ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmprdh3735d.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = arr.clone();\n    result.sort_by(|a, b| {\n        let a_ones\
    \ = a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones ==\
    \ b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpmkagea4q.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones: HashMap<isize, usize> = HashMap::new();\n    let mut zeros:\
    \ HashMap<isize, usize> = HashMap::new();\n    for n in arr {\n        let x =\
    \ n.abs();\n        if n < 0 {\n            *zeros.entry(x).or_insert(0) += x.count_ones()\
    \ as usize;\n        } else {\n            *ones.entry(x).or_insert(0) += x.count_ones()\
    \ as usize;\n        }\n    }\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for (n, c) in ones.iter() {\n        result.push(*n);\n        result.push(*n);\n\
    \        let mut i = 0;\n        while i < *c {\n            result.push(*n);\n\
    \            i += 1;\n        }\n    }\n    for (n, c) in zeros.iter() {\n   \
    \     result.push(-*n);\n        result.push(-*n);\n        let mut i = 0;\n \
    \       while i < *c {\n            result.push(-*n);\n            i += 1;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpqzojptoz.rs:9:19\n\
    \  |\n9 |     let mut ones: HashMap<isize, usize> = HashMap::new();\n  |     \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpqzojptoz.rs:9:43\n\
    \  |\n9 |     let mut ones: HashMap<isize, usize> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmpqzojptoz.rs:10:20\n\
    \   |\n10 |     let mut zeros: HashMap<isize, usize> = HashMap::new();\n   | \
    \                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpqzojptoz.rs:10:44\n\
    \   |\n10 |     let mut zeros: HashMap<isize, usize> = HashMap::new();\n   | \
    \                                           ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ones: Vec<_> = arr.iter().map(|&i| (i.count_ones(), i)).collect();\n\
    \    ones.sort();\n    ones.iter().map(|&(_, i)| i).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpawaya4gt.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr.into_iter().map(|num| (ones(num), num)).collect::<Vec<_>>();\n\
    \    v.sort();\n    v.into_iter().map(|(_, num)| num).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ones` in this scope\n --> /tmp/tmpyyvm4ihc.rs:9:44\n\
    \  |\n9 |     let mut v = arr.into_iter().map(|num| (ones(num), num)).collect::<Vec<_>>();\n\
    \  |                                            ^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let ones_a = a.count_ones();\n\
    \        let ones_b = b.count_ones();\n        if ones_a == ones_b {\n       \
    \     a.cmp(b)\n        } else {\n            ones_a.cmp(&ones_b)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpvcbtarae.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let (ones_a, int_a)\
    \ = (a.count_ones(), *a);\n        let (ones_b, int_b) = (b.count_ones(), *b);\n\
    \        if ones_a == ones_b {\n            int_a.cmp(&int_b)\n        } else\
    \ {\n            ones_a.cmp(&ones_b)\n        }\n    });\n    arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpo2tp0qqe.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| count_ones(a).cmp(&count_ones(b)).then(a.cmp(b)));\n\
    \    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmphuy7w4xh.rs:10:24\n\
    \   |\n10 |     res.sort_by(|a, b| count_ones(a).cmp(&count_ones(b)).then(a.cmp(b)));\n\
    \   |                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n  --> /tmp/tmphuy7w4xh.rs:10:43\n\
    \   |\n10 |     res.sort_by(|a, b| count_ones(a).cmp(&count_ones(b)).then(a.cmp(b)));\n\
    \   |                                           ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
