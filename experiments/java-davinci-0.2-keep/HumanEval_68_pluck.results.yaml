name: HumanEval_68_pluck
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n\
    \                smallestEvenIndex = i;\n            }\n        }\n        if\
    \ (smallestEvenIndex == -1) {\n            return result;\n        }\n       \
    \ result.add(smallestEven);\n        result.add((long)smallestEvenIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return ret;\n        }\n\
    \        ret.add(min);\n        ret.add((long)minIndex);\n        return ret;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long min = Long.MAX_VALUE;\n\
    \        Long minIndex = -1L;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            Long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = (long) i;\n      \
    \      }\n        }\n        if (minIndex == -1L) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n\
    \            result.add(minIndex);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        long smallestEvenIndex = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < smallestEven) {\n                smallestEven = arr.get(i);\n            \
    \    smallestEvenIndex = i;\n            }\n        }\n        if (smallestEvenIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestEvenIndex);\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n\
    \                smallestEvenIndex = i;\n            }\n        }\n        if\
    \ (smallestEvenIndex == -1) {\n            return result;\n        }\n       \
    \ result.add(smallestEven);\n        result.add((long)smallestEvenIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return res;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int min_i = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                min_i = i;\n            }\n        }\n      \
    \  if (min_i == -1) {\n            return res;\n        }\n        res.add(min);\n\
    \        res.add((long)min_i);\n        return res;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return ret;\n        }\n\
    \        ret.add(min);\n        ret.add((long)minIndex);\n        return ret;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long min = Long.MAX_VALUE;\n\
    \        Long minIndex = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long value = arr.get(i);\n            if (value % 2 == 0\
    \ && value < min) {\n                min = value;\n                minIndex =\
    \ (long) i;\n            }\n        }\n        if (min == Long.MAX_VALUE) {\n\
    \            return result;\n        }\n        result.add(min);\n        result.add(minIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIdx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIdx = i;\n       \
    \     }\n        }\n        if (minEvenIdx == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIdx);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = arr.get(0);\n\
    \        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n\
    \                    min = arr.get(i);\n                    index = i;\n     \
    \           }\n            }\n        }\n        if (min % 2 == 0) {\n       \
    \     result.add(min);\n            result.add((long)index);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82xnl6qp.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        long smallestEvenIndex = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n            if\
    \ (val % 2 == 0 && val < smallestEven) {\n                smallestEven = val;\n\
    \                smallestEvenIndex = i;\n            }\n        }\n        if\
    \ (smallestEvenIndex == -1) {\n            return result;\n        }\n       \
    \ result.add(smallestEven);\n        result.add(smallestEvenIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add(minIndex);\n        }\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (min == Long.MAX_VALUE) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add(minIndex);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp0up6y5nn.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        long smallestEvenIndex = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n          \
    \  if (value % 2 == 0 && value < smallestEven) {\n                smallestEven\
    \ = value;\n                smallestEvenIndex = i;\n            }\n        }\n\
    \        if (smallestEvenIndex == -1) {\n            return result;\n        }\n\
    \        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long minEven = null;\n\
    \        Long minEvenIndex = null;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long val = arr.get(i);\n            if (val % 2 == 0) {\n   \
    \             if (minEven == null || val < minEven) {\n                    minEven\
    \ = val;\n                    minEvenIndex = (long) i;\n                }\n  \
    \          }\n        }\n        if (minEven != null) {\n            result.add(minEven);\n\
    \            result.add(minEvenIndex);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return res;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return res;\n        }\n\
    \        res.add(min);\n        res.add((long)minIndex);\n        return res;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long min = Long.MAX_VALUE;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         Long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                index = i;\n            }\n     \
    \   }\n        if (index == -1) {\n            return result;\n        }\n   \
    \     result.add(min);\n        result.add((long)index);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long minEven = Long.MAX_VALUE;\n\
    \        Long minEvenIndex = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long val = arr.get(i);\n            if (val % 2 == 0 &&\
    \ val < minEven) {\n                minEven = val;\n                minEvenIndex\
    \ = (long) i;\n            }\n        }\n        if (minEven == Long.MAX_VALUE)\
    \ {\n            return result;\n        }\n        result.add(minEven);\n   \
    \     result.add(minEvenIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp6tgb1x1e.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpgf8qpz2a.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        long smallestEvenIndex = Long.MAX_VALUE;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n \
    \           if (value % 2 == 0 && value < smallestEven) {\n                smallestEven\
    \ = value;\n                smallestEvenIndex = i;\n            }\n        }\n\
    \        if (smallestEven == Long.MAX_VALUE) {\n            return result;\n \
    \       }\n        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpzwzcllcu.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        if (arr.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> evens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ odds = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n\
    \            } else {\n                odds.add(arr.get(i));\n            }\n\
    \        }\n        if (evens.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        long min = evens.get(0);\n        int minIndex = 0;\n    \
    \    for (int i = 0; i < evens.size(); i++) {\n            if (evens.get(i) <\
    \ min) {\n                min = evens.get(i);\n                minIndex = i;\n\
    \            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        ans.add(min);\n        ans.add((long) minIndex);\n        return ans;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pb4v_4d.java:66)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      if (arr.size() == 0) {\n            return result;\n        }\n       \
    \ long minEven = Long.MAX_VALUE;\n        long minIndex = -1;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < minEven) {\n                minEven = arr.get(i);\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpianofabp.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add((long)min_index);\n      \
    \  return result;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        long smallestEvenIndex = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n          \
    \  if (value % 2 == 0 && value < smallestEven) {\n                smallestEven\
    \ = value;\n                smallestEvenIndex = i;\n            }\n        }\n\
    \        if (smallestEvenIndex == -1) {\n            return result;\n        }\n\
    \        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        long smallestEven\
    \ = Long.MAX_VALUE;\n        long smallestEvenIndex = -1;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n        \
    \    if (value % 2 == 0 && value < smallestEven) {\n                smallestEven\
    \ = value;\n                smallestEvenIndex = i;\n            }\n        }\n\
    \        if (smallestEvenIndex == -1) {\n            return result;\n        }\n\
    \        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) return result;\n        long min = Long.MAX_VALUE;\n        long minIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val\
    \ = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n              \
    \  min = val;\n                minIndex = i;\n            }\n        }\n     \
    \   if (minIndex == -1) return result;\n        result.add(min);\n        result.add(minIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        if (arr.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> evens = new ArrayList<Long>();\n        for\
    \ (Long l : arr) {\n            if (l % 2 == 0) {\n                evens.add(l);\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ new ArrayList<Long>();\n        }\n        Long min = evens.get(0);\n      \
    \  for (Long l : evens) {\n            if (l < min) {\n                min = l;\n\
    \            }\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        ret.add(min);\n        ret.add((long)arr.indexOf(min));\n        return\
    \ ret;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9k442m_j.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n\
    \                min = v;\n                minIndex = i;\n            }\n    \
    \    }\n        if (minIndex == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add(minIndex);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long minEven = null;\n\
    \        Long minEvenIndex = null;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long val = arr.get(i);\n            if (val % 2 == 0) {\n   \
    \             if (minEven == null || val < minEven) {\n                    minEven\
    \ = val;\n                    minEvenIndex = (long) i;\n                }\n  \
    \          }\n        }\n        if (minEven == null) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        ArrayList<Long> evens\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ result;\n        }\n        long min = evens.get(0);\n        for (int i = 1;\
    \ i < evens.size(); i++) {\n            if (evens.get(i) < min) {\n          \
    \      min = evens.get(i);\n            }\n        }\n        result.add(min);\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) ==\
    \ min) {\n                result.add((long)i);\n                return result;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex >= 0) {\n            result.add(min);\n     \
    \       result.add((long)minIndex);\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n\
    \                min = v;\n                minIndex = i;\n            }\n    \
    \    }\n        if (minIndex == -1) {\n            return ret;\n        }\n  \
    \      ret.add(min);\n        ret.add(minIndex);\n        return ret;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long min = Long.MAX_VALUE;\n\
    \        Long minIndex = -1L;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            Long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = (long) i;\n      \
    \      }\n        }\n        if (minIndex == -1L) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return res;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ res;\n        }\n        res.add(minEven);\n        res.add((long)minEvenIndex);\n\
    \        return res;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long min = null;\n \
    \       Long minIndex = null;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            Long val = arr.get(i);\n            if (val % 2 == 0) {\n       \
    \         if (min == null || val < min) {\n                    min = val;\n  \
    \                  minIndex = (long) i;\n                }\n            }\n  \
    \      }\n        if (min != null) {\n            result.add(min);\n         \
    \   result.add(minIndex);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return res;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return res;\n        }\n\
    \        res.add(min);\n        res.add(minIndex);\n        return res;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpnc77aurb.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1gg4pg9t.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add(minIndex);\n        return ret;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmphbc2ah3j.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < min) {\n                min = arr.get(i);\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) return ret;\n        long min = Long.MAX_VALUE;\n        long idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n         \
    \       idx = i;\n            }\n        }\n        if (idx == -1) return ret;\n\
    \        ret.add(min);\n        ret.add(idx);\n        return ret;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long smallestEven =\
    \ null;\n        int smallestEvenIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long val = arr.get(i);\n            if (val % 2 == 0) {\n\
    \                if (smallestEven == null) {\n                    smallestEven\
    \ = val;\n                    smallestEvenIndex = i;\n                } else if\
    \ (val < smallestEven) {\n                    smallestEven = val;\n          \
    \          smallestEvenIndex = i;\n                }\n            }\n        }\n\
    \        if (smallestEven == null) {\n            return result;\n        }\n\
    \        result.add(smallestEven);\n        result.add((long) smallestEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ ret;\n        }\n        ret.add(minEven);\n        ret.add(minEvenIndex);\n\
    \        return ret;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return ret;\n        }\n\
    \        ret.add(min);\n        ret.add((long)minIndex);\n        return ret;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long minEven = Long.MAX_VALUE;\n        long minEvenIndex = -1;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n   \
    \         if (val % 2 == 0 && val < minEven) {\n                minEven = val;\n\
    \                minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(minEven);\n\
    \        result.add(minEvenIndex);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpei2efzgw.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) return result;\n        long min = Long.MAX_VALUE;\n        long index\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         index = i;\n            }\n        }\n        if (index == -1) return\
    \ result;\n        result.add(min);\n        result.add(index);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return ret;\n        }\n\
    \        ret.add(min);\n        ret.add(min_index);\n        return ret;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) return ret;\n        long min = Long.MAX_VALUE;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val\
    \ = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n              \
    \  min = val;\n                minIndex = i;\n            }\n        }\n     \
    \   if (minIndex == -1) return ret;\n        ret.add(min);\n        ret.add((long)minIndex);\n\
    \        return ret;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add((long)min_index);\n      \
    \  return result;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long minEven = null;\n\
    \        Long minEvenIndex = null;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (minEven == null || value < minEven) {\n                 \
    \   minEven = value;\n                    minEvenIndex = (long) i;\n         \
    \       }\n            }\n        }\n        if (minEven != null) {\n        \
    \    result.add(minEven);\n            result.add(minEvenIndex);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long val = arr.get(i);\n            if (val\
    \ % 2 == 0 && val < smallestEven) {\n                smallestEven = val;\n   \
    \             smallestEvenIndex = i;\n            }\n        }\n        if (smallestEvenIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(smallestEven);\n\
    \        result.add((long)smallestEvenIndex);\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzqaxx5mz.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n\
    \                smallestEvenIndex = i;\n            }\n        }\n        if\
    \ (smallestEvenIndex == -1) {\n            return result;\n        }\n       \
    \ result.add(smallestEven);\n        result.add((long)smallestEvenIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpu_zx33_s.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      if (arr.size() == 0) {\n            return result;\n        }\n       \
    \ long min = Long.MAX_VALUE;\n        int index = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (value % 2 == 0 && value < min) {\n                min = value;\n          \
    \      index = i;\n            }\n        }\n        if (index == -1) {\n    \
    \        return result;\n        }\n        result.add(min);\n        result.add((long)index);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return res;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int min_idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_idx = i;\n            }\n\
    \        }\n        if (min_idx == -1) {\n            return res;\n        }\n\
    \        res.add(min);\n        res.add((long)min_idx);\n        return res;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpbe_laan9.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add(min_index);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        if (arr.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> evens = new ArrayList<Long>();\n        for\
    \ (Long i : arr) {\n            if (i % 2 == 0) {\n                evens.add(i);\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ new ArrayList<Long>();\n        }\n        Long min = evens.get(0);\n      \
    \  for (Long i : evens) {\n            if (i < min) {\n                min = i;\n\
    \            }\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        ret.add(min);\n        ret.add((long) arr.indexOf(min));\n        return\
    \ ret;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvrjyfyr.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        long minEven\
    \ = Long.MAX_VALUE;\n        long minEvenIndex = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (value % 2 == 0 && value < minEven) {\n                minEven = value;\n  \
    \              minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex\
    \ != -1) {\n            result.add(minEven);\n            result.add(minEvenIndex);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuajap92o.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long min = Long.MAX_VALUE;\n\
    \        Long minIndex = -1L;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            Long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = (long) i;\n\
    \            }\n        }\n        if (minIndex == -1L) {\n            return\
    \ result;\n        }\n        result.add(min);\n        result.add(minIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbq0gx5k4.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                index = i;\n            }\n     \
    \   }\n        if (index == -1) {\n            return result;\n        }\n   \
    \     result.add(min);\n        result.add((long)index);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ans;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return ans;\n        }\n\
    \        ans.add(min);\n        ans.add((long)minIndex);\n        return ans;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxg3cpkqy.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpncff9fq2.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long minEven = null;\n\
    \        Long minEvenIndex = null;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long val = arr.get(i);\n            if (val % 2 == 0) {\n   \
    \             if (minEven == null || val < minEven) {\n                    minEven\
    \ = val;\n                    minEvenIndex = (long) i;\n                }\n  \
    \          }\n        }\n        if (minEven != null) {\n            result.add(minEven);\n\
    \            result.add(minEvenIndex);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        long smallestEvenIndex = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n        \
    \    if (current % 2 == 0 && current < smallestEven) {\n                smallestEven\
    \ = current;\n                smallestEvenIndex = i;\n            }\n        }\n\
    \        if (smallestEvenIndex == -1) {\n            return result;\n        }\n\
    \        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        long min\
    \ = Long.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long val = arr.get(i);\n            if (val % 2 == 0 &&\
    \ val < min) {\n                min = val;\n                index = i;\n     \
    \       }\n        }\n        if (index != -1) {\n            result.add(min);\n\
    \            result.add((long)index);\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpe8fvc0mz.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp131s6y5w.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) return result;\n        long min = Long.MAX_VALUE;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         minIndex = i;\n            }\n        }\n        if (minIndex == -1)\
    \ return result;\n        result.add(min);\n        result.add((long)minIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(index);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long minEven = null;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long val = arr.get(i);\n            if (val % 2 == 0) {\n   \
    \             if (minEven == null || val < minEven) {\n                    minEven\
    \ = val;\n                    minEvenIndex = i;\n                }\n         \
    \   }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpvvh4cjph.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        long min\
    \ = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long val = arr.get(i);\n            if (val % 2 == 0 &&\
    \ val < min) {\n                min = val;\n                minIndex = i;\n  \
    \          }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n\
    \            result.add((long)minIndex);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpikkjc2qz.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return res;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return res;\n        }\n\
    \        res.add(min);\n        res.add((long)minIndex);\n        return res;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm5yl0doz.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0\
    \ && value < min) {\n                min = value;\n                minIndex =\
    \ i;\n            }\n        }\n        if (min != Long.MAX_VALUE) {\n       \
    \     result.add(min);\n            result.add(minIndex);\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n\
    \                smallestEvenIndex = i;\n            }\n        }\n        if\
    \ (smallestEvenIndex == -1) {\n            return result;\n        }\n       \
    \ result.add(smallestEven);\n        result.add((long)smallestEvenIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzsgcb_fx.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgjjsuaqz.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n        \
    \        minEven = arr.get(i);\n                minEvenIndex = i;\n          \
    \  }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long curr = arr.get(i);\n            if (curr % 2 == 0 && curr\
    \ < minEven) {\n                minEven = curr;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfpp316t.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        ArrayList<Long> evens\
    \ = new ArrayList<Long>();\n        for (Long i : arr) {\n            if (i %\
    \ 2 == 0) {\n                evens.add(i);\n            }\n        }\n       \
    \ if (evens.size() == 0) {\n            return result;\n        }\n        Long\
    \ min = evens.get(0);\n        for (Long i : evens) {\n            if (i < min)\
    \ {\n                min = i;\n            }\n        }\n        result.add(min);\n\
    \        result.add((long) arr.indexOf(min));\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(minIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return ret;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                min_index = i;\n            }\n        }\n  \
    \      if (min_index == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add(min_index);\n        return ret;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n       \
    \         min = arr.get(i);\n                minIndex = i;\n            }\n  \
    \      }\n        if (min == Long.MAX_VALUE) {\n            return result;\n \
    \       }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n            \
    \    minEven = arr.get(i);\n                minIndex = i;\n            }\n   \
    \     }\n        if (minIndex == -1) {\n            return result;\n        }\n\
    \        result.add(minEven);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return res;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return res;\n        }\n\
    \        res.add(min);\n        res.add(min_index);\n        return res;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallest = Long.MAX_VALUE;\n\
    \        long smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ smallest) {\n                smallest = val;\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (smallest == Long.MAX_VALUE) {\n\
    \            return result;\n        }\n        result.add(smallest);\n      \
    \  result.add(smallestIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpzbvk2jod.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // TODO: Implement this function\n        return null;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpemj4a789.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return ans;\n        }\n        long\
    \ min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min)\
    \ {\n                min = arr.get(i);\n                minIndex = i;\n      \
    \      }\n        }\n        if (minIndex == -1) {\n            return ans;\n\
    \        }\n        ans.add(min);\n        ans.add((long) minIndex);\n       \
    \ return ans;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) return result;\n        long min = Long.MAX_VALUE;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         minIndex = i;\n            }\n        }\n        if (minIndex == -1)\
    \ return result;\n        result.add(min);\n        result.add((long)minIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2hhtj8ju.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long smallestEven =\
    \ Long.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long val = arr.get(i);\n            if (val\
    \ % 2 == 0 && val < smallestEven) {\n                smallestEven = val;\n   \
    \             smallestEvenIndex = i;\n            }\n        }\n        if (smallestEvenIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(smallestEven);\n\
    \        result.add((long)smallestEvenIndex);\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long minEven = Long.MAX_VALUE;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0 && val <\
    \ minEven) {\n                minEven = val;\n                minEvenIndex = i;\n\
    \            }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwx78ct_u.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long minEven = Long.MAX_VALUE;\n        long minEvenIndex = -1;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < minEven) {\n                minEven = arr.get(i);\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        ArrayList<Long> evens\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ result;\n        }\n        long min = Collections.min(evens);\n        result.add(min);\n\
    \        result.add((long)arr.indexOf(min));\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        // your code here\n        return new ArrayList<Long>();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuaajw__w.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = arr.get(0);\n\
    \        int minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           long cur = arr.get(i);\n            if (cur % 2 == 0 && cur < min)\
    \ {\n                min = cur;\n                minIndex = i;\n            }\n\
    \        }\n        if (min % 2 == 0) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_k3o37fy.java:57)\n"
  exit_code: 1
  status: Exception
