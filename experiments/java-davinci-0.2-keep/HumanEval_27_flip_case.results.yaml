name: HumanEval_27_flip_case
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> c.toString())\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6hd8ox5.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgbgu8wdx.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpgbgu8wdx.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> c.toString())\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp26q756e3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(String::valueOf)\n\
    \            .collect(Collectors.joining());\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> {\n             \
    \   if (Character.isUpperCase(c)) {\n                    return Character.toLowerCase(c);\n\
    \                } else {\n                    return Character.toUpperCase(c);\n\
    \                }\n            })\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiruntxzp.java:22: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Character>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer\
    \ type-variable(s) R#1\n        (actual and formal argument lists differ in length))\n\
    \    method Stream.<R#2,A>collect(Collector<? super Character,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .map(c -> Character.toString((char)\
    \ c))\n            .collect(Collectors.joining());\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n \
    \   assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjh62sl1c.java:15: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpjh62sl1c.java:16: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzrxz3h_s.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpzrxz3h_s.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(String::valueOf)\n\
    \            .collect(Collectors.joining());\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(String::valueOf)\n\
    \            .collect(Collectors.joining());\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplpon88xx.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmplpon88xx.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl4l44hig.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpl4l44hig.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2_9ytc10.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmp2_9ytc10.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyb8zidln.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpyb8zidln.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(Object::toString)\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5hzcnke3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp31vkbth4.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmp31vkbth4.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0vwri6nq.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmp0vwri6nq.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(Object::toString)\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp387dfi77.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> c.toString())\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06ithmvx.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8p_hocwa.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmp8p_hocwa.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return null;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.flipCase(String)\"\
    \ is null\n\tat Problem.main(tmp6c54mkd8.java:17)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> c.toString())\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplmo9kw07.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .map(c -> Character.toString((char)\
    \ c))\n            .collect(Collectors.joining());\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n \
    \   assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps4b4v0v5.java:15: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmps4b4v0v5.java:16: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> String.valueOf((char) c))\n           \
    \ .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprpn4yyml.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> String.valueOf((char) c))\n       \
    \                                     ^\n/tmp/tmprpn4yyml.java:22: error: no suitable\
    \ method found for collect(Collector<CharSequence,CAP#1,String>)\n           \
    \ .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbmwxjti0.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpbmwxjti0.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> c.toString())\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr3pb624b.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        // Your code here.\n\
    \        return null;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\"\
    )).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have\
    \ violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.flipCase(String)\"\
    \ is null\n\tat Problem.main(tmptispnky2.java:18)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        // Your code here.\n\
    \        return null;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\"\
    )).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have\
    \ violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.flipCase(String)\"\
    \ is null\n\tat Problem.main(tmp2pndxvob.java:18)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(String::valueOf)\n\
    \            .collect(Collectors.joining());\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpowrjef63.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpowrjef63.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp007asllm.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmp007asllm.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpev_atait.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpev_atait.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa8uaie76.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpa8uaie76.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i]))\
    \ {\n                chars[i] = Character.toLowerCase(chars[i]);\n           \
    \ } else {\n                chars[i] = Character.toUpperCase(chars[i]);\n    \
    \        }\n        }\n        return new String(chars);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .map(c -> Character.toString((char)\
    \ c))\n            .collect(Collectors.joining());\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n \
    \   assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp2tpfprs.java:15: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpp2tpfprs.java:16: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isLowerCase(c)) {\n\
    \                    return Character.toUpperCase(c);\n                } else\
    \ {\n                    return Character.toLowerCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpza9d3nca.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpza9d3nca.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .map(c -> Character.toString((char)\
    \ c))\n            .collect(Collectors.joining());\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n \
    \   assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv16_96og.java:15: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpv16_96og.java:16: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ Character.toString(c))\n            .collect(Collectors.joining());\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\
    \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ Character.toString(c))\n            .collect(Collectors.joining());\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\
    \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> c.toString())\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpsi6b88.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg5kwptb3.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmpg5kwptb3.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .map(c -> Character.toString((char)\
    \ c))\n            .collect(Collectors.joining());\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n \
    \   assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7p4g1242.java:15: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmp7p4g1242.java:16: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> Character.toString((char) c))\n       \
    \     .collect(Collectors.joining());\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0tc6vg1y.java:21: error: incompatible types: Integer cannot be\
    \ converted to char\n            .map(c -> Character.toString((char) c))\n   \
    \                                             ^\n/tmp/tmp0tc6vg1y.java:22: error:\
    \ no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining());\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
    \ c.toString())\n            .collect(Collectors.joining());\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \                .mapToObj(c -> (char) c)\n                .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .map(String::valueOf)\n\
    \                .collect(Collectors.joining());\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(Object::toString)\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiym3mchg.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        return string.chars()\n\
    \            .mapToObj(c -> {\n                if (Character.isUpperCase(c)) {\n\
    \                    return Character.toLowerCase(c);\n                } else\
    \ {\n                    return Character.toUpperCase(c);\n                }\n\
    \            })\n            .map(c -> c.toString())\n            .collect(Collectors.joining());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbpukl_13.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n\
    \    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
