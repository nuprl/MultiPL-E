name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    public static long largestPrimeFactor(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i = 1;\n            }\n        }\n        return largest;\n",
  "        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                n /= i;\n                largestPrimeFactor\
    \ = i;\n            }\n        }\n        return largestPrimeFactor;\n", "   \
    \     long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                largest = i;\n                while (n\
    \ % i == 0) {\n                    n /= i;\n                }\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;\n", "        long largest = 0;\n        for (long i =\
    \ 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largest;\n", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;\n", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        return largest;\n", "    \
    \    long largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                while (n % i ==\
    \ 0) {\n                    n /= i;\n                }\n            }\n      \
    \  }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largestPrimeFactor = 0;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largestPrimeFactor = 0;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n                while (n % factor ==\
    \ 0) {\n                    n /= factor;\n                }\n            }\n \
    \           factor += 1;\n        }\n        return largestPrimeFactor;\n", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largestPrimeFactor = 1;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;\n", "        long largestPrimeFactor\
    \ = 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                n /= i;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  if (n > largestPrimeFactor) {\n            largestPrimeFactor = n;\n      \
    \  }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                n /= i;\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ largestPrimeFactor;\n", "        // TODO: Implement me!\n        return 0;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                while (n %\
    \ i == 0) {\n                    n /= i;\n                }\n            }\n \
    \       }\n        return largest;\n", "        long max = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return max;\n", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;\n", "        long largest = 1;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;\n", "        long largest = 1;\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                n /= i;\n                i--;\n     \
    \       }\n        }\n        return largest;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;\n", "        long largestPrimeFactor\
    \ = 1;\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                largestPrimeFactor = factor;\n           \
    \     n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;\n", "        long largest = 0;\n        long i = 2;\n  \
    \      while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return Math.max(largest, n);\n", "        long\
    \ largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i--;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                largest = i;\n                while (n % i == 0)\
    \ {\n                    n /= i;\n                }\n            }\n        }\n\
    \        if (n > 1) {\n            largest = n;\n        }\n        return largest;\n",
  "        long largestPrimeFactor = 1;\n        while (n % 2 == 0) {\n          \
    \  largestPrimeFactor = 2;\n            n /= 2;\n        }\n        for (long\
    \ i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n    \
    \            largestPrimeFactor = i;\n                n /= i;\n            }\n\
    \        }\n        if (n > 2) {\n            largestPrimeFactor = n;\n      \
    \  }\n        return largestPrimeFactor;\n", "        long largest = 1;\n    \
    \    for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n        \
    \        largest = i;\n                n /= i;\n                i--;\n       \
    \     }\n        }\n        return largest;\n", "        long largest = 1;\n \
    \       for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n \
    \               largest = i;\n                while (n % i == 0) {\n         \
    \           n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;\n", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long max = 1;\n        for (long i =\
    \ 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return max;\n", "        long max = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                max = i;\n          \
    \      n /= i;\n                i--;\n            }\n        }\n        return\
    \ max;\n", "        return 0;\n", "        long largestPrimeFactor = 1;\n    \
    \    for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n        \
    \        largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i--;\n            }\n        }\n        return largest;\n", "        long\
    \ largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long max = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                max = i;\n                n /= i;\n        \
    \        i--;\n            }\n        }\n        return max;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                while (n %\
    \ i == 0) {\n                    n /= i;\n                }\n            }\n \
    \       }\n        return largest;\n", "        long largest = 0;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n                n /= i;\n                i = 1;\n            }\n\
    \        }\n        return largest;\n", "        long largest = 0;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n                n /= i;\n                i--;\n            }\n\
    \        }\n        return largest;\n", "        long max = 1;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                max\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ max = n;\n        }\n        return max;\n", "        long largestPrimeFactor\
    \ = 0;\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                largestPrimeFactor = factor;\n           \
    \     n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;\n", "        long max = 0;\n        for (long i = 2; i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                max = i;\n       \
    \         n /= i;\n                i--;\n            }\n        }\n        return\
    \ max;\n", "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i = 1;\n            }\n        }\n        return largest;\n",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;\n", "        long largestPrimeFactor = 1;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long max = -1;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                max = i;\n                n /= i;\n        \
    \        i--;\n            }\n        }\n        return max;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i--;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factor;\n", "        long largest =\
    \ 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0)\
    \ {\n                largest = i;\n                while (n % i == 0) {\n    \
    \                n /= i;\n                }\n            }\n        }\n      \
    \  if (n > 1) {\n            largest = n;\n        }\n        return largest;\n",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            largestPrimeFactor\
    \ = n;\n        }\n        return largestPrimeFactor;\n", "        long largest\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largest;\n", "        long largest =\
    \ -1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0)\
    \ {\n                largest = i;\n                while (n % i == 0) {\n    \
    \                n /= i;\n                }\n            }\n        }\n      \
    \  if (n > 1) {\n            largest = n;\n        }\n        return largest;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;\n",
  "        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;\n", "        long largest = 0;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;\n", "        long largest = 0;\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                n /= i;\n                i--;\n     \
    \       }\n        }\n        return largest;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;\n", "        long largestPrimeFactor\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i = 1;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        // TODO: Implement this method.\n        return 0;\n", "        long ans\
    \ = 0;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i ==\
    \ 0) {\n                ans = i;\n                while (n % i == 0) {\n     \
    \               n /= i;\n                }\n            }\n        }\n       \
    \ if (n > 1) {\n            ans = n;\n        }\n        return ans;\n", "   \
    \     long largest = 0;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n                n /= i;\n \
    \               i--;\n            }\n        }\n        return largest;\n", " \
    \       // TODO: Implement this function.\n        return 0;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i--;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                while (n % i == 0) {\n\
    \                    n /= i;\n                }\n            }\n        }\n  \
    \      return largest;\n", "        long largest = 1;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        return largest;\n", "        long\
    \ largestPrimeFactor = 1;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n            } else {\n                i++;\n           \
    \ }\n        }\n        if (n > 1) {\n            largestPrimeFactor = n;\n  \
    \      }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;\n", "        long largest = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largest = i;\n                n /= i;\n                i = 1;\n    \
    \        }\n        }\n        return largest;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;\n", "        long largest =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i = 1;\n\
    \            }\n        }\n        return largest;\n", "        long largest =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largest;\n", "        long largestPrimeFactor\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = -1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                if (isPrime(i)) {\n                   \
    \ largest = i;\n                }\n            }\n        }\n        return largest;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;\n",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;\n", "        long largest = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largest = i;\n                n /= i;\n                i--;\n      \
    \      }\n        }\n        return largest;\n", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;\n", "        long largest = 0;\n   \
    \     for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n   \
    \             largest = i;\n                while (n % i == 0) {\n           \
    \         n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;\n", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largestPrimeFactor = 1;\n     \
    \   long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \  } else {\n                i++;\n            }\n        }\n        if (n > largestPrimeFactor)\
    \ {\n            largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;\n",
  "        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;\n", "        long largest = 1;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                while (n % i == 0) {\n\
    \                    n /= i;\n                }\n            }\n        }\n  \
    \      return largest;\n", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;\n", "        long largestPrimeFactor = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n", "        long largest = 1;\n     \
    \   for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           largest = i;\n                while (n % i == 0) {\n             \
    \       n /= i;\n                }\n            }\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;\n", "   \
    \     long largest = 0;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                n /= i;\n                largest = i;\n \
    \           }\n        }\n        return largest;\n", "        long largest =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largest;\n", "        long result =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                result = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return result;\n", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;\n", "        long largest = 1;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;\n", "        long largest = 1;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;\n", "        long largest = 0;\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                n /= i;\n                i--;\n     \
    \       }\n        }\n        return largest;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;\n", "        long largest =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largest;\n", "        long max = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            max = i;\n                n /= i;\n                i--;\n       \
    \     }\n        }\n        return max;\n", "        long largest = 1;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                while (n % i == 0) {\n                 \
    \   n /= i;\n                }\n            }\n        }\n        return largest;\n",
  "        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largestPrimeFactor = 0;\n     \
    \   long factor = 2;\n        while (n > 1) {\n            while (n % factor ==\
    \ 0) {\n                largestPrimeFactor = factor;\n                n /= factor;\n\
    \            }\n            factor += 1;\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                n /= i;\n                largest = i;\n\
    \            }\n        }\n        return largest;\n", "        long max = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            max = i;\n                n /= i;\n                i--;\n       \
    \     }\n        }\n        return max;\n", "        long largestPrimeFactor =\
    \ 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                while (n % i == 0) {\n\
    \                    n /= i;\n                }\n            }\n        }\n  \
    \      return largestPrimeFactor;\n", "        long largestPrimeFactor = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestPrimeFactor = i;\n                n /= i;\n              \
    \  i--;\n            }\n        }\n        return largestPrimeFactor;\n", "  \
    \      long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        return largest;\n", "    \
    \    long largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i = 1;\n            }\n        }\n        return largest;\n", " \
    \       long largest = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                while (n\
    \ % i == 0) {\n                    n /= i;\n                }\n            }\n\
    \        }\n        return largest;\n", "        long largest = 0;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n                n /= i;\n                i--;\n            }\n\
    \        }\n        return largest;\n", "        long largestPrimeFactor = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestPrimeFactor = i;\n                n /= i;\n              \
    \  i--;\n            }\n        }\n        return largestPrimeFactor;\n", "  \
    \      // TODO: Implement me!\n        return 0;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;\n", "        long i = 2;\n \
    \       while (i * i <= n) {\n            if (n % i == 0) {\n                n\
    \ /= i;\n            } else {\n                i++;\n            }\n        }\n\
    \        return n;\n", "        // TODO: Implement this method.\n        return\
    \ 0;\n", "        long largest = -1;\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     while (n % i == 0) {\n                    n /= i;\n                }\n \
    \           }\n        }\n        if (n > 1) {\n            largest = n;\n   \
    \     }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;\n", "        long largestPrimeFactor = 1;\n     \
    \   while (n % 2 == 0) {\n            largestPrimeFactor = 2;\n            n =\
    \ n / 2;\n        }\n        long factor = 3;\n        while (n > 1) {\n     \
    \       while (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \                n = n / factor;\n            }\n            factor += 2;\n  \
    \      }\n        return largestPrimeFactor;\n", "        long largest = 1;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                while (n % i == 0) {\n        \
    \            n /= i;\n                }\n            }\n        }\n        if\
    \ (n > 1) {\n            largest = n;\n        }\n        return largest;\n",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largestPrimeFactor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                if (isPrime(i)) {\n                    largest = i;\n\
    \                }\n            }\n        }\n        return largest;\n", "  \
    \      // TODO: Implement me!\n        return 0;\n", "        long largest = 0;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                while (n % i == 0) {\n        \
    \            n /= i;\n                }\n            }\n        }\n        if\
    \ (n > 1) {\n            largest = n;\n        }\n        return largest;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largestPrimeFactor = 0;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i--;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;\n", "        long\
    \ largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long max = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                max = i;\n                while (n % i == 0)\
    \ {\n                    n /= i;\n                }\n            }\n        }\n\
    \        return max;\n", "        long largestPrimeFactor = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n", "        long largest = 1;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                n /= i;\n                i--;\n        \
    \    }\n        }\n        return largest;\n", "        long largest = -1;\n \
    \       for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           largest = i;\n                n /= i;\n                i--;\n    \
    \        }\n        }\n        return largest;\n", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;\n", "        long i = 2;\n \
    \       while (i * i <= n) {\n            if (n % i == 0) {\n                n\
    \ /= i;\n            } else {\n                i++;\n            }\n        }\n\
    \        return n;\n", "        long largestPrimeFactor = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor =\
    \ 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largestPrimeFactor = 1;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor +=\
    \ 1;\n        }\n        return largestPrimeFactor;\n", "        long largest\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i = 1;\n\
    \            }\n        }\n        return largest;\n", "        long largest =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largest;\n", "        long largest =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i = 1;\n\
    \            }\n        }\n        return largest;\n", "        long largest =\
    \ 0;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                if (isPrime(i)) {\n                    largest =\
    \ i;\n                }\n            }\n        }\n        return largest;\n",
  "        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largestPrimeFactor = 0;\n   \
    \     long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n \
    \               largestPrimeFactor = i;\n                n /= i;\n           \
    \ } else {\n                i++;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;\n", " \
    \       long largest = -1;\n        for (long i = 2; i <= n; i++) {\n        \
    \    if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;\n",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;\n", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;\n", "        long factor = 2;\n        while (n >\
    \ 1) {\n            if (n % factor == 0) {\n                n /= factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return factor;\n", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;\n", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;\n", "        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                n /= i;\n            } else {\n\
    \                i++;\n            }\n        }\n        return n;\n", "     \
    \   long largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i--;\n            }\n        }\n        return largest;\n", "   \
    \     long largest = 0;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n                n /= i;\n \
    \               i--;\n            }\n        }\n        return largest;\n", " \
    \       long max = 0;\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                max = i;\n                while (n % i\
    \ == 0) {\n                    n /= i;\n                }\n            }\n   \
    \     }\n        if (n > 1) {\n            max = n;\n        }\n        return\
    \ max;\n", "        long largestPrimeFactor = 1;\n        for (long i = 2; i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
