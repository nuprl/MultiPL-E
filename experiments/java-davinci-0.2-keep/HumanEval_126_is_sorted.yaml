name: HumanEval_126_is_sorted
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a list of numbers, return whether or not they are\
  \ sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n\
  \    // number, return False. Assume no negative numbers and only integers.\n  \
  \  // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4,\
  \ 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
  \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
  \    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2,\
  \ 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n   \
  \ public static boolean isSorted(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
  \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
  \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n \
  \   assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
  \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
  \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
  \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
  \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));\n\
  \    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
