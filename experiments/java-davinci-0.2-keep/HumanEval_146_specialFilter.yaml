name: HumanEval_146_specialFilter
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes an array of numbers as input\
  \ and returns \n    // the number of elements in the array that are greater than\
  \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
  \ -2, -3, 45, 21, 109]) => 2\n    public static long specialFilter(ArrayList<Long>\
  \ nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) ==\
  \ (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
  \ (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l,\
  \ (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l,\
  \ (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l))))\
  \ == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x\
    \ % 10 == 1).count();\n", "        return nums.stream().filter(x -> x > 10 &&\
    \ x % 2 == 1 && (x / 10) % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return\
    \ nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && (x / 10) % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(n -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && (x / 10) % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(n -> n > 10 && n % 2 ==\
    \ 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x -> x >\
    \ 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x / 10 % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(x -> x > 10 && x % 2 ==\
    \ 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n -> n >\
    \ 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && isFirstAndLastDigitOdd(x)).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(x -> x > 10 && x % 2 ==\
    \ 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n -> n >\
    \ 10 && isFirstAndLastDigitOdd(n)).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        // Write your\
    \ code here\n        return 0;\n", "        return nums.stream().filter(x -> x\
    \ > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && (x % 10) % 2 != 0 && x / 10\
    \ % 2 != 0).count();\n", "        return nums.stream().filter(n -> n > 10 && n\
    \ % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(num\
    \ -> num > 10 && num % 2 == 1 && num % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        long count = 0;\n\
    \        for (long num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num))\
    \ {\n                count++;\n            }\n        }\n        return count;\n",
  "        return nums.stream().filter(x -> x > 10 && (x % 10) % 2 != 0 && (x / 10)\
    \ % 2 != 0).count();\n", "        return nums.stream().filter(x -> x > 10 && x\
    \ % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(n -> n > 10 && n % 2 ==\
    \ 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(num -> num\
    \ > 10 && isFirstAndLastDigitOdd(num)).count();\n", "        // Write your code\
    \ here\n        return 0;\n", "        return nums.stream().filter(x -> x > 10\
    \ && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n", "        return\
    \ nums.stream().filter(n -> n > 10 && isOdd(n) && isOdd(n % 10)).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        // Write your code here\n        return nums.stream().filter(x -> x > 10\
    \ && x % 2 != 0 && x % 10 != 0).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(num\
    \ -> num > 10 && num % 2 == 1 && num % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return\
    \ nums.stream().filter(n -> n > 10 && isOdd(n) && isOdd(n % 10)).count();\n",
  "        // Write your code here\n        return 0;\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(n -> n > 10 && n % 2 ==\
    \ 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x -> x >\
    \ 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n", "        return nums.stream().filter(num\
    \ -> num > 10 && isFirstAndLastDigitOdd(num)).count();\n", "        // Your code\
    \ here\n        return 0;\n", "        return nums.stream().filter(n -> n > 10\
    \ && isFirstAndLastDigitOdd(n)).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return\
    \ nums.stream().filter(n -> n > 10 && isOdd(n) && isOdd(n % 10)).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(x -> x > 10 && x % 2 ==\
    \ 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x -> x >\
    \ 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(num\
    \ -> num > 10 && num % 2 == 1 && num % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && isFirstAndLastDigitOdd(x)).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n", "        return nums.stream().filter(num\
    \ -> num > 10 && num % 2 == 1 && num % 10 == 1).count();\n", "        return nums.stream().filter(num\
    \ -> num > 10 && num % 2 == 1 && num % 10 == 1).count();\n", "        // Your\
    \ code here\n        return 0;\n", "        return nums.stream().filter(x -> x\
    \ > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(n -> n > 10 && isFirstAndLastDigitOdd(n)).count();\n",
  "        return nums.stream().filter(n -> n > 10 && (n % 10) % 2 == 1 && (n / (long)\
    \ Math.pow(10, (int) Math.log10(n))) % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && (x % 10) % 2 != 0 && (x / 10)\
    \ % 2 != 0).count();\n", "        return nums.stream().filter(x -> x > 10 && x\
    \ % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n",
  "        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(n -> n > 10 && n % 2 ==\
    \ 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n -> n >\
    \ 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).count();\n", "        return\
    \ nums.stream().filter(x -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();\n",
  "        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && (x % 10) % 2 ==\
    \ 1).count();\n", "        return nums.stream().filter(n -> n > 10 && isOdd(n)\
    \ && isOdd(n % 10)).count();\n", "        return nums.stream().filter(n -> n >\
    \ 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();\n", "        return nums.stream().filter(n\
    \ -> n > 10 && n % 2 == 1 && n % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && (x / 10) % 2 == 1).count();\n", "        // Write\
    \ your code here\n        return 0;\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1 && x % 10 == 1).count();\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
