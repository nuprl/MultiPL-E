name: HumanEval_160_do_algebra
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9y_swk4.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n\
    \            } else if (op.equals(\"-\")) {\n                result -= num;\n\
    \            } else if (op.equals(\"*\")) {\n                result *= num;\n\
    \            } else if (op.equals(\"//\")) {\n                result /= num;\n\
    \            } else if (op.equals(\"**\")) {\n                result = (long)\
    \ Math.pow(result, num);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_h2k1qik.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4a3i_xe.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (op.equals(\"+\")) {\n                result += num;\n            } else\
    \ if (op.equals(\"-\")) {\n                result -= num;\n            } else\
    \ if (op.equals(\"*\")) {\n                result *= num;\n            } else\
    \ if (op.equals(\"//\")) {\n                result /= num;\n            } else\
    \ if (op.equals(\"**\")) {\n                result = (long) Math.pow(result, num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa1ifnyjm.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3prevo0_.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2a8bwsac.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnixbsiny.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppyv6c3m_.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppfij33ql.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmd6niwi3.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw4o7efs1.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_p3y3fz0.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvcya335u.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiy7xrz1p.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpccmxvvl5.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdbkzt1jg.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here.\n \
    \       return 0;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7thkzt0.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdhxnj59.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90ppf101.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw76ssoru.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeoflajc3.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3_ua019e.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n\
    \            } else if (op.equals(\"-\")) {\n                result -= num;\n\
    \            } else if (op.equals(\"*\")) {\n                result *= num;\n\
    \            } else if (op.equals(\"//\")) {\n                result /= num;\n\
    \            } else if (op.equals(\"**\")) {\n                result = (long)\
    \ Math.pow(result, num);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy4boeg45.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnh7xu81s.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmf2d3p_c.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpsxxse3.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpronppxxy.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1o5jtbs.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppk8nc0cj.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaxdj_ilr.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp86x1exof.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5x8_x2ap.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5soxhmi.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpijpdfwwr.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (op.equals(\"+\")) {\n                result += num;\n            } else\
    \ if (op.equals(\"-\")) {\n                result -= num;\n            } else\
    \ if (op.equals(\"*\")) {\n                result *= num;\n            } else\
    \ if (op.equals(\"//\")) {\n                result /= num;\n            } else\
    \ if (op.equals(\"**\")) {\n                result = (long) Math.pow(result, num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5gofc__.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dng471r.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6gcobsy.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3goj7l5.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5quq9fb.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwq8q4vj.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15azyu4c.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3pzrpujw.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpryc3dx6x.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrgkx0fn.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxwdm0ckb.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa700odlg.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdbbog7ir.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_x30yjb.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmr4p2vk3.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_l1dq3v.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (op.equals(\"+\")) {\n                result += num;\n            } else\
    \ if (op.equals(\"-\")) {\n                result -= num;\n            } else\
    \ if (op.equals(\"*\")) {\n                result *= num;\n            } else\
    \ if (op.equals(\"//\")) {\n                result /= num;\n            } else\
    \ if (op.equals(\"**\")) {\n                result = (long) Math.pow(result, num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpffrrf8vo.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (op.equals(\"+\")) {\n                result += num;\n            } else\
    \ if (op.equals(\"-\")) {\n                result -= num;\n            } else\
    \ if (op.equals(\"*\")) {\n                result *= num;\n            } else\
    \ if (op.equals(\"//\")) {\n                result /= num;\n            } else\
    \ if (op.equals(\"**\")) {\n                result = (long) Math.pow(result, num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyf2egpfp.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2qp9otnh.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk6mc82yo.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpedltgi1p.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8su2doe.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpevu74yqj.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_94csmo.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp08q_3ghd.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwa03vxx.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpucyxw191.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp577svqde.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2vhknfg.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuij2ig0v.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1oi80mz.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9f_xo909.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf84s3_kl.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7bs4bnsk.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppqugijc_.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39da_zvy.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeeinxid3.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsc01ompq.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnsuzhgqu.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n\
    \            } else if (op.equals(\"-\")) {\n                result -= num;\n\
    \            } else if (op.equals(\"*\")) {\n                result *= num;\n\
    \            } else if (op.equals(\"//\")) {\n                result /= num;\n\
    \            } else if (op.equals(\"**\")) {\n                result = (long)\
    \ Math.pow(result, num);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9kk_jx4.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5hbro8c.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnkwlkqsl.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3k23f6f.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzlfryfy3.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbd9vd2gm.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n\
    \            } else if (op.equals(\"-\")) {\n                result -= num;\n\
    \            } else if (op.equals(\"*\")) {\n                result *= num;\n\
    \            } else if (op.equals(\"//\")) {\n                result /= num;\n\
    \            } else if (op.equals(\"**\")) {\n                result = (long)\
    \ Math.pow(result, num);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl7cqqczf.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpawgnbclu.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qlg3s41.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvdbuxz7y.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyme14l0k.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujh5d9kz.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String operator\
    \ = _operator_.get(i);\n            long operand1 = operand.get(i);\n        \
    \    long operand2 = operand.get(i + 1);\n            if (operator.equals(\"+\"\
    )) {\n                result = operand1 + operand2;\n            } else if (operator.equals(\"\
    -\")) {\n                result = operand1 - operand2;\n            } else if\
    \ (operator.equals(\"*\")) {\n                result = operand1 * operand2;\n\
    \            } else if (operator.equals(\"//\")) {\n                result = operand1\
    \ / operand2;\n            } else if (operator.equals(\"**\")) {\n           \
    \     result = (long) Math.pow(operand1, operand2);\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsyg4afpq.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long operand1 = operand.get(i);\n\
    \            long operand2 = operand.get(i + 1);\n            if (op.equals(\"\
    +\")) {\n                result = operand1 + operand2;\n            } else if\
    \ (op.equals(\"-\")) {\n                result = operand1 - operand2;\n      \
    \      } else if (op.equals(\"*\")) {\n                result = operand1 * operand2;\n\
    \            } else if (op.equals(\"//\")) {\n                result = operand1\
    \ / operand2;\n            } else if (op.equals(\"**\")) {\n                result\
    \ = (long) Math.pow(operand1, operand2);\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42p6mij5.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_lhs0ix.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpovtxsvvt.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphvlemgqh.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplklgad1n.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpky0w41nx.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpewax4w8f.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7a_t1hrf.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1brh6jv.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj0oxg7ul.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeu3xmnmf.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrmojbij.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpon15q95m.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjymyasq9.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpybg019oi.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp56ova64c.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprzy93axx.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0wn156ip.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprn20_7zl.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbm2vuln3.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8vhpguai.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjfpz6mvp.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        return 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0m62ti7m.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4rqmfk5l.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6pcfdjia.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4xtlyt4t.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcy8a6ebt.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String operator\
    \ = _operator_.get(i);\n            long operand1 = operand.get(i);\n        \
    \    long operand2 = operand.get(i + 1);\n            if (operator.equals(\"+\"\
    )) {\n                result = operand1 + operand2;\n            } else if (operator.equals(\"\
    -\")) {\n                result = operand1 - operand2;\n            } else if\
    \ (operator.equals(\"*\")) {\n                result = operand1 * operand2;\n\
    \            } else if (operator.equals(\"//\")) {\n                result = operand1\
    \ / operand2;\n            } else if (operator.equals(\"**\")) {\n           \
    \     result = (long) Math.pow(operand1, operand2);\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46f7bopm.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwm74khpv.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long op2 = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ op2;\n                    break;\n                case \"-\":\n            \
    \        result -= op2;\n                    break;\n                case \"*\"\
    :\n                    result *= op2;\n                    break;\n          \
    \      case \"//\":\n                    result /= op2;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ op2);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_jwvusoz.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7803px5a.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4eyhq0d.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6z47zsm.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzdjvo784.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1b9yd3sw.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbqiwyqn.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqsrlezix.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc26ulent.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbw3hx1ye.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String operator\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (operator.equals(\"+\")) {\n                result += num;\n          \
    \  } else if (operator.equals(\"-\")) {\n                result -= num;\n    \
    \        } else if (operator.equals(\"*\")) {\n                result *= num;\n\
    \            } else if (operator.equals(\"//\")) {\n                result /=\
    \ num;\n            } else if (operator.equals(\"**\")) {\n                result\
    \ = (long) Math.pow(result, num);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuiuhvspq.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfujbicv5.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82ka2g_c.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft2m6sr9.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9zz8thv5.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpal301n1e.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_y7z3xku.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0iq39sv.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp33d309vd.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl42br2ci.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkquigkda.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here.\n \
    \       return 0;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps670wbxi.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi6gh6xuk.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp24fe6gk5.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0mviwnl.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi2uj59qp.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4efzzorz.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpllhg0wxr.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz1k8njsn.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (op.equals(\"+\")) {\n                result += num;\n            } else\
    \ if (op.equals(\"-\")) {\n                result -= num;\n            } else\
    \ if (op.equals(\"*\")) {\n                result *= num;\n            } else\
    \ if (op.equals(\"//\")) {\n                result /= num;\n            } else\
    \ if (op.equals(\"**\")) {\n                result = (long) Math.pow(result, num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpljbz8b_2.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ql7_i9c.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpharcppj6.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpccv57r1y.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpzdi9vv.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here.\n \
    \       return 0;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54u3svbx.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6mffwtf7.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvsqpd5wf.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9kwal4fx.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshs5_3v4.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkv7n6tc_.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj3z3_4w6.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptnrumwlo.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5opbsrw9.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyueq6uq2.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (op.equals(\"+\")) {\n                result += num;\n            } else\
    \ if (op.equals(\"-\")) {\n                result -= num;\n            } else\
    \ if (op.equals(\"*\")) {\n                result *= num;\n            } else\
    \ if (op.equals(\"//\")) {\n                result /= num;\n            } else\
    \ if (op.equals(\"**\")) {\n                result = (long) Math.pow(result, num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ps4ykcr.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"/\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"^\")) {\n         \
    \       result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp80n_89_4.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq556n17v.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        return 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ys1g4tl.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpetcw9e83.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String operator\
    \ = _operator_.get(i);\n            long nextOperand = operand.get(i + 1);\n \
    \           if (operator.equals(\"+\")) {\n                result += nextOperand;\n\
    \            } else if (operator.equals(\"-\")) {\n                result -= nextOperand;\n\
    \            } else if (operator.equals(\"*\")) {\n                result *= nextOperand;\n\
    \            } else if (operator.equals(\"//\")) {\n                result /=\
    \ nextOperand;\n            } else if (operator.equals(\"**\")) {\n          \
    \      result = (long) Math.pow(result, nextOperand);\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6d8epjit.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqsqys2ea.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv4qqde5v.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78yeom7q.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb7l97on6.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2x57pxyw.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpti7jo1t5.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n\
    \            } else if (op.equals(\"-\")) {\n                result -= num;\n\
    \            } else if (op.equals(\"*\")) {\n                result *= num;\n\
    \            } else if (op.equals(\"//\")) {\n                result /= num;\n\
    \            } else if (op.equals(\"**\")) {\n                result = (long)\
    \ Math.pow(result, num);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_9et_gxl.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        return 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9wb4kahf.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qsv6idf.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqmc1hd_.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13bide_7.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mafsb5z.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg660l5sr.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjeu_8i9h.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n\
    \            } else if (op.equals(\"-\")) {\n                result -= num;\n\
    \            } else if (op.equals(\"*\")) {\n                result *= num;\n\
    \            } else if (op.equals(\"//\")) {\n                result /= num;\n\
    \            } else if (op.equals(\"**\")) {\n                result = (long)\
    \ Math.pow(result, num);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__5er9cv.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzqy32b_.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7nywbq4.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp96_9lolg.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ num;\n                    break;\n                case \"-\":\n            \
    \        result -= num;\n                    break;\n                case \"*\"\
    :\n                    result *= num;\n                    break;\n          \
    \      case \"//\":\n                    result /= num;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ num);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppbc6vy5x.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzjtqcsvy.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2cvljrwe.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String operator\
    \ = _operator_.get(i);\n            long operand_1 = operand.get(i);\n       \
    \     long operand_2 = operand.get(i + 1);\n            switch (operator) {\n\
    \                case \"+\":\n                    result = operand_1 + operand_2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = operand_1 - operand_2;\n                    break;\n              \
    \  case \"*\":\n                    result = operand_1 * operand_2;\n        \
    \            break;\n                case \"//\":\n                    result\
    \ = operand_1 / operand_2;\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(operand_1, operand_2);\n \
    \                   break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppewh1aad.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfy8raey.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6k12ug2.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long num = operand.get(i + 1);\n         \
    \   if (op.equals(\"+\")) {\n                result += num;\n            } else\
    \ if (op.equals(\"-\")) {\n                result -= num;\n            } else\
    \ if (op.equals(\"*\")) {\n                result *= num;\n            } else\
    \ if (op.equals(\"//\")) {\n                result /= num;\n            } else\
    \ if (op.equals(\"**\")) {\n                result = (long) Math.pow(result, num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnplthi8f.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String operator\
    \ = _operator_.get(i);\n            long operand1 = operand.get(i);\n        \
    \    long operand2 = operand.get(i + 1);\n            switch (operator) {\n  \
    \              case \"+\":\n                    result = operand1 + operand2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = operand1 - operand2;\n                    break;\n                case\
    \ \"*\":\n                    result = operand1 * operand2;\n                \
    \    break;\n                case \"//\":\n                    result = operand1\
    \ / operand2;\n                    break;\n                case \"**\":\n    \
    \                result = (long) Math.pow(operand1, operand2);\n             \
    \       break;\n            }\n        }\n        return result;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaaolcij1.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcr4s3_sp.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           switch (_operator_.get(i)) {\n                case \"+\":\n      \
    \              result += operand.get(i + 1);\n                    break;\n   \
    \             case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf3o2ys_o.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqjq391ck.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            switch (_operator_.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb02mlr83.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           if (_operator_.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"-\"))\
    \ {\n                result -= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"**\")) {\n        \
    \        result = (long) Math.pow(result, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsl1n__76.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            String op\
    \ = _operator_.get(i);\n            long op2 = operand.get(i + 1);\n         \
    \   switch (op) {\n                case \"+\":\n                    result +=\
    \ op2;\n                    break;\n                case \"-\":\n            \
    \        result -= op2;\n                    break;\n                case \"*\"\
    :\n                    result *= op2;\n                    break;\n          \
    \      case \"//\":\n                    result /= op2;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ op2);\n                    break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_uaply4.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < _operator_.size(); i++) {\n \
    \           String op = _operator_.get(i);\n            long num = operand.get(i\
    \ + 1);\n            switch (op) {\n                case \"+\":\n            \
    \        result += num;\n                    break;\n                case \"-\"\
    :\n                    result -= num;\n                    break;\n          \
    \      case \"*\":\n                    result *= num;\n                    break;\n\
    \                case \"//\":\n                    result /= num;\n          \
    \          break;\n                case \"**\":\n                    result =\
    \ (long) Math.pow(result, num);\n                    break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_sia_4kp.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3mpw839.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < _operator_.size(); i++) {\n            if (_operator_.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"-\")) {\n                result -= operand.get(i\
    \ + 1);\n            } else if (_operator_.get(i).equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (_operator_.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (_operator_.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9oxxj35r.java:47)\n"
  exit_code: 1
  status: Exception
