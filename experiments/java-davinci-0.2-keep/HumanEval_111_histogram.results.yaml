name: HumanEval_111_histogram
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ve9rfc5.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpho23ee66.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3tpqqg8j.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbmi1d8fq.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpge7nawd9.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ohyat3o.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiihaiovo.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyna28cv8.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            } else {\n                map.put(word, 1L);\n          \
    \  }\n        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpswuexqwd.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            if (result.containsKey(letter)) {\n       \
    \         result.put(letter, result.get(letter) + 1);\n            } else {\n\
    \                result.put(letter, 1L);\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1erb6ii.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpn57777y4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpxjrgs0xc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp58er8gjm.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpola4gyen.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnw8mqwqc.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4u1vw3tl.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxc3zsx1f.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpa98ggci8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkkd3wt8h.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpy7359ilz.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        HashMap<String,\
    \ Long> counts = new HashMap<String, Long>();\n        for (String letter : letters)\
    \ {\n            if (counts.containsKey(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1);\n            } else {\n                counts.put(letter,\
    \ 1L);\n            }\n        }\n        long max = 0;\n        for (String letter\
    \ : counts.keySet()) {\n            if (counts.get(letter) > max) {\n        \
    \        max = counts.get(letter);\n            }\n        }\n        for (String\
    \ letter : counts.keySet()) {\n            if (counts.get(letter) == max) {\n\
    \                result.put(letter, max);\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp95vjc3q0.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzirf92ks.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        if (test.length() == 0) {\n            return map;\n        }\n     \
    \   String[] arr = test.split(\" \");\n        for (String s : arr) {\n      \
    \      if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n\
    \            } else {\n                map.put(s, 1L);\n            }\n      \
    \  }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6szij0h9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] words = test.split(\" \");\n        Arrays.sort(words);\n\
    \        String current = words[0];\n        int count = 1;\n        for (int\
    \ i = 1; i < words.length; i++) {\n            if (words[i].equals(current)) {\n\
    \                count++;\n            } else {\n                result.put(current,\
    \ (long) count);\n                current = words[i];\n                count =\
    \ 1;\n            }\n        }\n        result.put(current, (long) count);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fe859yr.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpycbjwa9z.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu8k_z722.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7d6mggn.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp38t0zi53.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4097udow.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpri6l4imk.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp2r540l3p.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        HashMap<String,\
    \ Long> counts = new HashMap<String, Long>();\n        for (String letter : letters)\
    \ {\n            if (counts.containsKey(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1);\n            } else {\n                counts.put(letter,\
    \ 1L);\n            }\n        }\n        long max = counts.values().stream().max(Long::compare).get();\n\
    \        for (String key : counts.keySet()) {\n            if (counts.get(key)\
    \ == max) {\n                result.put(key, max);\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv2543ck7.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcdp3jfsh.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpabbz1di5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcj6i62xv.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp706pr6w2.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggouc6l2.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] arr = test.split(\" \");\n        for (String s : arr) {\n \
    \           if (map.containsKey(s)) {\n                map.put(s, map.get(s) +\
    \ 1);\n            } else {\n                map.put(s, 1L);\n            }\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpulitcvap.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprshc9vgi.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7oe5ytbq.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_6eqrv5p.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        Arrays.sort(letters);\n\
    \        String current = letters[0];\n        long count = 1;\n        for (int\
    \ i = 1; i < letters.length; i++) {\n            if (letters[i].equals(current))\
    \ {\n                count++;\n            } else {\n                result.put(current,\
    \ count);\n                current = letters[i];\n                count = 1;\n\
    \            }\n        }\n        result.put(current, count);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdx6m8k28.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        for (String letter : test.split(\" \")) {\n          \
    \  if (histogram.containsKey(letter)) {\n                histogram.put(letter,\
    \ histogram.get(letter) + 1);\n            } else {\n                histogram.put(letter,\
    \ 1L);\n            }\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbuxdcyj.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        HashMap<String,\
    \ Long> counts = new HashMap<String, Long>();\n        for (String letter : letters)\
    \ {\n            if (counts.containsKey(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1);\n            } else {\n                counts.put(letter,\
    \ 1L);\n            }\n        }\n        Long max = Collections.max(counts.values());\n\
    \        for (String letter : counts.keySet()) {\n            if (counts.get(letter)\
    \ == max) {\n                result.put(letter, max);\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpkq_51r7l.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpzo9f5kn9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqugg6_fy.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvdwoal6.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9w0gvh7g.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsq1itsri.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd7jfjdg6.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        Arrays.sort(letters);\n\
    \        String current = letters[0];\n        int count = 1;\n        for (int\
    \ i = 1; i < letters.length; i++) {\n            if (letters[i].equals(current))\
    \ {\n                count++;\n            } else {\n                result.put(current,\
    \ (long) count);\n                current = letters[i];\n                count\
    \ = 1;\n            }\n        }\n        result.put(current, (long) count);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9v1p8rq7.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(x -> x, Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwk2o52i_.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.groupingBy(x -> x,\
    \ Collectors.counting()));\n                    ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D\
    \ are type-variables:\n    R extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    A#1 extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    T#1 extends Object declared in interface Stream\n   \
    \ K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplw_yr_ab.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjzc5dre0.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphmqg2q9z.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf5snm2yy.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo3qqn_95.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpn9w4d3bh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp44jolexe.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpesmq_d33.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mifbwiy.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjp9meg4c.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] testArray = test.split(\" \");\n        Arrays.sort(testArray);\n\
    \        int count = 1;\n        for (int i = 0; i < testArray.length - 1; i++)\
    \ {\n            if (testArray[i].equals(testArray[i + 1])) {\n              \
    \  count++;\n            } else {\n                result.put(testArray[i], (long)\
    \ count);\n                count = 1;\n            }\n        }\n        result.put(testArray[testArray.length\
    \ - 1], (long) count);\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9byz0b96.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpryw_gdlw.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpob3wdg6l.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        for (String letter\
    \ : letters) {\n            if (result.containsKey(letter)) {\n              \
    \  result.put(letter, result.get(letter) + 1);\n            } else {\n       \
    \         result.put(letter, 1L);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppfh5rzav.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8aulgdlj.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            Long count = result.get(letter);\n        \
    \    if (count == null) {\n                result.put(letter, 1L);\n         \
    \   } else {\n                result.put(letter, count + 1);\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1fe10h0.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw66bjj54.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqtprv_b2.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph7mtlihv.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6bnvesjq.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(x -> x, Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz0lsy2lc.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.groupingBy(x -> x,\
    \ Collectors.counting()));\n                    ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D\
    \ are type-variables:\n    R extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    A#1 extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    T#1 extends Object declared in interface Stream\n   \
    \ K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        for (String letter\
    \ : letters) {\n            if (result.containsKey(letter)) {\n              \
    \  result.put(letter, result.get(letter) + 1);\n            } else {\n       \
    \         result.put(letter, 1L);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiatof66r.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] words = test.split(\" \");\n        HashMap<String,\
    \ Long> map = new HashMap<String, Long>();\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            } else {\n                map.put(word, 1L);\n          \
    \  }\n        }\n        Long max = 0L;\n        for (String key : map.keySet())\
    \ {\n            if (map.get(key) > max) {\n                max = map.get(key);\n\
    \            }\n        }\n        for (String key : map.keySet()) {\n       \
    \     if (map.get(key) == max) {\n                result.put(key, max);\n    \
    \        }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz5bsfzj5.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] arr = test.split(\" \");\n        for (String s : arr) {\n \
    \           if (map.containsKey(s)) {\n                map.put(s, map.get(s) +\
    \ 1);\n            } else {\n                map.put(s, 1L);\n            }\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxyowyvbq.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] arr = test.split(\" \");\n        for (String s : arr) {\n \
    \           if (map.containsKey(s)) {\n                map.put(s, map.get(s) +\
    \ 1);\n            } else {\n                map.put(s, 1L);\n            }\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq5kw9y_h.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_q3_6ra.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6wjz_yd2.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzai__0wl.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.groupingBy(s -> s,\
    \ Collectors.counting()));\n                    ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D\
    \ are type-variables:\n    R extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    A#1 extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    T#1 extends Object declared in interface Stream\n   \
    \ K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp7l8xbcev.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptr37a494.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_osfyqhg.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt4kr2b37.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ef6vvqo.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpardr9t6r.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        // Your code here\n        return null;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpw_62239x.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_b_tm00b.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptuhnjzk7.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5lvtxsb.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbt58dt3.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdrp8ntkh.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzipr0mz8.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4yfn8e3x.java:20: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] words = test.split(\" \");\n        HashMap<String,\
    \ Long> map = new HashMap<String, Long>();\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            } else {\n                map.put(word, 1L);\n          \
    \  }\n        }\n        long max = map.values().stream().max(Long::compare).get();\n\
    \        for (String key : map.keySet()) {\n            if (map.get(key) == max)\
    \ {\n                result.put(key, max);\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        for (String letter\
    \ : letters) {\n            if (result.containsKey(letter)) {\n              \
    \  result.put(letter, result.get(letter) + 1);\n            } else {\n       \
    \         result.put(letter, 1L);\n            }\n        }\n        long max\
    \ = result.values().stream().max(Long::compare).get();\n        HashMap<String,\
    \ Long> result2 = new HashMap<String, Long>();\n        for (String letter : result.keySet())\
    \ {\n            if (result.get(letter) == max) {\n                result2.put(letter,\
    \ result.get(letter));\n            }\n        }\n        return result2;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnic2kpiq.java:20: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg9_rut6_.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbogfcvc9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmkas5sj5.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] split = test.split(\" \");\n        for (String s : split) {\n\
    \            if (map.containsKey(s)) {\n                map.put(s, map.get(s)\
    \ + 1);\n            } else {\n                map.put(s, 1L);\n            }\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz6polhun.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi13xkld4.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgb5h_fcw.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.groupingBy(s -> s,\
    \ Collectors.counting()));\n                    ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D\
    \ are type-variables:\n    R extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    A#1 extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    T#1 extends Object declared in interface Stream\n   \
    \ K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy644mq6r.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpt35ylkxm.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_047pzs.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7d8xl5v1.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0bizln7.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5j4t6w4.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfqx7301x.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyltoqf3x.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gugudpq.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp868hblvi.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo50i00ur.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpqek3wm24.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        HashMap<String,\
    \ Long> count = new HashMap<String, Long>();\n        for (String letter : letters)\
    \ {\n            if (count.containsKey(letter)) {\n                count.put(letter,\
    \ count.get(letter) + 1);\n            } else {\n                count.put(letter,\
    \ 1L);\n            }\n        }\n        Long max = Collections.max(count.values());\n\
    \        for (String letter : count.keySet()) {\n            if (count.get(letter)\
    \ == max) {\n                result.put(letter, max);\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] words = test.split(\" \");\n        HashMap<String,\
    \ Long> map = new HashMap<String, Long>();\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            } else {\n                map.put(word, 1L);\n          \
    \  }\n        }\n        Long max = Collections.max(map.values());\n        for\
    \ (String key : map.keySet()) {\n            if (map.get(key) == max) {\n    \
    \            result.put(key, max);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp83ddla63.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmxm0ausy.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp48lzqdjy.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9zvi6ia3.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65k334ci.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xa267ii.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            if (result.containsKey(letter)) {\n       \
    \         result.put(letter, result.get(letter) + 1);\n            } else {\n\
    \                result.put(letter, 1L);\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne0on3x4.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpg79jrsui.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpzhcgpjf_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxhhs5ghv.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] words = test.split(\" \");\n        HashMap<String,\
    \ Long> map = new HashMap<String, Long>();\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            } else {\n                map.put(word, 1L);\n          \
    \  }\n        }\n        long max = 0;\n        for (String key : map.keySet())\
    \ {\n            if (map.get(key) > max) {\n                max = map.get(key);\n\
    \            }\n        }\n        for (String key : map.keySet()) {\n       \
    \     if (map.get(key) == max) {\n                result.put(key, max);\n    \
    \        }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] testArray = test.split(\" \");\n        for (String\
    \ letter : testArray) {\n            if (result.containsKey(letter)) {\n     \
    \           result.put(letter, result.get(letter) + 1);\n            } else {\n\
    \                result.put(letter, 1L);\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgscy43_9.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            if (histogram.containsKey(letter)) {\n    \
    \            histogram.put(letter, histogram.get(letter) + 1);\n            }\
    \ else {\n                histogram.put(letter, 1L);\n            }\n        }\n\
    \        return histogram;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ped8bp2.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvvyi8d1.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp340nhqou.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpthxhn24n.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjtsqp32h.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpfx7cgp10.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwxpdgd5m.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp10s_f99j.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ezxi2mr.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpp4aqsnb1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp60h_70wx.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpl02vm4h_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae11hpnl.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.groupingBy(s -> s,\
    \ Collectors.counting()));\n                    ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D\
    \ are type-variables:\n    R extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    A#1 extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    T#1 extends Object declared in interface Stream\n   \
    \ K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvc4rjqwj.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuinua5xb.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwr5_mgxz.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9kx9iyiq.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzy32bsc4.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qob_wfh.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpud_zo7ul.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_tw0nik8.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpbd2hg3sr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg1kwjg5o.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsnorvz79.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplb421s_x.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp33ixf0lx.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr8d045y.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7fyby84c.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7mm_die.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxzwfs8c.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpak7ok0es.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp__9y4ms7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph_87w41v.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5a051wzq.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwhb9upy7.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7pluhe5.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpq7k5ktr_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpngv4bisa.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] words = test.split(\" \");\n        HashMap<String,\
    \ Long> counts = new HashMap<String, Long>();\n        for (String word : words)\
    \ {\n            if (counts.containsKey(word)) {\n                counts.put(word,\
    \ counts.get(word) + 1);\n            } else {\n                counts.put(word,\
    \ 1L);\n            }\n        }\n        long max = 0;\n        for (String word\
    \ : counts.keySet()) {\n            if (counts.get(word) > max) {\n          \
    \      max = counts.get(word);\n            }\n        }\n        for (String\
    \ word : counts.keySet()) {\n            if (counts.get(word) == max) {\n    \
    \            result.put(word, max);\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp58t7qt45.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpget23a23.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1qkry1cf.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm9uhdy3f.java:20: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmptcya3i25.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu00rwkhv.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        Arrays.sort(letters);\n\
    \        String currentLetter = letters[0];\n        long currentCount = 1;\n\
    \        for (int i = 1; i < letters.length; i++) {\n            if (letters[i].equals(currentLetter))\
    \ {\n                currentCount++;\n            } else {\n                result.put(currentLetter,\
    \ currentCount);\n                currentLetter = letters[i];\n              \
    \  currentCount = 1;\n            }\n        }\n        result.put(currentLetter,\
    \ currentCount);\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dk_8wds.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpremrl27g.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflj0b5gw.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2u3xu45b.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfg4sir4y.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp1isfbbmh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5c4eqrve.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        // Your code here\n        return null;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpee39ohdv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplweh9y4a.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptkp0yfkq.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] arr = test.split(\" \");\n        for (String s : arr) {\n \
    \           if (map.containsKey(s)) {\n                map.put(s, map.get(s) +\
    \ 1);\n            } else {\n                map.put(s, 1L);\n            }\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqtr7mq0o.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpj6dyiofi.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdo0bs8tu.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2b1guobl.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvejalc02.java:20: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1L);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppewfoumr.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpcr319_f8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<String,\
    \ Long>();\n        if (test.length() == 0) {\n            return result;\n  \
    \      }\n        String[] letters = test.split(\" \");\n        HashMap<String,\
    \ Long> counts = new HashMap<String, Long>();\n        for (String letter : letters)\
    \ {\n            if (counts.containsKey(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1);\n            } else {\n                counts.put(letter,\
    \ 1L);\n            }\n        }\n        Long max = Collections.max(counts.values());\n\
    \        for (Map.Entry<String, Long> entry : counts.entrySet()) {\n         \
    \   if (entry.getValue() == max) {\n                result.put(entry.getKey(),\
    \ entry.getValue());\n            }\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn4r0wxp1.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpy1uxn03g.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Arrays.stream(test.split(\" \"\
    ))\n            .collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq519f1j0.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.groupingBy(s -> s,\
    \ Collectors.counting()));\n                    ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D\
    \ are type-variables:\n    R extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    A#1 extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    T#1 extends Object declared in interface Stream\n   \
    \ K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        return Stream.of(test.split(\" \"))\n\
    \                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7p5s4dop.java:20: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
