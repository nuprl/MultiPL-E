name: HumanEval_116_sort_array
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // In this Kata, you have to sort an array of non-negative\
  \ integers according to\n    // number of ones in their binary representation in\
  \ ascending order.\n    // For similar number of ones, sort based on decimal value.\n\
  \    // It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4])\
  \ == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
  \ -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    public static\
  \ ArrayList<Long> sortArray(ArrayList<Long> arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l,\
  \ (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l,\
  \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
  \ (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l,\
  \ (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l,\
  \ (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l,\
  \ (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l,\
  \ (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> res = new ArrayList<Long>();\n        ArrayList<Long>\
    \ neg = new ArrayList<Long>();\n        ArrayList<Long> pos = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            if (l < 0) {\n                neg.add(l);\n\
    \            } else {\n                pos.add(l);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        for (Long\
    \ l : neg) {\n            res.add(l);\n        }\n        for (Long l : pos) {\n\
    \            res.add(l);\n        }\n        return res;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i >= 0) {\n                positive.add(i);\n      \
    \      } else {\n                negative.add(i);\n            }\n        }\n\
    \        Collections.sort(positive, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                return Long.bitCount(o1)\
    \ - Long.bitCount(o2);\n            }\n        });\n        Collections.sort(negative,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return Long.bitCount(o2) - Long.bitCount(o1);\n\
    \            }\n        });\n        for (Long i : positive) {\n            result.add(i);\n\
    \        }\n        for (Long i : negative) {\n            result.add(i);\n  \
    \      }\n        return result;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int onesA = Long.bitCount(a);\n                int onesB = Long.bitCount(b);\n\
    \                if (onesA == onesB) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return onesA - onesB;\n       \
    \         }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> zeros = new ArrayList<>();\n\
    \        ArrayList<Long> ones = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            if (i == 0) {\n                zeros.add(i);\n            } else\
    \ {\n                ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ forties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<>();\n        ArrayList<Long> zeros = new ArrayList<>();\n       \
    \ ArrayList<Long> ones = new ArrayList<>();\n        for (Long i : arr) {\n  \
    \          if (i == 0) {\n                zeros.add(i);\n            } else {\n\
    \                ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        Collections.sort(zeros);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n      \
    \          zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZero = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositive =\
    \ new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZero\
    \ = new ArrayList", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long num = arr.get(i);\n\
    \            if (sorted.size() == 0) {\n                sorted.add(num);\n   \
    \         } else {\n                int j = 0;\n                while (j < sorted.size())\
    \ {\n                    Long sortedNum = sorted.get(j);\n                   \
    \ if (numOfOnes(num) < numOfOnes(sortedNum)) {\n                        sorted.add(j,\
    \ num);\n                        break;\n                    } else if (numOfOnes(num)\
    \ == numOfOnes(sortedNum)) {\n                        if (num < sortedNum) {\n\
    \                            sorted.add(j, num);\n                           \
    \ break;\n                        }\n                    }\n                 \
    \   j++;\n                }\n                if (j == sorted.size()) {\n     \
    \               sorted.add(num);\n                }\n            }\n        }\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 0) {\n                zeros.add(i);\n            } else {\n          \
    \      ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        // your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else {\n              \
    \      if (a > b) {\n                        return 1;\n                    }\
    \ else if (a < b) {\n                        return -1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        for (Long num\
    \ : arr) {\n            if (num < 0) {\n                negatives.add(num);\n\
    \            } else {\n                positives.add(num);\n            }\n  \
    \      }\n        Collections.sort(positives, new Comparator<Long>() {\n     \
    \       @Override\n            public int compare(Long a, Long b) {\n        \
    \        String aBin = Long.toBinaryString(a);\n                String bBin =\
    \ Long.toBinaryString(b);\n                int aOnes = 0;\n                int\
    \ bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++) {\n    \
    \                if (aBin.charAt(i) == '1') {\n                        aOnes++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ bBin.length(); i++) {\n                    if (bBin.charAt(i) == '1') {\n  \
    \                      bOnes++;\n                    }\n                }\n  \
    \              if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long num : arr) {\n            int index = 0;\n            for (Long\
    \ sortedNum : sorted) {\n                if (numOfOnes(num) < numOfOnes(sortedNum))\
    \ {\n                    break;\n                } else if (numOfOnes(num) ==\
    \ numOfOnes(sortedNum)) {\n                    if (num < sortedNum) {\n      \
    \                  break;\n                    }\n                }\n        \
    \        index++;\n            }\n            sorted.add(index, num);\n      \
    \  }\n        return sorted;\n", "        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted30 = new ArrayList<", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        ArrayList<Long> positives = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                negatives.add(i);\n      \
    \      } else {\n                positives.add(i);\n            }\n        }\n\
    \        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 0) {\n                zeros.add(i);\n            } else {\n          \
    \      ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        sorted.addAll(negative);\n  \
    \      sorted.addAll(positive);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> sorted_ones = new ArrayList<>();\n\
    \        ArrayList<Long> sorted_zeros = new ArrayList<>();\n        for (Long\
    \ i : arr) {\n            if (Long.bitCount(i) == 0) {\n                sorted_zeros.add(i);\n\
    \            } else {\n                sorted_ones.add(i);\n            }\n  \
    \      }\n        Collections.sort(sorted_ones);\n        Collections.sort(sorted_zeros);\n\
    \        sorted.addAll(sorted_ones);\n        sorted.addAll(sorted_zeros);\n \
    \       return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         String s1 = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int ones1 = 0;\n                int ones2 = 0;\n            \
    \    for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        ones1++;\n                    }\n       \
    \         }\n                for (int i = 0; i < s2.length(); i++) {\n       \
    \             if (s2.charAt(i) == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return Integer.compare(ones1, ones2);\n                }\n\
    \            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted3 = new ArrayList<Long>();\n        ArrayList<Long> sorted4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted6 = new ArrayList<Long>();\n        ArrayList<Long> sorted7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted9 = new ArrayList<Long>();\n        ArrayList<Long> sorted10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted12 = new ArrayList<Long>();\n        ArrayList<Long> sorted13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted15 = new ArrayList<Long>();\n        ArrayList<Long> sorted16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted18 = new ArrayList<Long>();\n        ArrayList<Long> sorted19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted21 = new ArrayList<Long>();\n        ArrayList<Long> sorted22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted24 = new ArrayList<Long>();\n        ArrayList<Long> sorted25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted27 = new ArrayList<Long>();\n        ArrayList<Long> sorted28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted29 = new ArrayList<Long>();\n        ArrayList",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n     \
    \   Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                int o1Ones\
    \ = countOnes(o1);\n                int o2Ones = countOnes(o2);\n            \
    \    if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n \
    \               } else {\n                    return o1Ones - o2Ones;\n      \
    \          }\n            }\n        });\n        return sorted;\n", "       \
    \ // Your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new", " \
    \       ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else {\n               \
    \     if (a < b) {\n                        return -1;\n                    }\
    \ else if (a > b) {\n                        return 1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> zeros = new ArrayList<>();\n\
    \        ArrayList<Long> ones = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            if (Long.bitCount(i) == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(zeros);\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n", "        // your code\
    \ here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        ArrayList<Long> positives = new\
    \ ArrayList<Long>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                positives.add(i);\n\
    \            }\n        }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 0) {\n                zeros.add(i);\n            } else {\n          \
    \      ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyones = new ArrayList<Long>();\n        ArrayList<Long> thirtytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> thirtythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirtyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyfives = new ArrayList<Long>();\n        ArrayList<Long> thirtysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> thirtysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long>", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new", " \
    \       ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        for (Long i : arr) {\n            sorted.add(i);\n\
    \        }\n        sorted.sort(Comparator.comparing(Problem::countOnes));\n \
    \       for (Long i : sorted) {\n            sortedByOnes.add(i);\n        }\n\
    \        sortedByOnes.sort(Comparator.comparing(Problem::decimalValue));\n   \
    \     for (Long i : sortedByOnes) {\n            sortedByDecimal.add(i);\n   \
    \     }\n        return sortedByDecimal;\n", "        ArrayList<Long> sorted =\
    \ new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        for (Long num\
    \ : arr) {\n            if (num == 0) {\n                zeros.add(num);\n   \
    \         } else if (num == 1) {\n                ones.add(num);\n           \
    \ } else {\n                sorted.add(num);\n            }\n        }\n     \
    \   Collections.sort(sorted);\n        for (Long num : sorted) {\n           \
    \ if (num % 2 == 0) {\n                zeros.add(num);\n            } else {\n\
    \                ones.add(num);\n            }\n        }\n        zeros.addAll(ones);\n\
    \        return zeros;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i == 0)\
    \ {\n                zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                sorted.add(i);\n            }\n       \
    \ }\n        Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                int o1Ones\
    \ = countOnes(o1);\n                int o2Ones = countOnes(o2);\n            \
    \    if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n \
    \               } else {\n                    return o1Ones - o2Ones;\n      \
    \          }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted30 = new ArrayList<Long>();\n        Array", " \
    \       ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negs\
    \ = new ArrayList<>();\n        ArrayList<Long> poss = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i < 0) {\n                negs.add(i);\n\
    \            } else {\n                poss.add(i);\n            }\n        }\n\
    \        Collections.sort(negs);\n        Collections.sort(poss);\n        for\
    \ (Long i : negs) {\n            sorted.add(i);\n        }\n        for (Long\
    \ i : poss) {\n            sorted.add(i);\n        }\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n     \
    \   Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = (int) aBin.chars().filter(ch -> ch == '1').count();\n\
    \                int bOnes = (int) bBin.chars().filter(ch -> ch == '1').count();\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i >= 0) {\n                positive.add(i);\n      \
    \      } else {\n                negative.add(i);\n            }\n        }\n\
    \        Collections.sort(positive, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                String s1\
    \ = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        Collections.sort(negative, new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long o1, Long o2) {\n   \
    \             String s1 = Long.toBinaryString(o1);\n                String s2\
    \ = Long.toBinaryString(o2);\n                int count1 = 0;\n              \
    \  int count2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n\
    \                    if (s1.charAt(i) == '1') {\n                        count1++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ s2.length(); i++) {\n                    if (s2.charAt(i) == '1') {\n      \
    \                  count2++;\n                    }\n                }\n     \
    \           if (count1 == count2) {\n                    return o1.compareTo",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           sorted.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n", "        // Write\
    \ your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n  \
    \      ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long num : arr) {\n            if\
    \ (num == 0) {\n                zeros.add(num);\n            } else {\n      \
    \          ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            sorted.add(i);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int ones1 =\
    \ 0;\n                int ones2 = 0;\n                for (char c : s1.toCharArray())\
    \ {\n                    if (c == '1') {\n                        ones1++;\n \
    \                   }\n                }\n                for (char c : s2.toCharArray())\
    \ {\n                    if (c == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return o1.compareTo(o2);\n                }\n       \
    \         return ones1 - ones2;\n            }\n        });\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = 0;\n            while (num > 0) {\n                ones += num % 2;\n    \
    \            num /= 2;\n            }\n            sorted.add(ones);\n       \
    \ }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j\
    \ = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i) > sorted.get(j))\
    \ {\n                    long temp = sorted.get(i);\n                    sorted.set(i,\
    \ sorted.get(j));\n                    sorted.set(j, temp);\n                \
    \    temp = arr.get(i);\n                    arr.set(i, arr.get(j));\n       \
    \             arr.set(j, temp);\n                }\n            }\n        }\n\
    \        return arr;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i < 0) {\n                negative.add(i);\n            } else {\n    \
    \            positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        for (Long i : negative) {\n    \
    \        sorted.add(i);\n        }\n        for (Long i : positive) {\n      \
    \      sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                int aOnes = Long.bitCount(a);\n              \
    \  int bOnes = Long.bitCount(b);\n                if (aOnes == bOnes) {\n    \
    \                return a.compareTo(b);\n                } else {\n          \
    \          return aOnes - bOnes;\n                }\n            }\n        });\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i == 0)\
    \ {\n                zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = 0;\n            while (num > 0) {\n                ones += num % 2;\n    \
    \            num /= 2;\n            }\n            sorted.add(ones);\n       \
    \ }\n        Collections.sort(sorted);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            if (i == 0) {\n                zeros.add(i);\n         \
    \   } else {\n                ones.add(i);\n            }\n        }\n       \
    \ Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i == 0)\
    \ {\n                zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        for (Long n :\
    \ arr) {\n            if (n == 0) {\n                zeros.add(n);\n         \
    \   } else {\n                ones.add(n);\n            }\n        }\n       \
    \ Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> positive = new ArrayList<>();\n        ArrayList<Long>\
    \ negative = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                negative.add(i);\n            } else {\n        \
    \        positive.add(i);\n            }\n        }\n        Collections.sort(positive,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int count1 =\
    \ 0;\n                int count2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     count1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        count2++;\n                    }\n         \
    \       }\n                if (count1 == count2) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return count1\
    \ - count2;\n                }\n            }\n        });\n        Collections.sort(negative,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int count1 =\
    \ 0;\n                int count2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     count1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        count2++;\n                    }\n         \
    \       }\n                if (count1 == count2) {\n                    return\
    \ o1.compareTo", "        ArrayList<Long> sorted = new ArrayList<Long>();\n  \
    \      ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 0) {\n                zeros.add(i);\n            } else {\n          \
    \      ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        for (Long num : arr) {\n            if (num == 0) {\n               \
    \ zeros.add(num);\n            } else {\n                ones.add(num);\n    \
    \        }\n        }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBinary\
    \ = Long.toBinaryString(a);\n                String bBinary = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBinary.length(); i++) {\n                    if (aBinary.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBinary.length(); i++) {\n  \
    \                  if (bBinary.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sorted_ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted_zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted_neg = new ArrayList<Long>();\n        for (Long i : arr) {\n        \
    \    if (i < 0) {\n                sorted_neg.add(i);\n            } else if (i\
    \ == 0) {\n                sorted_zeros.add(i);\n            } else if (i == 1)\
    \ {\n                sorted_ones.add(i);\n            } else {\n             \
    \   sorted.add(i);\n            }\n        }\n        Collections.sort(sorted_neg);\n\
    \        Collections.sort(sorted_zeros);\n        Collections.sort(sorted_ones);\n\
    \        Collections.sort(sorted, new Comparator<Long>() {\n            public\
    \ int compare(Long a, Long b) {\n                return Long.bitCount(a) - Long.bitCount(b);\n\
    \            }\n        });\n        sorted.addAll(0, sorted_neg);\n        sorted.addAll(sorted_zeros);\n\
    \        sorted.addAll(sorted_ones);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBinary = Long.toBinaryString(a);\n   \
    \             String bBinary = Long.toBinaryString(b);\n                int aOnes\
    \ = 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBinary.length();\
    \ i++) {\n                    if (aBinary.charAt(i) == '1') {\n              \
    \          aOnes++;\n                    }\n                }\n              \
    \  for (int i = 0; i < bBinary.length(); i++) {\n                    if (bBinary.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        return sorted;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                sorted.add(i);\n            }\n       \
    \ }\n        Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                String s1\
    \ = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        Collections.sort(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long i : arr) {\n         \
    \   if (i < 0) {\n                negatives.add(i);\n            } else {\n  \
    \              positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long i : negatives) {\n  \
    \          sorted.add(i);\n        }\n        for (Long i : positives) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new", " \
    \       ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long l : arr) {\n            if (l < 0) {\n\
    \                negatives.add(l);\n            } else {\n                sorted.add(l);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n\
    \        });\n        Collections.sort(negatives, new Comparator<Long>() {\n \
    \           @Override\n            public int compare(Long o1, Long o2) {\n  \
    \              return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n\
    \        });\n        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negs\
    \ = new ArrayList<>();\n        ArrayList<Long> poss = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i < 0) {\n                negs.add(i);\n\
    \            } else {\n                poss.add(i);\n            }\n        }\n\
    \        Collections.sort(negs);\n        Collections.sort(poss);\n        for\
    \ (Long i : negs) {\n            sorted.add(i);\n        }\n        for (Long\
    \ i : poss) {\n            sorted.add(i);\n        }\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long n : arr) {\n            if (n < 0) {\n                negatives.add(n);\n\
    \            } else {\n                positives.add(n);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long n : negatives) {\n            sorted.add(n);\n        }\n \
    \       for (Long n : positives) {\n            sorted.add(n);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 0) {\n                zeros.add(i);\n            } else {\n          \
    \      ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByNegativeAndOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndNegativeAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n       ", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        for (long i :\
    \ arr) {\n            if (i < 0) {\n                negative.add(i);\n       \
    \     } else {\n                sorted.add(i);\n            }\n        }\n   \
    \     Collections.sort(sorted, (a, b) -> {\n            String aBin = Long.toBinaryString(a);\n\
    \            String bBin = Long.toBinaryString(b);\n            int aOnes = aBin.length()\
    \ - aBin.replace(\"1\", \"\").length();\n            int bOnes = bBin.length()\
    \ - bBin.replace(\"1\", \"\").length();\n            if (aOnes == bOnes) {\n \
    \               return Long.compare(a, b);\n            } else {\n           \
    \     return Integer.compare(aOnes, bOnes);\n            }\n        });\n    \
    \    Collections.sort(negative);\n        sorted.addAll(negative);\n        return\
    \ sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long>\
    \ neg = new ArrayList<>();\n        ArrayList<Long> pos = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                neg.add(i);\n\
    \            } else {\n                pos.add(i);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        for (Long\
    \ i : neg) {\n            sorted.add(i);\n        }\n        for (Long i : pos)\
    \ {\n            sorted.add(i);\n        }\n        return sorted;\n", "     \
    \   ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negative.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negative);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                sorted.add(i);\n            }\n       \
    \ }\n        Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                String s1\
    \ = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int ones1 = s1.length() - s1.replace(\"1\", \"\").length();\n\
    \                int ones2 = s2.length() - s2.replace(\"1\", \"\").length();\n\
    \                if (ones1 == ones2) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return ones1 - ones2;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n    \
    \    ArrayList<Long> positive = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            if (i < 0) {\n                negative.add(i);\n            }\
    \ else {\n                positive.add(i);\n            }\n        }\n       \
    \ Collections.sort(negative);\n        Collections.sort(positive);\n        for\
    \ (Long i : negative) {\n            sorted.add(i);\n        }\n        for (Long\
    \ i : positive) {\n            sorted.add(i);\n        }\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n", "        // Your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            temp.add(arr.get(i));\n\
    \        }\n        Collections.sort(temp);\n        for (int i = 0; i < temp.size();\
    \ i++) {\n            result.add(temp.get(i));\n        }\n        return result;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long num = arr.get(i);\n            int\
    \ ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n\
    \                num /= 2;\n            }\n            sorted.add(ones * 1000000000\
    \ + arr.get(i));\n        }\n        Collections.sort(sorted);\n        for (int\
    \ i = 0; i < sorted.size(); i++) {\n            sorted.set(i, sorted.get(i) %\
    \ 1000000000);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        ArrayList<Long> positives = new ArrayList<>();\n        for (Long l :\
    \ arr) {\n            if (l < 0) {\n                negatives.add(l);\n      \
    \      } else {\n                positives.add(l);\n            }\n        }\n\
    \        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        for (Long l : negatives) {\n\
    \            sorted.add(l);\n        }\n        for (Long l : positives) {\n \
    \           sorted.add(l);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                return Long.bitCount(a) - Long.bitCount(b);\n\
    \            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (Long l : arr) {\n            sorted.add(l);\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else {\n               \
    \     if (a < b) {\n                        return -1;\n                    }\
    \ else if (a > b) {\n                        return 1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                int aOnes = countOnes(a);\n                int\
    \ bOnes = countOnes(b);\n                if (aOnes == bOnes) {\n             \
    \       return a.compareTo(b);\n                } else {\n                   \
    \ return aOnes - bOnes;\n                }\n            }\n        });\n     \
    \   return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        ArrayList<Long>\
    \ positive = new ArrayList<>();\n        for (Long num : arr) {\n            if\
    \ (num < 0) {\n                negative.add(num);\n            } else {\n    \
    \            positive.add(num);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long num : negative) {\n            sorted.add(num);\n        }\n\
    \        for (Long num : positive) {\n            sorted.add(num);\n        }\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimal = new ArrayList<Long>();\n        for\
    \ (Long num : arr) {\n            if (num < 0) {\n                sorted.add(num);\n\
    \            } else {\n                sortedByOnes.add(num);\n              \
    \  sortedByDecimal.add(num);\n            }\n        }\n        Collections.sort(sortedByOnes,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                return Long.bitCount(a) - Long.bitCount(b);\n\
    \            }\n        });\n        Collections.sort(sortedByDecimal);\n    \
    \    sorted.addAll(sortedByOnes);\n        sorted.addAll(sortedByDecimal);\n \
    \       return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndOnes = new ArrayList<Long>();\n  \
    \      ArrayList<Long> sortedByNegativeAndDecimal = new ArrayList<Long>();\n \
    \       ArrayList<Long> sortedByNegativeAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndNegativeAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndNegativeAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndOnesAndDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndNegativeAndDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndNegativeAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndNegativeAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndNegativeAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndNegativeAndOnes", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        for (Long num : arr) {\n            if (num < 0) {\n                negatives.add(num);\n\
    \            } else {\n                sorted.add(num);\n            }\n     \
    \   }\n        Collections.sort(sorted, new Comparator<Long>() {\n           \
    \ @Override\n            public int compare(Long a, Long b) {\n              \
    \  String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        Collections.sort(negatives);\n        Collections.reverse(negatives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n", "        // Your\
    \ code here\n        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long> positive\
    \ = new ArrayList<Long>();\n        for (Long i : arr) {\n            if (i <\
    \ 0) {\n                negative.add(i);\n            } else {\n             \
    \   positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long i : negative) {\n            result.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            result.add(i);\n        }\n    \
    \    return result;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         String binary1 = Long.toBinaryString(o1);\n                String binary2\
    \ = Long.toBinaryString(o2);\n                int ones1 = 0;\n               \
    \ int ones2 = 0;\n                for (int i = 0; i < binary1.length(); i++) {\n\
    \                    if (binary1.charAt(i) == '1') {\n                       \
    \ ones1++;\n                    }\n                }\n                for (int\
    \ i = 0; i < binary2.length(); i++) {\n                    if (binary2.charAt(i)\
    \ == '1') {\n                        ones2++;\n                    }\n       \
    \         }\n                if (ones1 == ones2) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return ones1\
    \ - ones2;\n                }\n            }\n        });\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ forty = new ArrayList<Long>();\n        ArrayList<Long> fifty = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventy = new ArrayList<Long>();\n        ArrayList<Long> eighty = new ArrayList<Long>();\n\
    \        ArrayList<Long> ninety = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundred = new ArrayList<Long>();\n        ArrayList<", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        ArrayList<Long> positives = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                negatives.add(i);\n      \
    \      } else {\n                positives.add(i);\n            }\n        }\n\
    \        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        for (Long i : negatives) {\n\
    \            sorted.add(i);\n        }\n        for (Long i : positives) {\n \
    \           sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> negative = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            if (i < 0) {\n                negative.add(i);\n   \
    \         } else {\n                positive.add(i);\n            }\n        }\n\
    \        Collections.sort(negative);\n        Collections.sort(positive);\n  \
    \      for (Long i : negative) {\n            sorted.add(i);\n        }\n    \
    \    for (Long i : positive) {\n            sorted.add(i);\n        }\n      \
    \  return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n \
    \       ArrayList<Long> negatives = new ArrayList<>();\n        ArrayList<Long>\
    \ positives = new ArrayList<>();\n        for (long i : arr) {\n            if\
    \ (i < 0) {\n                negatives.add(i);\n            } else {\n       \
    \         positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        Collections.reverse(negatives);\n\
    \        for (long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sortedOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedZeros = new ArrayList<Long>();\n        for (Long\
    \ num : arr) {\n            if (num < 0) {\n                sorted.add(num);\n\
    \            } else if (num == 0) {\n                sortedZeros.add(num);\n \
    \           } else {\n                sortedOnes.add(num);\n            }\n  \
    \      }\n        Collections.sort(sortedOnes, new Comparator<Long>() {\n    \
    \        @Override\n            public int compare(Long o1, Long o2) {\n     \
    \           return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n   \
    \     });\n        Collections.sort(sortedZeros, new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long o1, Long o2) {\n   \
    \             return Long.compare(o1, o2);\n            }\n        });\n     \
    \   sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n        return\
    \ sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n     \
    \   ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long n : arr) {\n         \
    \   if (n < 0) {\n                negatives.add(n);\n            } else {\n  \
    \              positives.add(n);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long n : negatives) {\n  \
    \          sorted.add(n);\n        }\n        for (Long n : positives) {\n   \
    \         sorted.add(n);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        ArrayList<Long> positives = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                negatives.add(i);\n      \
    \      } else {\n                positives.add(i);\n            }\n        }\n\
    \        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedZeros = new ArrayList<Long>();\n        for (Long i : arr) {\n       \
    \     if (Long.bitCount(i) == 0) {\n                sortedZeros.add(i);\n    \
    \        } else {\n                sortedOnes.add(i);\n            }\n       \
    \ }\n        Collections.sort(sortedOnes);\n        Collections.sort(sortedZeros);\n\
    \        sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n   \
    \     return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        for (Long i : negatives) {\n\
    \            sorted.add(i);\n        }\n        for (Long i : positives) {\n \
    \           sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n\
    \        ArrayList<Long> positive = new ArrayList<>();\n        for (Long l :\
    \ arr) {\n            if (l < 0) {\n                negative.add(l);\n       \
    \     } else {\n                positive.add(l);\n            }\n        }\n \
    \       Collections.sort(negative);\n        Collections.sort(positive);\n   \
    \     Collections.reverse(negative);\n        for (Long l : negative) {\n    \
    \        sorted.add(l);\n        }\n        for (Long l : positive) {\n      \
    \      sorted.add(l);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (Long l : arr) {\n            sorted.add(l);\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long l1, Long l2) {\n       \
    \         int l1Ones = countOnes(l1);\n                int l2Ones = countOnes(l2);\n\
    \                if (l1Ones == l2Ones) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return l1Ones - l2Ones;\n     \
    \           }\n            }\n        });\n        return sorted;\n", "      \
    \  // your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long l : arr) {\n            if\
    \ (l == 0) {\n                zeros.add(l);\n            } else {\n          \
    \      ones.add(l);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new", " \
    \       ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        ArrayList<Long> positive = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       if (a < 0 && b < 0) {\n                    return (int) (b - a);\n   \
    \             }\n                if (a < 0) {\n                    return 1;\n\
    \                }\n                if (b < 0) {\n                    return -1;\n\
    \                }\n                String aBin = Long.toBinaryString(a);\n  \
    \              String bBin = Long.toBinaryString(b);\n                int aOnes\
    \ = 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ (int) (a - b);\n                }\n                return aOnes - bOnes;\n \
    \           }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        negative.sort(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder()));\n\
    \        positive.sort(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder()));\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentys1 = new ArrayList<Long>();\n        ArrayList<Long> twentys2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentys3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentys4 = new ArrayList<Long>();\n        ArrayList<Long> twentys5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentys6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentys7 = new ArrayList<Long>();\n        ArrayList<", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> negative = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            if (i < 0) {\n                negative.add(i);\n   \
    \         } else {\n                positive.add(i);\n            }\n        }\n\
    \        Collections.sort(negative);\n        Collections.sort(positive);\n  \
    \      for (Long i : negative) {\n            sorted.add(i);\n        }\n    \
    \    for (Long i : positive) {\n            sorted.add(i);\n        }\n      \
    \  return sorted;\n", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       ArrayList<Long> negative = new ArrayList<>();\n        ArrayList<Long>\
    \ positive = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                negative.add(i);\n            } else {\n        \
    \        positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long i : negative) {\n            result.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            result.add(i);\n        }\n    \
    \    return result;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = countOnes(a);\n                int bOnes = countOnes(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long num = arr.get(i);\n            int ones = 0;\n            while\
    \ (num > 0) {\n                ones += num % 2;\n                num /= 2;\n \
    \           }\n            sorted.add(ones);\n        }\n        for (int i =\
    \ 0; i < sorted.size(); i++) {\n            for (int j = i + 1; j < sorted.size();\
    \ j++) {\n                if (sorted.get(i) > sorted.get(j)) {\n             \
    \       long temp = sorted.get(i);\n                    sorted.set(i, sorted.get(j));\n\
    \                    sorted.set(j, temp);\n                    temp = arr.get(i);\n\
    \                    arr.set(i, arr.get(j));\n                    arr.set(j, temp);\n\
    \                }\n            }\n        }\n        return arr;\n", "      \
    \  ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long num : arr) {\n            if (num <\
    \ 0) {\n                negatives.add(num);\n            } else {\n          \
    \      sorted.add(num);\n            }\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (char c : aBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        aOnes++;\n \
    \                   }\n                }\n                for (char c : bBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        bOnes++;\n \
    \                   }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        Collections.sort(negatives);\n        Collections.reverse(negatives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            if (i == 0) {\n                zeros.add(i);\n         \
    \   } else {\n                ones.add(i);\n            }\n        }\n       \
    \ Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        ArrayList<Long>\
    \ positive = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                negative.add(i);\n            } else {\n        \
    \        positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        for (Long i : negative) {\n    \
    \        sorted.add(i);\n        }\n        for (Long i : positive) {\n      \
    \      sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sortedOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedZeros = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            if (countOnes(i) == 0) {\n                sortedZeros.add(i);\n\
    \            } else {\n                sortedOnes.add(i);\n            }\n   \
    \     }\n        Collections.sort(sortedOnes);\n        Collections.sort(sortedZeros);\n\
    \        sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n   \
    \     return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long num : arr) {\n            if (num ==\
    \ 0) {\n                zeros.add(num);\n            } else {\n              \
    \  ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        ArrayList<Long> positives = new\
    \ ArrayList<Long>();\n        for (Long l : arr) {\n            if (l < 0) {\n\
    \                negatives.add(l);\n            } else {\n                positives.add(l);\n\
    \            }\n        }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long l : negatives) {\n            sorted.add(l);\n        }\n \
    \       for (Long l : positives) {\n            sorted.add(l);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBinary = Long.toBinaryString(a);\n                String bBinary\
    \ = Long.toBinaryString(b);\n                int aOnes = 0;\n                int\
    \ bOnes = 0;\n                for (int i = 0; i < aBinary.length(); i++) {\n \
    \                   if (aBinary.charAt(i) == '1') {\n                        aOnes++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ bBinary.length(); i++) {\n                    if (bBinary.charAt(i) == '1')\
    \ {\n                        bOnes++;\n                    }\n               \
    \ }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Long i : arr) {\n            result.add(i);\n\
    \        }\n        result.sort(new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                String s1\
    \ = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        return result;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n   \
    \     for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                sorted.add(i);\n            }\n       \
    \ }\n        Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        Collections.sort(negatives);\n        Collections.reverse(negatives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>();",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n     \
    \   Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n   \
    \     ArrayList<Long> positives = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            if (i < 0) {\n                negatives.add(i);\n           \
    \ } else {\n                positives.add(i);\n            }\n        }\n    \
    \    Collections.sort(negatives);\n        Collections.sort(positives);\n    \
    \    for (Long i : negatives) {\n            sorted.add(i);\n        }\n     \
    \   for (Long i : positives) {\n            sorted.add(i);\n        }\n      \
    \  return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n \
    \       ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i == 0)\
    \ {\n                zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        for (Long num\
    \ : arr) {\n            if (num == 0) {\n                zeros.add(num);\n   \
    \         } else if (num == 1) {\n                ones.add(num);\n           \
    \ } else {\n                sorted.add(num);\n            }\n        }\n     \
    \   Collections.sort(sorted);\n        Collections.sort(ones);\n        sorted.addAll(ones);\n\
    \        sorted.addAll(zeros);\n        return sorted;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n\
    \        ArrayList<Long> positive = new ArrayList<>();\n        for (Long l :\
    \ arr) {\n            if (l < 0) {\n                negative.add(l);\n       \
    \     } else {\n                positive.add(l);\n            }\n        }\n \
    \       Collections.sort(negative);\n        Collections.sort(positive);\n   \
    \     Collections.reverse(negative);\n        for (Long l : negative) {\n    \
    \        result.add(l);\n        }\n        for (Long l : positive) {\n      \
    \      result.add(l);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> zeros = new ArrayList<>();\n\
    \        ArrayList<Long> ones = new ArrayList<>();\n        for (Long n : arr)\
    \ {\n            if (n == 0) {\n                zeros.add(n);\n            } else\
    \ {\n                ones.add(n);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long n : arr) {\n         \
    \   if (n < 0) {\n                negatives.add(n);\n            } else {\n  \
    \              positives.add(n);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long n : negatives) {\n  \
    \          sorted.add(n);\n        }\n        for (Long n : positives) {\n   \
    \         sorted.add(n);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> temp\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                result.add(i);\n            } else {\n                temp.add(i);\n\
    \            }\n        }\n        Collections.sort(temp, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                int o1Ones = Integer.bitCount(o1.intValue());\n             \
    \   int o2Ones = Integer.bitCount(o2.intValue());\n                if (o1Ones\
    \ == o2Ones) {\n                    return o1.compareTo(o2);\n               \
    \ } else {\n                    return o1Ones - o2Ones;\n                }\n \
    \           }\n        });\n        result.addAll(temp);\n        return result;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = countOnes(num);\n            sorted.add(ones, num);\n        }\n        return\
    \ sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n     \
    \   ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long> ones\
    \ = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        HashMap<Long, Long> map = new HashMap<Long,\
    \ Long>();\n        for (Long i : arr) {\n            map.put(i, countOnes(i));\n\
    \        }\n        sorted = sortByValue(map);\n        for (Long i : sorted)\
    \ {\n            result.add(i);\n        }\n        return result;\n", "     \
    \   ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        ArrayList<Long>\
    \ positives = new ArrayList<>();\n        for (Long num : arr) {\n           \
    \ if (num < 0) {\n                negatives.add(num);\n            } else {\n\
    \                positives.add(num);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long num : negatives) {\n\
    \            sorted.add(num);\n        }\n        for (Long num : positives) {\n\
    \            sorted.add(num);\n        }\n        return sorted;\n", "       \
    \ ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long> sortedOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedZeros = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n    \
    \            sortedZeros.add(i);\n            } else {\n                sortedOnes.add(i);\n\
    \            }\n        }\n        Collections.sort(sortedOnes);\n        Collections.sort(sortedZeros);\n\
    \        sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n   \
    \     return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        for (Long num\
    \ : arr) {\n            if (num < 0) {\n                negatives.add(num);\n\
    \            } else {\n                sorted.add(num);\n            }\n     \
    \   }\n        Collections.sort(sorted, new Comparator<Long>() {\n           \
    \ @Override\n            public int compare(Long a, Long b) {\n              \
    \  String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (char c : aBin.toCharArray()) {\n                    if (c == '1') {\n\
    \                        aOnes++;\n                    }\n                }\n\
    \                for (char c : bBin.toCharArray()) {\n                    if (c\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        Collections.sort(negatives,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (char c : aBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        aOnes++;\n \
    \                   }\n                }\n                for (char c : bBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        bOnes++;\n \
    \                   }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        Collections.reverse(negatives);\n        sorted.addAll(negatives",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        ArrayList<Long>\
    \ positives = new ArrayList<>();\n        for (Long num : arr) {\n           \
    \ if (num < 0) {\n                negatives.add(num);\n            } else {\n\
    \                positives.add(num);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long num : negatives) {\n\
    \            sorted.add(num);\n        }\n        for (Long num : positives) {\n\
    \            sorted.add(num);\n        }\n        return sorted;\n", "       \
    \ ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long num : arr) {\n            if (num == 0) {\n               \
    \ zeros.add(num);\n            } else if (num == 1) {\n                ones.add(num);\n\
    \            } else {\n                sorted.add(num);\n            }\n     \
    \   }\n        Collections.sort(sorted);\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        for (Long num : zeros) {\n            result.add(num);\n\
    \        }\n        for (Long num : ones) {\n            result.add(num);\n  \
    \      }\n        for (Long num : sorted) {\n            result.add(num);\n  \
    \      }\n        return result;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> neg = new ArrayList<>();\n        ArrayList<Long> pos\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                neg.add(i);\n            } else {\n                pos.add(i);\n\
    \            }\n        }\n        Collections.sort(neg);\n        Collections.sort(pos);\n\
    \        for (Long i : neg) {\n            sorted.add(i);\n        }\n       \
    \ for (Long i : pos) {\n            sorted.add(i);\n        }\n        return\
    \ sorted;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   ArrayList<Long> positive = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i >= 0) {\n                positive.add(i);\n            } else {\n   \
    \             negative.add(i);\n            }\n        }\n        positive.sort(new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                int count1 = Long.bitCount(o1);\n          \
    \      int count2 = Long.bitCount(o2);\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        negative.sort(new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                int count1\
    \ = Long.bitCount(o1);\n                int count2 = Long.bitCount(o2);\n    \
    \            if (count1 == count2) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return count1 - count2;\n     \
    \           }\n            }\n        });\n        Collections.reverse(negative);\n\
    \        result.addAll(negative);\n        result.addAll(positive);\n        return\
    \ result;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<>();\n        for (Long l : arr) {\n            if\
    \ (l < 0) {\n                negatives.add(l);\n            } else {\n       \
    \         sorted.add(l);\n            }\n        }\n        Collections.sort(sorted,\
    \ (a, b) -> {\n            int a1 = Integer.bitCount(a.intValue());\n        \
    \    int b1 = Integer.bitCount(b.intValue());\n            if (a1 == b1) {\n \
    \               return a.compareTo(b);\n            } else {\n               \
    \ return a1 - b1;\n            }\n        });\n        Collections.sort(negatives);\n\
    \        for (Long l : negatives) {\n            sorted.add(0, l);\n        }\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        for (Long l :\
    \ arr) {\n            if (l < 0) {\n                negatives.add(l);\n      \
    \      } else {\n                sorted.add(l);\n            }\n        }\n  \
    \      Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long l1, Long l2) {\n                String s1\
    \ = Long.toBinaryString(l1);\n                String s2 = Long.toBinaryString(l2);\n\
    \                int ones1 = 0;\n                int ones2 = 0;\n            \
    \    for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        ones1++;\n                    }\n       \
    \         }\n                for (int i = 0; i < s2.length(); i++) {\n       \
    \             if (s2.charAt(i) == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return l1.compareTo(l2);\n                } else {\n\
    \                    return ones1 - ones2;\n                }\n            }\n\
    \        });\n        Collections.sort(negatives);\n        for (Long l : negatives)\
    \ {\n            sorted.add(l);\n        }\n        return sorted;\n", "     \
    \   ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n      \
    \          zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = 0;\n            while (num > 0) {\n                ones += num % 2;\n    \
    \            num /= 2;\n            }\n            sorted.add(ones);\n       \
    \ }\n        Collections.sort(sorted);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyones = new ArrayList<Long>();\n        ArrayList<Long> thirtytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> thirtythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirtyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyfives = new ArrayList<Long>();\n        ArrayList<Long> thirtysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> thirtysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirty", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = countOnes(a);\n                int bOnes = countOnes(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimal = new ArrayList<Long>();\n   \
    \     ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n      \
    \  ArrayList<Long> sortedByOnesAndDecimalAndOnes = new ArrayList<Long>();\n  \
    \      ArrayList<Long> sortedByDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAnd",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> sorted_ones\
    \ = new ArrayList<>();\n        ArrayList<Long> sorted_zeros = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n    \
    \            sorted_zeros.add(i);\n            } else {\n                sorted_ones.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted_ones);\n        Collections.sort(sorted_zeros);\n\
    \        sorted.addAll(sorted_ones);\n        sorted.addAll(sorted_zeros);\n \
    \       return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        ArrayList<Long>\
    \ positives = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                negatives.add(i);\n            } else {\n       \
    \         positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long i : negatives) {\n  \
    \          sorted.add(i);\n        }\n        for (Long i : positives) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> sortedByOnes = new ArrayList<>();\n\
    \        ArrayList<Long> sortedByDecimal = new ArrayList<>();\n        for (Long\
    \ i : arr) {\n            if (i < 0) {\n                sorted.add(i);\n     \
    \       } else {\n                sortedByOnes.add(i);\n                sortedByDecimal.add(i);\n\
    \            }\n        }\n        Collections.sort(sortedByOnes, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n\
    \        });\n        Collections.sort(sortedByDecimal);\n        sorted.addAll(sortedByOnes);\n\
    \        sorted.addAll(sortedByDecimal);\n        return sorted;\n", "       \
    \ ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eigteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        Array", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) < 0) {\n                result.add(arr.get(i));\n\
    \            } else {\n                sorted.add(arr.get(i));\n            }\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         String s1 = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        result.addAll(sorted);\n        return result;\n", "   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i == 0)\
    \ {\n                zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n\
    \        ArrayList<Long> positive = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                negative.add(i);\n       \
    \     } else {\n                positive.add(i);\n            }\n        }\n \
    \       Collections.sort(negative);\n        Collections.sort(positive);\n   \
    \     Collections.reverse(negative);\n        result.addAll(negative);\n     \
    \   result.addAll(positive);\n        return result;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n\
    \        ArrayList<Long> positive = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                negative.add(i);\n       \
    \     } else {\n                positive.add(i);\n            }\n        }\n \
    \       Collections.sort(negative);\n        Collections.sort(positive);\n   \
    \     Collections.reverse(negative);\n        for (Long i : negative) {\n    \
    \        sorted.add(i);\n        }\n        for (Long i : positive) {\n      \
    \      sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long num : arr) {\n            if (num == 0) {\n                zeros.add(num);\n\
    \            } else {\n                ones.add(num);\n            }\n       \
    \ }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        return arr.stream().sorted(new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                }\n                return aOnes - bOnes;\n            }\n   \
    \     }).collect(Collectors.toCollection(ArrayList::new));\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n      \
    \          zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            sorted.add(i);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String binary1 = Long.toBinaryString(o1);\n\
    \                String binary2 = Long.toBinaryString(o2);\n                int\
    \ count1 = 0;\n                int count2 = 0;\n                for (int i = 0;\
    \ i < binary1.length(); i++) {\n                    if (binary1.charAt(i) == '1')\
    \ {\n                        count1++;\n                    }\n              \
    \  }\n                for (int i = 0; i < binary2.length(); i++) {\n         \
    \           if (binary2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        return sorted;\n", "        ArrayList<Long> sorted = new\
    \ ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            sorted.add(i);\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int count1 =\
    \ 0;\n                int count2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     count1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        count2++;\n                    }\n         \
    \       }\n                if (count1 == count2) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return count1\
    \ - count2;\n                }\n            }\n        });\n        return sorted;\n",
  "        // your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i < 0) {\n                negative.add(i);\n            } else {\n    \
    \            positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long i : negative) {\n            result.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            result.add(i);\n        }\n    \
    \    return result;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAnd",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> oneCount = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            oneCount.add(Long.bitCount(i));\n        }\n       \
    \ Collections.sort(oneCount);\n        for (Long i : oneCount) {\n           \
    \ for (Long j : arr) {\n                if (Long.bitCount(j) == i) {\n       \
    \             sorted.add(j);\n                }\n            }\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        ArrayList<Long>\
    \ positive = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                negative.add(i);\n            } else {\n        \
    \        positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long i : negative) {\n            result.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            result.add(i);\n        }\n    \
    \    return result;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (Long.bitCount(i) == 0) {\n                zeros.add(i);\n            } else\
    \ {\n                ones.add(i);\n            }\n        }\n        Collections.sort(zeros);\n\
    \        Collections.sort(ones);\n        for (Long i : zeros) {\n           \
    \ sorted.add(i);\n        }\n        for (Long i : ones) {\n            sorted.add(i);\n\
    \        }\n        return sorted;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        ArrayList<Long> temp = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            temp.add(i);\n        }\n        Collections.sort(temp);\n  \
    \      for (Long i : temp) {\n            result.add(i);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long> ones\
    \ = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (Long.bitCount(i) == 0) {\n                zeros.add(i);\n            } else\
    \ {\n                ones.add(i);\n            }\n        }\n        Collections.sort(zeros);\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i == 0)\
    \ {\n                zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            if (Long.bitCount(i) == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(zeros);\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        ArrayList<Long> positives = new ArrayList<>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                negatives.add(i);\n      \
    \      } else {\n                positives.add(i);\n            }\n        }\n\
    \        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted3 = new ArrayList<Long>();\n        ArrayList<Long> sorted4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted6 = new ArrayList<Long>();\n        ArrayList<Long> sorted7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted9 = new ArrayList<Long>();\n        ArrayList<Long> sorted10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted12 = new ArrayList<Long>();\n        ArrayList<Long> sorted13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted15 = new ArrayList<Long>();\n        ArrayList<Long> sorted16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted18 = new ArrayList<Long>();\n        ArrayList<Long> sorted19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted21 = new ArrayList<Long>();\n        ArrayList<Long> sorted22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted24 = new ArrayList<Long>();\n        ArrayList<Long> sorted25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted27 = new ArrayList<Long>();\n        ArrayList<Long> sorted28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted30 = new ArrayList<Long>();\n        Array", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> neg = new ArrayList<>();\n\
    \        ArrayList<Long> pos = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            if (i < 0) {\n                neg.add(i);\n            } else\
    \ {\n                pos.add(i);\n            }\n        }\n        Collections.sort(neg);\n\
    \        Collections.sort(pos);\n        Collections.reverse(neg);\n        sorted.addAll(neg);\n\
    \        sorted.addAll(pos);\n        return sorted;\n", "        // Your code\
    \ here\n        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        ArrayList<Long> negative = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i >= 0) {\n                positive.add(i);\n\
    \            } else {\n                negative.add(i);\n            }\n     \
    \   }\n        Collections.sort(positive, new Comparator<Long>() {\n         \
    \   @Override\n            public int compare(Long o1, Long o2) {\n          \
    \      String s1 = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        Collections.sort(negative, new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long o1, Long o2) {\n   \
    \             String s1 = Long.toBinaryString(o1);\n                String s2\
    \ = Long.toBinaryString(o2);\n                int count1 = 0;\n              \
    \  int count2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n\
    \                    if (s1.charAt(i) == '1') {\n                        count1++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ s2.length(); i++) {\n                    if (s2.charAt(i) == '1') {\n      \
    \                  count2++;\n                    }\n                }\n     \
    \           if (count1 == count2) {", "        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        ArrayList<Long>\
    \ positives = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                negatives.add(i);\n            } else {\n       \
    \         positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long i : negatives) {\n  \
    \          sorted.add(i);\n        }\n        for (Long i : positives) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> neg = new ArrayList<Long>();\n\
    \        ArrayList<Long> pos = new ArrayList<Long>();\n        for (Long i : arr)\
    \ {\n            if (i < 0) {\n                neg.add(i);\n            } else\
    \ {\n                pos.add(i);\n            }\n        }\n        Collections.sort(neg);\n\
    \        Collections.sort(pos);\n        Collections.reverse(neg);\n        result.addAll(neg);\n\
    \        result.addAll(pos);\n        return result;\n", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            int ones = 0;\n            long num = arr.get(i);\n\
    \            while (num > 0) {\n                if (num % 2 == 1) {\n        \
    \            ones++;\n                }\n                num /= 2;\n         \
    \   }\n            sorted.add(ones, arr.get(i));\n        }\n        return sorted;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
