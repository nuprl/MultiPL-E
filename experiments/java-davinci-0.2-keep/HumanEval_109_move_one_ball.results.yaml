name: HumanEval_109_move_one_ball
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmfd5qh6q.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z3lpzj.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeedsvj5z.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        Long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn68c06il.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpau4725kh.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjjg9f2k.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ arr2 = new ArrayList<Long>(arr);\n        Collections.sort(arr2);\n        if\
    \ (arr.equals(arr2)) {\n            return true;\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            Collections.rotate(arr, 1);\n   \
    \         if (arr.equals(arr2)) {\n                return true;\n            }\n\
    \        }\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        if (arr.size() == 0) {\n            return true;\n        }\n    \
    \    long max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) < max) {\n                return false;\n        \
    \    }\n            max = Math.max(max, arr.get(i));\n        }\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpis8li5dx.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        int max = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > arr.get(max)) max = i;\n        }\n   \
    \     int min = 0;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   if (arr.get(i) < arr.get(min)) min = i;\n        }\n        if (max == min)\
    \ return true;\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9a_rane.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qxnostr.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlm_u2ma.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy78ro8e1.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_y_grkl_.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm3vpwp7v.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv1vmxg1m.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()==0)\
    \ return true;\n        long min = arr.get(0);\n        for (int i=1; i<arr.size();\
    \ i++) {\n            if (arr.get(i)<min) return false;\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpywwz9g0z.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ max) {\n                return false;\n            }\n            max = Math.max(max,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o3p_u50.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnu_ml2eq.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppstx8uei.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp81iajwcc.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3jto53cb.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4cq5vd41.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        int n =\
    \ arr.size();\n        int[] count = new int[n];\n        for (int i = 0; i <\
    \ n; i++) {\n            count[i] = 0;\n        }\n        for (int i = 0; i <\
    \ n; i++) {\n            int index = sorted.indexOf(arr.get(i));\n           \
    \ count[index]++;\n        }\n        int max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            max = Math.max(max, count[i]);\n        }\n       \
    \ return max <= n / 2;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecov_hrh.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ max) {\n                return false;\n            }\n            max = Math.max(max,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87q7bsa7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5d_znav4.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        int n =\
    \ arr.size();\n        int i = 0;\n        while (i < n && arr.get(i) == sorted.get(i))\
    \ {\n            i++;\n        }\n        if (i == n) {\n            return true;\n\
    \        }\n        int j = n - 1;\n        while (j >= 0 && arr.get(j) == sorted.get(j))\
    \ {\n            j--;\n        }\n        if (j == -1) {\n            return true;\n\
    \        }\n        if (i == 0 && j == n - 1) {\n            return false;\n \
    \       }\n        if (i == 0) {\n            return arr.get(j) == sorted.get(i);\n\
    \        }\n        if (j == n - 1) {\n            return arr.get(i) == sorted.get(j);\n\
    \        }\n        return arr.get(i) == sorted.get(j) || arr.get(j) == sorted.get(i);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppypydxp7.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d8xu822.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ arr2 = new ArrayList<Long>(arr);\n        Collections.sort(arr2);\n        if\
    \ (arr.equals(arr2)) {\n            return true;\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            long temp = arr.get(arr.size() -\
    \ 1);\n            arr.remove(arr.size() - 1);\n            arr.add(0, temp);\n\
    \            if (arr.equals(arr2)) {\n                return true;\n         \
    \   }\n        }\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1yb0_rc.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        if (sorted.equals(arr))\
    \ {\n            return true;\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            ArrayList<Long> shifted = new ArrayList<>(arr);\n      \
    \      shifted.add(0, shifted.remove(shifted.size() - 1));\n            if (moveOneBall(shifted))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.util.ComparableTimSort.sort(ComparableTimSort.java:188)\n\
    \tat java.base/java.util.Arrays.sort(Arrays.java:1107)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1301)\n\
    \tat java.base/java.util.ArrayList.sort(ArrayList.java:1721)\n\tat java.base/java.util.Collections.sort(Collections.java:145)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:33)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\
    \tat Problem.moveOneBall(tmp3o2cm7ww.java:40)\n\tat Problem.moveOneBa"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkzxyuezf.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgv9m98ph.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcfsdfzmh.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lxod8lm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != sorted.get(i))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7t_l_cxk.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmty__8cv.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8369ngpd.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        ArrayList<Long> sorted = new ArrayList<Long>(arr);\n\
    \        Collections.sort(sorted);\n        int i = 0;\n        while (i < arr.size()\
    \ && arr.get(i) == sorted.get(i)) i++;\n        if (i == arr.size()) return true;\n\
    \        int j = i;\n        while (j < arr.size() && arr.get(j) == sorted.get(i))\
    \ j++;\n        if (j == arr.size()) return true;\n        return false;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp816n04ks.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpchme8jx4.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdqruf_w.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        int\
    \ n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i)\
    \ != sorted.get(i)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6_o8ffu.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjb46577h.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0ya1rd8.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_bb4pfu.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79vxtaqc.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinmltot1.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbglj9_1.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        int n =\
    \ arr.size();\n        int[] lis = new int[n];\n        for (int i = 0; i < n;\
    \ i++) {\n            lis[i] = 1;\n        }\n        for (int i = 1; i < n; i++)\
    \ {\n            for (int j = 0; j < i; j++) {\n                if (sorted.get(i)\
    \ > sorted.get(j) && lis[i] < lis[j] + 1) {\n                    lis[i] = lis[j]\
    \ + 1;\n                }\n            }\n        }\n        int max = 0;\n  \
    \      for (int i = 0; i < n; i++) {\n            if (max < lis[i]) {\n      \
    \          max = lis[i];\n            }\n        }\n        return max == n;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkoqq3718.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ copy = new ArrayList<Long>(arr);\n        Collections.sort(copy);\n        if\
    \ (copy.equals(arr)) {\n            return true;\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            Collections.rotate(arr, 1);\n   \
    \         if (copy.equals(arr)) {\n                return true;\n            }\n\
    \        }\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        if (sorted.equals(arr))\
    \ {\n            return true;\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Collections.rotate(arr, 1);\n            if (sorted.equals(arr))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        if (arr.size() == 0) {\n            return true;\n        }\n    \
    \    long min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) < min) {\n                return false;\n        \
    \    }\n            min = Math.min(min, arr.get(i));\n        }\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzq84670u.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe9c1bhy7.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8baj32wy.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_khdlzvo.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparwc0u8z.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha86ome3.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpggv_mxlk.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        ArrayList<Long> sorted = new ArrayList<>(arr);\n\
    \        Collections.sort(sorted);\n        if (arr.equals(sorted)) return true;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) !=\
    \ sorted.get(i)) {\n                Collections.rotate(arr, -1);\n           \
    \     if (arr.equals(sorted)) return true;\n            }\n        }\n       \
    \ return false;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt61atx_2.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ max) {\n                return false;\n            }\n            max = Math.max(max,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1jaof7d.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        if (arr.size() == 1) {\n\
    \            return true;\n        }\n        ArrayList<Long> sorted = new ArrayList<Long>(arr);\n\
    \        Collections.sort(sorted);\n        if (arr.equals(sorted)) {\n      \
    \      return true;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            ArrayList<Long> shifted = new ArrayList<Long>(arr);\n           \
    \ Collections.rotate(shifted, -i);\n            if (shifted.equals(sorted)) {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppixmq6t1.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_kr2bb0.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            long x = arr.get(i);\n\
    \            if (x < min) min = x;\n            if (x > max) max = x;\n      \
    \  }\n        if (max - min + 1 == arr.size()) return true;\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsner21rj.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzb118mfk.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp26tls9pe.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnokn4psl.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        int n =\
    \ arr.size();\n        int[] shifts = new int[n];\n        for (int i = 0; i <\
    \ n; i++) {\n            shifts[i] = sorted.indexOf(arr.get(i));\n        }\n\
    \        int[] prefix = new int[n];\n        prefix[0] = shifts[0];\n        for\
    \ (int i = 1; i < n; i++) {\n            prefix[i] = prefix[i - 1] + shifts[i];\n\
    \        }\n        int[] suffix = new int[n];\n        suffix[n - 1] = n - 1\
    \ - shifts[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            suffix[i]\
    \ = suffix[i + 1] + (n - 1 - shifts[i]);\n        }\n        for (int i = 0; i\
    \ < n; i++) {\n            if (prefix[i] == suffix[i]) {\n                return\
    \ true;\n            }\n        }\n        return false;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi4sohpen.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4xyfzfj.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpovby0k9z.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        if (arr.size() == 0) {\n            return true;\n        }\n    \
    \    long min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) < min) {\n                return false;\n        \
    \    }\n            min = Math.min(min, arr.get(i));\n        }\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbz558kc5.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgqzvw6l7.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaueuc14h.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk59kug2l.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp56u0rtql.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5zbu6ln.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8nk18eqq.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpojbkms8i.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz38zazhz.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        int\
    \ n = arr.size();\n        int[] count = new int[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            count[i] = 0;\n        }\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if\
    \ (arr.get(i) == sorted.get(j)) {\n                    count[j]++;\n         \
    \           break;\n                }\n            }\n        }\n        for (int\
    \ i = 0; i < n; i++) {\n            if (count[i] != 1) {\n                return\
    \ false;\n            }\n        }\n        return true;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5k4m3cid.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ max) {\n                return false;\n            }\n            max = Math.max(max,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84fp_2fh.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        if(arr.size() == 0) return true;\n        long min =\
    \ arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ < min) return false;\n            min = Math.min(min, arr.get(i));\n       \
    \ }\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp93it0jl4.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcu1zlc4i.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcdcf0u5.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long max = arr.get(0);\n        for (long i : arr)\
    \ {\n            if (i < max) return false;\n            max = i;\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpclfwae3n.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpml6gs16w.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4shpkx12.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfc386mw_.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo45zmcvi.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshleez4r.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvnivv8ia.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1qb3px1_.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk24ld_zy.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpblddpdvf.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppaxmglbp.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsluu7z5.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4px1_ewu.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8br87tex.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj73m2nvm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp309oew0d.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        if (arr.size() == 0) {\n            return true;\n        }\n    \
    \    int min = 0;\n        for (int i = 1; i < arr.size(); i++) {\n          \
    \  if (arr.get(i) < arr.get(min)) {\n                min = i;\n            }\n\
    \        }\n        if (min == 0) {\n            return true;\n        }\n   \
    \     for (int i = 0; i < min; i++) {\n            if (arr.get(i) > arr.get(min))\
    \ {\n                return false;\n            }\n        }\n        for (int\
    \ i = min + 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(min))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpirjzv8j2.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz1d7tjkh.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpth84jqw2.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplpi2mt1n.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ca_uqsn.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmfyj8195.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv04s8nk1.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpurpjja8d.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3jjh48ll.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr3qln6xe.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4b6s_yhg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8694558s.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkf_q4h7d.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != sorted.get(i))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppimiis7k.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxixag0_.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiv9fg251.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        int\
    \ n = arr.size();\n        int i = 0;\n        while (i < n) {\n            if\
    \ (arr.get(i) == sorted.get(i)) {\n                i++;\n            } else {\n\
    \                long temp = arr.get(i);\n                arr.remove(i);\n   \
    \             arr.add(0, temp);\n            }\n        }\n        return arr.equals(sorted);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8wi6ivdr.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        ArrayList<Long> sorted = new ArrayList<>(arr);\n\
    \        Collections.sort(sorted);\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) != sorted.get(i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9dtc33i.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7dszvgxl.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwg1j7jqx.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n            } else {\n          \
    \      return false;\n            }\n        }\n        return true;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl7cwjwg8.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5nnv8qf6.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        // You can add helper functions if needed\n        return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmposv64aj_.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n    \
    \    if (arr.equals(sorted)) {\n            return true;\n        }\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            Long tmp = arr.get(arr.size()\
    \ - 1);\n            arr.remove(arr.size() - 1);\n            arr.add(0, tmp);\n\
    \            if (arr.equals(sorted)) {\n                return true;\n       \
    \     }\n        }\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ipkbzhm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxeoqo9j.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rggujde.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgj57escf.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41sg1jc5.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjjqk0fzf.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ max) {\n                return false;\n            }\n            max = Math.max(max,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8n1m2yx6.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b5z4y4r.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        int\
    \ i = 0;\n        while (i < arr.size() && arr.get(i) == sorted.get(i)) {\n  \
    \          i++;\n        }\n        if (i == arr.size()) {\n            return\
    \ true;\n        }\n        int j = arr.size() - 1;\n        while (j >= 0 &&\
    \ arr.get(j) == sorted.get(j)) {\n            j--;\n        }\n        if (j ==\
    \ -1) {\n            return true;\n        }\n        if (i == j) {\n        \
    \    return false;\n        }\n        int k = i;\n        while (k < j && arr.get(k)\
    \ == sorted.get(k)) {\n            k++;\n        }\n        if (k == j) {\n  \
    \          return true;\n        }\n        return false;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6foe2cb.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeap27k3_.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubv4ic_w.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        return true;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1qrt_35r.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmczqe0ba.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61xv577i.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoae9jfne.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmponidw9id.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkmv57pk.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52aag68g.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxytnrkkc.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != sorted.get(i))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxjlqgg_p.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        int\
    \ i = 0;\n        while (i < arr.size() && arr.get(i) == sorted.get(i)) {\n  \
    \          i++;\n        }\n        if (i == arr.size()) {\n            return\
    \ true;\n        }\n        int j = arr.size() - 1;\n        while (j >= 0 &&\
    \ arr.get(j) == sorted.get(j)) {\n            j--;\n        }\n        if (j ==\
    \ -1) {\n            return true;\n        }\n        if (arr.get(i) == sorted.get(j)\
    \ && arr.get(j) == sorted.get(i)) {\n            return true;\n        }\n   \
    \     return false;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzvm06ts3.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpty40ww79.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_67cs4g.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        int i =\
    \ 0;\n        while (i < arr.size() && arr.get(i) == sorted.get(i)) {\n      \
    \      i++;\n        }\n        if (i == arr.size()) {\n            return true;\n\
    \        }\n        int j = arr.size() - 1;\n        while (j >= 0 && arr.get(j)\
    \ == sorted.get(j)) {\n            j--;\n        }\n        if (j == 0) {\n  \
    \          return true;\n        }\n        return false;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3rvct6ln.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplr6xuek5.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n              \
    \  return false;\n            }\n        }\n        return true;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ykshi70.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpndvcf2i3.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> arrCopy\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(arrCopy);\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != arrCopy.get(i))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzzzqip0_.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwxtxd_mw.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3y6ukhkn.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp960q1_nl.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        if (arr.size() == 0) {\n            return true;\n        }\n    \
    \    long min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) < min) {\n                return false;\n        \
    \    }\n            min = Math.min(min, arr.get(i));\n        }\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprflp7w1i.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphj15hd0p.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23gi6_qf.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwawpidqg.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkos_2llp.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpydvzp0uy.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72o_mohh.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8u_l6akd.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        int\
    \ i = 0;\n        while (i < arr.size() && arr.get(i) == sorted.get(i)) {\n  \
    \          i++;\n        }\n        if (i == arr.size()) {\n            return\
    \ true;\n        }\n        int j = i + 1;\n        while (j < arr.size() && arr.get(j)\
    \ == sorted.get(j)) {\n            j++;\n        }\n        if (j == arr.size())\
    \ {\n            return true;\n        }\n        return false;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeli47z4b.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvrn8025g.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx5jyjupr.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpev6fh3e1.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjypjgqvw.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmn4he8wa.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvc4t6aeq.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0vlbvwa.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0m4k5_sn.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ max) {\n                return false;\n            }\n            max = Math.max(max,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpir82_nr8.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        if (arr.equals(sorted))\
    \ {\n            return true;\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            ArrayList<Long> shifted = new ArrayList<>(arr);\n      \
    \      Collections.rotate(shifted, i);\n            if (shifted.equals(sorted))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnttsydja.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5mvpnx_.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxcwu_2y7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyww82kf.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3lzh9u8j.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> arr2 =\
    \ new ArrayList<Long>(arr);\n        Collections.sort(arr2);\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != arr2.get(i)) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61uo174z.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4xaplaq.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9kqya9dd.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjshz91mt.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) return true;\n        long min = arr.get(0);\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n  \
    \          min = Math.min(min, arr.get(i));\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52hlovs5.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk47yzc2t.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg89xbc80.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_rw4586.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ min) {\n                return false;\n            }\n            min = Math.min(min,\
    \ arr.get(i));\n        }\n        return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0vkqip7w.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptetoqxla.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        long min = Collections.min(arr);\n\
    \        long max = Collections.max(arr);\n        long minIndex = arr.indexOf(min);\n\
    \        long maxIndex = arr.indexOf(max);\n        if (minIndex == 0) {\n   \
    \         return true;\n        }\n        if (maxIndex == arr.size() - 1) {\n\
    \            return true;\n        }\n        return false;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmveevsie.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != sorted.get(i))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbeqzbgtr.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()==0)\
    \ return true;\n        long min=arr.get(0);\n        for (int i=1;i<arr.size();i++)\
    \ {\n            if (arr.get(i)<min) return false;\n            min=Math.min(min,arr.get(i));\n\
    \        }\n        return true;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4cmkuwnr.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code goes here.\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwqya07y9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6zeiads.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpruc9uugc.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2qsrq8zm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l,\
    \ (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjsb2n2js.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != sorted.get(i))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjcym0dd7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n    // numbers in the array will be randomly ordered. Your task\
    \ is to determine if\n    // it is possible to get an array sorted in non-decreasing\
    \ order by performing \n    // the following operation on the given array:\n \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \    // One right shift operation means shifting all elements of the array by\
    \ one\n    // position in the right direction. The last element of the array will\
    \ be moved to\n    // the starting position in the array i.e. 0th index. \n  \
    \  // If it is possible to obtain the sorted array by performing the above operation\n\
    \    // then return True else return False.\n    // If the given array is empty\
    \ then return True.\n    // Note: The given list is guaranteed to have unique\
    \ elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n\
    \    // Explanation: By performin 2 right shift operations, non-decreasing order\
    \ can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4,\
    \ 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing\
    \ order for the given\n    // array by performing any number of right shift operations.\n\
    \    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return true;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != sorted.get(i))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\
    \ == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) ==\
    \ (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo74hkjp6.java:43)\n"
  exit_code: 1
  status: Exception
