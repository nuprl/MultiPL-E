name: HumanEval_58_common
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique common elements for two lists.\n  \
  \  // >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1,\
  \ 5, 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public static\
  \ ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l,\
  \ (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l,\
  \ (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n\
  \    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l,\
  \ (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < l1.size(); i++) {\n            if (l2.contains(l1.get(i))) {\n         \
    \       result.add(l1.get(i));\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j\
    \ < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n       \
    \             result.add(l1.get(i));\n                }\n            }\n     \
    \   }\n        Collections.sort(result);\n        return result;\n", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l : l1) {\n\
    \            if (l2.contains(l)) {\n                result.add(l);\n         \
    \   }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> res = new ArrayList<>();\n        for (Long i : l1) {\n\
    \            if (l2.contains(i) && !res.contains(i)) {\n                res.add(i);\n\
    \            }\n        }\n        Collections.sort(res);\n        return res;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n \
    \               if (l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n\
    \            if (l1.get(i).equals(l2.get(j))) {\n                res.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return res;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n  \
    \      while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) ==\
    \ l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n\
    \                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n     \
    \           i++;\n            } else {\n                j++;\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        HashSet<Long> set1 = new HashSet<Long>(l1);\n\
    \        HashSet<Long> set2 = new HashSet<Long>(l2);\n        for (Long i : set1)\
    \ {\n            if (set2.contains(i)) {\n                result.add(i);\n   \
    \         }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Collections.sort(l1);\n\
    \        Collections.sort(l2);\n        int i = 0;\n        int j = 0;\n     \
    \   while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) == l2.get(j))\
    \ {\n                result.add(l1.get(i));\n                i++;\n          \
    \      j++;\n            } else if (l1.get(i) < l2.get(j)) {\n               \
    \ i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Collections.sort(l1);\n        Collections.sort(l2);\n        int i =\
    \ 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n \
    \           if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : l1) {\n            if\
    \ (l2.contains(l)) {\n                result.add(l);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : l1) {\n            if\
    \ (l2.contains(l)) {\n                result.add(l);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ l3 = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                l3.add(i);\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n\
    \            if (l1.get(i).equals(l2.get(j))) {\n                res.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return res;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ l3 = new ArrayList<Long>();\n        for (int i = 0; i < l1.size(); i++) {\n\
    \            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i)\
    \ == l2.get(j)) {\n                    l3.add(l1.get(i));\n                }\n\
    \            }\n        }\n        Collections.sort(l3);\n        return l3;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> res = new ArrayList<>();\n        int i = 0, j = 0;\n \
    \       while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i).equals(l2.get(j)))\
    \ {\n                res.add(l1.get(i));\n                i++;\n             \
    \   j++;\n            } else if (l1.get(i) < l2.get(j)) {\n                i++;\n\
    \            } else {\n                j++;\n            }\n        }\n      \
    \  return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) < l2.get(j)) {\n                i++;\n        \
    \    } else if (l1.get(i) > l2.get(j)) {\n                j++;\n            }\
    \ else {\n                result.add(l1.get(i));\n                i++;\n     \
    \           j++;\n            }\n        }\n        return result;\n", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l : l1)\
    \ {\n            if (l2.contains(l)) {\n                result.add(l);\n     \
    \       }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> res = new ArrayList<>();\n        HashSet<Long> set = new\
    \ HashSet<>();\n        for (Long i : l1) {\n            set.add(i);\n       \
    \ }\n        for (Long i : l2) {\n            if (set.contains(i)) {\n       \
    \         res.add(i);\n            }\n        }\n        Collections.sort(res);\n\
    \        return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) < l2.get(j)) {\n                i++;\n        \
    \    } else if (l1.get(i) > l2.get(j)) {\n                j++;\n            }\
    \ else {\n                result.add(l1.get(i));\n                i++;\n     \
    \           j++;\n            }\n        }\n        return result;\n", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> l3 = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n   \
    \             if (l1.get(i) == l2.get(j)) {\n                    l3.add(l1.get(i));\n\
    \                }\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;\n", "        ArrayList<Long> res = new ArrayList<>();\n  \
    \      Collections.sort(l1);\n        Collections.sort(l2);\n        int i = 0,\
    \ j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i).equals(l2.get(j)))\
    \ {\n                res.add(l1.get(i));\n                i++;\n             \
    \   j++;\n            } else if (l1.get(i) < l2.get(j)) {\n                i++;\n\
    \            } else {\n                j++;\n            }\n        }\n      \
    \  return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (l1.size() > l2.size()) {\n            for (Long i : l2) {\n     \
    \           if (l1.contains(i)) {\n                    result.add(i);\n      \
    \          }\n            }\n        } else {\n            for (Long i : l1) {\n\
    \                if (l2.contains(i)) {\n                    result.add(i);\n \
    \               }\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) < l2.get(j)) {\n                i++;\n        \
    \    } else if (l1.get(i) > l2.get(j)) {\n                j++;\n            }\
    \ else {\n                result.add(l1.get(i));\n                i++;\n     \
    \           j++;\n            }\n        }\n        return result;\n", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l :\
    \ l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n \
    \       int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n       \
    \     if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < l1.size()\
    \ && j < l2.size()) {\n            if (l1.get(i).equals(l2.get(j))) {\n      \
    \          res.add(l1.get(i));\n                i++;\n                j++;\n \
    \           } else if (l1.get(i) < l2.get(j)) {\n                i++;\n      \
    \      } else {\n                j++;\n            }\n        }\n        return\
    \ res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Collections.sort(l1);\n\
    \        Collections.sort(l2);\n        int i = 0;\n        int j = 0;\n     \
    \   while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) == l2.get(j))\
    \ {\n                result.add(l1.get(i));\n                i++;\n          \
    \      j++;\n            } else if (l1.get(i) < l2.get(j)) {\n               \
    \ i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ l3 = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                l3.add(i);\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j\
    \ < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n       \
    \             result.add(l1.get(i));\n                }\n            }\n     \
    \   }\n        Collections.sort(result);\n        return result;\n", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n     \
    \           if (l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> l3 = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    l3.add(i);\n            }\n        }\n        Collections.sort(l3);\n   \
    \     return l3;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n\
    \            if (l1.get(i).equals(l2.get(j))) {\n                res.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return res;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n  \
    \      while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) ==\
    \ l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n\
    \                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n     \
    \           i++;\n            } else {\n                j++;\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long x : l1) {\n            if (l2.contains(x) && !result.contains(x))\
    \ {\n                result.add(x);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    res.add(l);\n            }\n        }\n        Collections.sort(res);\n \
    \       return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    res.add(l);\n            }\n        }\n        Collections.sort(res);\n \
    \       return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            if (l2.contains(l1.get(i)))\
    \ {\n                result.add(l1.get(i));\n            }\n        }\n      \
    \  Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ l3 = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                l3.add(i);\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> l3 = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    l3.add(i);\n            }\n        }\n        Collections.sort(l3);\n   \
    \     return l3;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i) && !res.contains(i))\
    \ {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n\
    \        return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j\
    \ < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n       \
    \             result.add(l1.get(i));\n                }\n            }\n     \
    \   }\n        Collections.sort(result);\n        return result;\n", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i : l1) {\n\
    \            if (l2.contains(i)) {\n                result.add(i);\n         \
    \   }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n \
    \       int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n       \
    \     if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : l1) {\n            if\
    \ (l2.contains(l)) {\n                result.add(l);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        // TODO:\
    \ Implement this method.\n        ArrayList<Long> l3 = new ArrayList<Long>();\n\
    \        for(int i = 0; i < l1.size(); i++){\n            for(int j = 0; j < l2.size();\
    \ j++){\n                if(l1.get(i) == l2.get(j)){\n                    l3.add(l1.get(i));\n\
    \                }\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    res.add(l);\n            }\n        }\n        Collections.sort(res);\n \
    \       return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j\
    \ < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n       \
    \             result.add(l1.get(i));\n                }\n            }\n     \
    \   }\n        Collections.sort(result);\n        return result;\n", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i : l1) {\n\
    \            if (l2.contains(i)) {\n                result.add(i);\n         \
    \   }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Collections.sort(l1);\n\
    \        Collections.sort(l2);\n        int i = 0;\n        int j = 0;\n     \
    \   while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) == l2.get(j))\
    \ {\n                result.add(l1.get(i));\n                i++;\n          \
    \      j++;\n            } else if (l1.get(i) < l2.get(j)) {\n               \
    \ i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Collections.sort(l1);\n        Collections.sort(l2);\n        int i =\
    \ 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n \
    \           if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        return result;\n",
  "        ArrayList<Long> l3 = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n   \
    \             if (l1.get(i) == l2.get(j)) {\n                    l3.add(l1.get(i));\n\
    \                }\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Collections.sort(l1);\n        Collections.sort(l2);\n        int i =\
    \ 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n \
    \           if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        for (Long i : l1) {\n            if (l2.contains(i)\
    \ && !res.contains(i)) {\n                res.add(i);\n            }\n       \
    \ }\n        Collections.sort(res);\n        return res;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n  \
    \      while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) ==\
    \ l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n\
    \                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n     \
    \           i++;\n            } else {\n                j++;\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j\
    \ < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n       \
    \             result.add(l1.get(i));\n                }\n            }\n     \
    \   }\n        Collections.sort(result);\n        return result;\n", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i : l1) {\n\
    \            if (l2.contains(i)) {\n                result.add(i);\n         \
    \   }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l :\
    \ l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l :\
    \ l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        // TODO: Implement this function.\n        return null;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Collections.sort(l1);\n        Collections.sort(l2);\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < l1.size(); i++)\
    \ {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        Collections.sort(result);\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   for (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l :\
    \ l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < l1.size(); i++) {\n            if (l2.contains(l1.get(i))) {\n         \
    \       result.add(l1.get(i));\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> l3 = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j\
    \ < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n       \
    \             l3.add(l1.get(i));\n                }\n            }\n        }\n\
    \        Collections.sort(l3);\n        return l3;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : l1) {\n            if\
    \ (l2.contains(l)) {\n                result.add(l);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : l1) {\n            if\
    \ (l2.contains(l)) {\n                result.add(l);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < l1.size()\
    \ && j < l2.size()) {\n            if (l1.get(i).equals(l2.get(j))) {\n      \
    \          res.add(l1.get(i));\n                i++;\n                j++;\n \
    \           } else if (l1.get(i) < l2.get(j)) {\n                i++;\n      \
    \      } else {\n                j++;\n            }\n        }\n        return\
    \ res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long l : l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Collections.sort(l1);\n\
    \        Collections.sort(l2);\n        int i = 0;\n        int j = 0;\n     \
    \   while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) == l2.get(j))\
    \ {\n                result.add(l1.get(i));\n                i++;\n          \
    \      j++;\n            } else if (l1.get(i) < l2.get(j)) {\n               \
    \ i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return result;\n", "        // TODO: Implement this function.\n     \
    \   return new ArrayList<Long>();\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Collections.sort(l1);\n        Collections.sort(l2);\n        int i =\
    \ 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n \
    \           if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : l1) {\n            if\
    \ (l2.contains(l)) {\n                result.add(l);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < l1.size()\
    \ && j < l2.size()) {\n            if (l1.get(i).equals(l2.get(j))) {\n      \
    \          res.add(l1.get(i));\n                i++;\n                j++;\n \
    \           } else if (l1.get(i) < l2.get(j)) {\n                i++;\n      \
    \      } else {\n                j++;\n            }\n        }\n        return\
    \ res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n \
    \       int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n       \
    \     if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Collections.sort(l1);\n        Collections.sort(l2);\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < l1.size()\
    \ && j < l2.size()) {\n            if (l1.get(i).equals(l2.get(j))) {\n      \
    \          res.add(l1.get(i));\n                i++;\n                j++;\n \
    \           } else if (l1.get(i) < l2.get(j)) {\n                i++;\n      \
    \      } else {\n                j++;\n            }\n        }\n        return\
    \ res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ set = new HashSet<Long>();\n        for (Long l : l1) {\n            set.add(l);\n\
    \        }\n        for (Long l : l2) {\n            if (set.contains(l)) {\n\
    \                result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long x : l1) {\n            if (l2.contains(x)) {\n            \
    \    result.add(x);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n\
    \                i++;\n                j++;\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i++;\n            } else {\n               \
    \ j++;\n            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ l3 = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                l3.add(i);\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
