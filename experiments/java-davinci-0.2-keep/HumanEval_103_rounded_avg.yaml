name: HumanEval_103_rounded_avg
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given two positive integers n and m, and your task\
  \ is to compute the\n    // average of the integers from n through m (including\
  \ n and m). \n    // Round the answer to the nearest integer and convert that to\
  \ binary.\n    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
  \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
  \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static Union_String_long\
  \ roundedAvg(long n, long m) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1l),\
  \ (5l)).equals((Union_String_long(\"0b11\"))));\n    assert(roundedAvg((7l), (13l)).equals((Union_String_long(\"\
  0b1010\"))));\n    assert(roundedAvg((964l), (977l)).equals((Union_String_long(\"\
  0b1111001010\"))));\n    assert(roundedAvg((996l), (997l)).equals((Union_String_long(\"\
  0b1111100100\"))));\n    assert(roundedAvg((560l), (851l)).equals((Union_String_long(\"\
  0b1011000010\"))));\n    assert(roundedAvg((185l), (546l)).equals((Union_String_long(\"\
  0b101101110\"))));\n    assert(roundedAvg((362l), (496l)).equals((Union_String_long(\"\
  0b110101101\"))));\n    assert(roundedAvg((350l), (902l)).equals((Union_String_long(\"\
  0b1001110010\"))));\n    assert(roundedAvg((197l), (233l)).equals((Union_String_long(\"\
  0b11010111\"))));\n    assert(roundedAvg((7l), (5l)).equals((Union_String_long(-1l))));\n\
  \    assert(roundedAvg((5l), (1l)).equals((Union_String_long(-1l))));\n    assert(roundedAvg((5l),\
  \ (5l)).equals((Union_String_long(\"0b101\"))));\n    }\n\n}\n"
completions: ["        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.long_t(), -1);\n        }\n        long sum = 0;\n  \
    \      for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n   \
    \     long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.String_t(), \"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(Long.toBinaryString(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(\"-1\");\n        }\n     \
    \   long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum +=\
    \ i;\n        }\n        long avg = sum / (m - n + 1);\n        String binary\
    \ = Long.toBinaryString(avg);\n        return new Union_String_long(\"0b\" + binary);\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.T_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type.T_String(),\
    \ \"0b\" + Long.toBinaryString(avg));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(0, -1);\n        }\n        long sum = 0;\n        for\
    \ (long i = n; i <= m; i++) {\n            sum += i;\n        }\n        long\
    \ avg = sum / (m - n + 1);\n        return new Union_String_long(1, avg);\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(1,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(0,\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(Long.toBinaryString(avg));\n", "       \
    \ if (n > m) {\n            return new Union_String_long(-1);\n        }\n   \
    \     long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = (long) Math.round((double) sum / (m - n\
    \ + 1));\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"\", -1);\n   \
    \     }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n    \
    \        sum += i;\n        }\n        long avg = sum / (m - n + 1);\n       \
    \ String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary, 0);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Case_String(\"-1\"));\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Case_String(\"0b\"\
    \ + binary));\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Case_String(\"-1\"));\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Case_String(\"0b\"\
    \ + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_long(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_String(\"\
    0b\" + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(0), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(0),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(0), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(0),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(Union_String_long.Tag.Long,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(Union_String_long.Tag.String,\
    \ Long.toBinaryString(avg));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(new Union_String_long.Type.Type_long(), -1);\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        String binary\
    \ = Long.toBinaryString(avg);\n        return new Union_String_long(new Union_String_long.Type.Type_String(),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(0), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(0),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Variant_long(1), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Variant_String(1),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(false,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(true,\
    \ binary);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(Long.toBinaryString(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Type.long_t(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String bin = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.String_t(), \"0b\" + bin);\n", "        if (n > m) {\n\
    \            return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_long(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_String(\"\
    0b\" + Long.toBinaryString(avg)));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(new Union_String_long.Type.Type_long(0), -1);\n      \
    \  }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n       \
    \     sum += i;\n        }\n        long avg = (long) Math.round((double) sum\
    \ / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type.Type_String(0),\
    \ Long.toBinaryString(avg));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(new Union_String_long.Type.Type_long(new long(-1)));\n   \
    \     }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n    \
    \        sum += i;\n        }\n        long avg = sum / (m - n + 1);\n       \
    \ String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(new String(\"0b\" + binary)));\n", "    \
    \    if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(0, -1);\n        }\n      \
    \  long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum +=\
    \ i;\n        }\n        long avg = sum / (m - n + 1);\n        String binary\
    \ = Long.toBinaryString(avg);\n        return new Union_String_long(1, binary);\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Type_String(), Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.long_t(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.String_t(), \"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(-1);\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Case_String(\"0b\" + binary));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        String binary = Long.toBinaryString(avg);\n   \
    \     return new Union_String_long(new Union_String_long.Case_String(\"0b\" +\
    \ binary));\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(true,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(false, avg);\n", "        if (n > m) {\n\
    \            return new Union_String_long(new Union_String_long.Type_long(), -1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type_String(), \"0b\" + binary);\n", "        if (n > m) {\n\
    \            return new Union_String_long(null, -1);\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg),\
    \ 0);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Variant_long(0));\n        }\n        long sum = 0;\n    \
    \    for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n     \
    \   long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Variant_String(\"\
    0b\" + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_long(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_String(\"\
    0b\" + Long.toBinaryString(avg)));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(new Union_String_long.Union_String_long_Case.Case_String_long_long(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Case_String_long_String(\"0b\" + binary));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.long_t(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type.String_t(),\
    \ \"0b\" + Long.toBinaryString(avg));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(new Union_String_long.Type.long_t(), -1);\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        String binary\
    \ = Long.toBinaryString(avg);\n        return new Union_String_long(new Union_String_long.Type.String_t(),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(0L), -1L);\n        }\n        long sum = 0L;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(\"\
    0b\" + binary), 0L);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(Long.toBinaryString(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(\"-1\");\n        }\n     \
    \   long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum +=\
    \ i;\n        }\n        long avg = (long) Math.round((double) sum / (m - n +\
    \ 1));\n        return new Union_String_long(Long.toBinaryString(avg));\n", " \
    \       if (n > m) {\n            return new Union_String_long(1, -1);\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(0,\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(0), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = (long) Math.round((double) sum / (m - n + 1));\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type.Type_String(0),\
    \ Long.toBinaryString(avg));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(new Union_String_long.Variant_long(1), -1);\n        }\n \
    \       long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        String binary\
    \ = Long.toBinaryString(avg);\n        return new Union_String_long(new Union_String_long.Variant_String(1),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(0), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), Long.toBinaryString(avg));\n", "    \
    \    if (n > m) {\n            return new Union_String_long(-1);\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = (long)Math.round((double)sum / (m - n +\
    \ 1));\n        return new Union_String_long(Long.toBinaryString(avg));\n", " \
    \       if (n > m) {\n            return new Union_String_long(\"-1\");\n    \
    \    }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n     \
    \       sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Case_String(\"-1\"));\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        return new\
    \ Union_String_long(new Union_String_long.Union_String_long_Case.Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(null, -1);\n   \
    \     }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n    \
    \        sum += i;\n        }\n        long avg = (long)Math.round((double)sum\
    \ / (m - n + 1));\n        return new Union_String_long(Long.toBinaryString(avg),\
    \ 0);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Case_String(\"-1\"));\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Case_String(\"0b\"\
    \ + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Case_String(\"-1\"));\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String bin = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Case_String(\"0b\"\
    \ + bin));\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(Long.toBinaryString(avg));\n", "       \
    \ if (n > m) {\n            return new Union_String_long(-1);\n        }\n   \
    \     long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = (long) Math.round((double) sum / (m - n\
    \ + 1));\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Variant_long(1),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Variant_String(1), \"0b\" + binary);\n", "        if (n >\
    \ m) {\n            return new Union_String_long(new Union_String_long.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type_String(), \"0b\" + binary);\n", "        if (n > m) {\n\
    \            return new Union_String_long(1, -1);\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(0, \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(-1);\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = (long) Math.round((double) sum / (m - n + 1));\n\
    \        return new Union_String_long(Long.toBinaryString(avg));\n", "       \
    \ if (n > m) {\n            return new Union_String_long(new Union_String_long.Variant_long(false,\
    \ -1));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Variant_String(true,\
    \ Long.toBinaryString(avg)));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n    \
    \    return new Union_String_long(\"0b\" + binary);\n", "        if (n > m) {\n\
    \            return new Union_String_long(-1);\n        }\n        long sum =\
    \ 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n       \
    \ }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(-1);\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        return new\
    \ Union_String_long(Long.toBinaryString(avg));\n", "        if (n > m) {\n   \
    \         return new Union_String_long(new Union_String_long.Type.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        String binary = Long.toBinaryString(avg);\n   \
    \     return new Union_String_long(new Union_String_long.Type.Type_String(), \"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.long_t(), -1);\n        }\n        long sum = 0;\n  \
    \      for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n   \
    \     long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.String_t(), \"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(0), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = (long) Math.round((double) sum / (m - n + 1));\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(-1);\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        return\
    \ new Union_String_long(Long.toBinaryString(avg));\n", "        if (n > m) {\n\
    \            return new Union_String_long(\"-1\");\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = (long)Math.round((double)sum / (m - n + 1));\n     \
    \   return new Union_String_long(Long.toBinaryString(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(false, -1);\n        }\n  \
    \      long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        return new\
    \ Union_String_long(true, avg);\n", "        if (n > m) {\n            return\
    \ new Union_String_long(new Union_String_long.Type.TLong(-1));\n        }\n  \
    \      long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = (long)Math.round((double)sum / (m - n +\
    \ 1));\n        return new Union_String_long(new Union_String_long.Type.TString(\"\
    0b\" + Long.toBinaryString(avg)));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(new Union_String_long.Type_long(0), -1);\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = Math.round((double) sum / (m - n + 1));\n\
    \        return new Union_String_long(new Union_String_long.Type_String(0), Long.toBinaryString(avg));\n",
  "        if (n > m) return new Union_String_long(\"-1\");\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(\"-1\");\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(\"-1\");\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(new Union_String_long.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Case_String(\"0b\" + binary));\n", "        if (n > m) {\n\
    \            return new Union_String_long(\"-1\");\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(-1);\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(new Union_String_long.Type.long_t(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.String_t(), \"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(new Union_String_long.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Type_String(), \"\
    0b\" + Long.toBinaryString(avg));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(\"-1\");\n        }\n        long sum = 0;\n        for\
    \ (long i = n; i <= m; i++) {\n            sum += i;\n        }\n        long\
    \ avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.TYPE_LONG(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        String binary = Long.toBinaryString(avg);\n   \
    \     return new Union_String_long(new Union_String_long.Type.TYPE_STRING(), \"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(1,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(0,\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Variant_long(1), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Variant_String(1),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Variant_long(false, -1));\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Variant_String(true,\
    \ \"0b\" + binary));\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type_long(), -1);\n        }\n        long sum = 0;\n    \
    \    for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n     \
    \   long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type_String(), \"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(1,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(0, avg);\n", "        if (n > m) {\n   \
    \         return new Union_String_long(new Union_String_long.Type_long(0), -1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String s = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type_String(0), \"0b\" + s);\n", "        if (n > m) {\n \
    \           return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type.Type_String(0),\
    \ Long.toBinaryString(avg));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(new Union_String_long.Type.long_t(), -1);\n        }\n   \
    \     long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        String bin\
    \ = Long.toBinaryString(avg);\n        return new Union_String_long(new Union_String_long.Type.String_t(),\
    \ \"0b\" + bin);\n", "        if (n > m) return new Union_String_long(-1);\n \
    \       long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = (long) Math.round((double) sum / (m - n\
    \ + 1));\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) return new Union_String_long(\"-1\");\n        long sum = 0;\n        for\
    \ (long i = n; i <= m; i++) {\n            sum += i;\n        }\n        long\
    \ avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(\"-1\");\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = (long) Math.round((double) sum / (m - n + 1));\n\
    \        return new Union_String_long(Long.toBinaryString(avg));\n", "       \
    \ if (n > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_String(\"0b\"\
    \ + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_long(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_String(\"\
    0b\" + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Variant_long(1), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Variant_String(1),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Case_long(0), -1);\n        }\n        long sum = 0;\n   \
    \     for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n    \
    \    long avg = sum / (m - n + 1);\n        return new Union_String_long(new Union_String_long.Case_String(0),\
    \ \"0b\" + Long.toBinaryString(avg));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(new Union_String_long.Type.Type_long(), -1);\n       \
    \ }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n        \
    \    sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(), \"0b\" + binary);\n", "        if (n >\
    \ m) {\n            return new Union_String_long(new Union_String_long.Case_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Case_String(0), \"\
    0b\" + Long.toBinaryString(avg));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type_String(),\
    \ Long.toBinaryString(avg));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(0),\
    \ Long.toBinaryString(avg));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n    \
    \    return new Union_String_long(\"0b\" + binary);\n", "        if (n > m) {\n\
    \            return new Union_String_long(new Union_String_long.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type_String(0),\
    \ Long.toBinaryString(avg));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(new Union_String_long.Type_long(), -1);\n        }\n     \
    \   long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum +=\
    \ i;\n        }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(new\
    \ Union_String_long.Type_String(), Long.toBinaryString(avg));\n", "        if\
    \ (n > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(0L),\
    \ 0L);\n        }\n        long sum = 0L;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long)Math.round((double)sum\
    \ / (double)(m - n + 1));\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(\"\
    0b\" + binary), 0L);\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long avg = (n + m) / 2;\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(\"-1\");\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(new Union_String_long.Variant_long(new\
    \ Long(-1)));\n        }\n        long sum = 0;\n        for (long i = n; i <=\
    \ m; i++) {\n            sum += i;\n        }\n        long avg = sum / (m - n\
    \ + 1);\n        String binary = Long.toBinaryString(avg);\n        return new\
    \ Union_String_long(new Union_String_long.Variant_String(new String(\"0b\" + binary)));\n",
  "        if (n > m) {\n            return new Union_String_long(\"\", -1);\n   \
    \     }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n    \
    \        sum += i;\n        }\n        long avg = (long) Math.round((double) sum\
    \ / (m - n + 1));\n        return new Union_String_long(Long.toBinaryString(avg),\
    \ 0);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(Integer.toBinaryString((int)\
    \ avg));\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(Long.toBinaryString(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(-1);\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Variant_long(1), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        return new Union_String_long(new\
    \ Union_String_long.Variant_String(1), \"0b\" + Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_long(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_String(\"\
    0b\" + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Case_String(\"-1\"));\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        return new Union_String_long(new\
    \ Union_String_long.Case_long(avg));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Case_String(\"0b\" + binary));\n", "        if (n > m) {\n\
    \            return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(Union_String_long.Tag.Long,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(Union_String_long.Tag.String, Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Case_long(0), -1);\n        }\n        long sum = 0;\n   \
    \     for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n    \
    \    long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Case_String(0), \"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(Long.toBinaryString(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_long(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_Case_String(\"\
    0b\" + binary));\n", "        if (n > m) {\n            return new Union_String_long(Union_String_long.Tag.Long,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(Union_String_long.Tag.String, \"0b\" + Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(-1);\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        return new\
    \ Union_String_long(Long.toBinaryString(avg));\n", "        if (n > m) {\n   \
    \         return new Union_String_long(new Union_String_long.Type.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(0), \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(-1);\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(false, -1);\n        }\n       \
    \ long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(true,\
    \ avg);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(), \"0b\" + Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.long_type(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.String_type(), \"0b\" + binary);\n", "        if (n >\
    \ m) {\n            return new Union_String_long(1, -1);\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(0, \"0b\" + binary);\n", "        if (n\
    \ > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Case_String(\"0b\" + binary));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(), \"0b\" + binary);\n", "        if (n >\
    \ m) {\n            return new Union_String_long(\"-1\");\n        }\n       \
    \ long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_String(\"-1\"\
    ));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n\
    \            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n   \
    \     String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Union_String_long_Case.Union_String_long_Case_String(\"0b\"\
    \ + binary));\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = (long) Math.round((double) sum / (m - n + 1));\n        return\
    \ new Union_String_long(new Union_String_long.Type.Type_String(), \"0b\" + Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.Type_String(),\
    \ \"0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(\"\
    -1\");\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(Long.toBinaryString(avg));\n", "       \
    \ if (n > m) {\n            return new Union_String_long(-1);\n        }\n   \
    \     long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        return new\
    \ Union_String_long(Long.toBinaryString(avg));\n", "        // Your code here\n\
    \        return null;\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.long_(), -1);\n        }\n        long sum = 0;\n   \
    \     for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n    \
    \    long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(new Union_String_long.Type.String_(), \"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Variant_long(0));\n        }\n        long sum = 0;\n    \
    \    for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n     \
    \   long avg = (long)Math.round((double)sum / (m - n + 1));\n        return new\
    \ Union_String_long(new Union_String_long.Variant_String(\"0b\" + Long.toBinaryString(avg)));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.long_t(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String avgBin = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.String_t(), \"0b\" + avgBin);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(-1);\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(-1);\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(-1);\n        }\n\
    \        long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = (long) Math.round((double) sum / (m - n\
    \ + 1));\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type_long(), -1);\n        }\n        long sum = 0;\n    \
    \    for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n     \
    \   long avg = (long) Math.round((double) sum / (m - n + 1));\n        return\
    \ new Union_String_long(new Union_String_long.Type_String(), Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.TLong(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(new Union_String_long.Type.TString(\"0b\" +\
    \ Long.toBinaryString(avg)));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ (long) Math.round((double) sum / (m - n + 1));\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n", "        if (n > m) {\n            return new Union_String_long(true,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(false,\
    \ binary);\n", "        if (n > m) {\n            return new Union_String_long(-1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(Long.toBinaryString(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(-1);\n        }\n        long\
    \ sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n \
    \       }\n        long avg = sum / (m - n + 1);\n        String binary = Long.toBinaryString(avg);\n\
    \        return new Union_String_long(\"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(false, -1);\n        }\n       \
    \ long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(true,\
    \ avg);\n", "        if (n > m) {\n            return new Union_String_long(true,\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(false, avg);\n", "        // Your code here\n\
    \        return null;\n", "        if (n > m) {\n            return new Union_String_long(new\
    \ Union_String_long.Type.Type_long(), -1);\n        }\n        long sum = 0;\n\
    \        for (long i = n; i <= m; i++) {\n            sum += i;\n        }\n \
    \       long avg = sum / (m - n + 1);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(), \"0b\" + Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(true, -1);\n   \
    \     }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n    \
    \        sum += i;\n        }\n        long avg = sum / (m - n + 1);\n       \
    \ return new Union_String_long(false, avg);\n", "        if (n > m) {\n      \
    \      return new Union_String_long(new Union_String_long.Type.long_(), -1);\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    String bin = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.String_(), \"0b\" + bin);\n", "        if (n > m) {\n\
    \            return new Union_String_long(new Union_String_long.Type.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.Type_String(), \"0b\" + binary);\n", "        if (n >\
    \ m) return new Union_String_long(\"-1\");\n        long sum = 0;\n        for\
    \ (long i = n; i <= m; i++) {\n            sum += i;\n        }\n        long\
    \ avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type_long(0),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type_String(0), \"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(new Union_String_long.Type.long_t(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        String binary = Long.toBinaryString(avg);\n        return new Union_String_long(new\
    \ Union_String_long.Type.String_t(), \"0b\" + binary);\n", "        if (n > m)\
    \ {\n            return new Union_String_long(-1);\n        }\n        long sum\
    \ = 0;\n        for (long i = n; i <= m; i++) {\n            sum += i;\n     \
    \   }\n        long avg = sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.Type_long(),\
    \ -1);\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = (long) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_long(new Union_String_long.Type.Type_String(),\
    \ \"0b\" + Long.toBinaryString(avg));\n", "        if (n > m) {\n            return\
    \ new Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Type.TLong(-1));\n\
    \        }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n \
    \           sum += i;\n        }\n        long avg = sum / (m - n + 1);\n    \
    \    return new Union_String_long(new Union_String_long.Type.TString(\"0b\" +\
    \ Long.toBinaryString(avg)));\n", "        if (n > m) {\n            return new\
    \ Union_String_long(new Union_String_long.Case_String(\"-1\"));\n        }\n \
    \       long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        return new\
    \ Union_String_long(new Union_String_long.Case_long(avg));\n", "        if (n\
    \ > m) {\n            return new Union_String_long(true, -1);\n        }\n   \
    \     long sum = 0;\n        for (long i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        long avg = sum / (m - n + 1);\n        return new\
    \ Union_String_long(false, avg);\n", "        if (n > m) {\n            return\
    \ new Union_String_long(-1);\n        }\n        long sum = 0;\n        for (long\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        long avg =\
    \ sum / (m - n + 1);\n        return new Union_String_long(Long.toBinaryString(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_String(\"\
    -1\"));\n        }\n        long sum = 0;\n        for (long i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        long avg = sum / (m - n + 1);\n\
    \        return new Union_String_long(new Union_String_long.Union_String_long_Case.Union_String_long_Case_long(avg));\n",
  "        if (n > m) {\n            return new Union_String_long(\"-1\");\n     \
    \   }\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n      \
    \      sum += i;\n        }\n        long avg = sum / (m - n + 1);\n        String\
    \ binary = Long.toBinaryString(avg);\n        return new Union_String_long(\"\
    0b\" + binary);\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
