name: HumanEval_159_eat
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        long total\
    \ = number + need;\n        long left = remaining - need;\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add(total);\n        result.add(left);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4zomppc.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0lwk4my.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        return new\
    \ ArrayList<Long>();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnd08q6t2.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (left < 0) {\n            total = total + left;\n            left\
    \ = 0;\n        }\n        result.add(total);\n        result.add(left);\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9k1l9w4r.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            res.add(number + remaining);\n \
    \           res.add((long) 0);\n        } else {\n            res.add(number +\
    \ need);\n            res.add(remaining - need);\n        }\n        return res;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (total > remaining) {\n            result.add(remaining);\n      \
    \      result.add(0L);\n        } else {\n            result.add(total);\n   \
    \         result.add(left);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l),\
    \ (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n\
    \    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoca2x582.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number >= need) {\n            result.add(need);\n            result.add(remaining);\n\
    \        } else {\n            if (remaining >= need - number) {\n           \
    \     result.add(need);\n                result.add(remaining - (need - number));\n\
    \            } else {\n                result.add(number + remaining);\n     \
    \           result.add(0L);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9mtfmkau.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkv9hom5.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfm08oc3.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9_g5kzy.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (left < 0) {\n            total = total + left;\n            left\
    \ = 0;\n        }\n        result.add(total);\n        result.add(left);\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        if(remaining\
    \ < need) {\n            return new ArrayList<Long>(Arrays.asList(number + remaining,\
    \ 0L));\n        }\n        return new ArrayList<Long>(Arrays.asList(number +\
    \ need, remaining - need));\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need <= remaining) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if(number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76h35smt.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3fhu9vd.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp93k5o7mq.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnk3w3gem.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if(remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long)0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdn0l7q_o.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8_fahidl.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39kgvanm.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vs_vi8a.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyezqw53i.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(need + number);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(remaining\
    \ + number);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        long total = number + need;\n        long\
    \ left = remaining - need;\n        if (left < 0) {\n            total += left;\n\
    \            left = 0;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(total);\n        result.add(left);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz6r2y6cv.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (left < 0) {\n            total = total + left;\n            left\
    \ = 0;\n        }\n        result.add(total);\n        result.add(left);\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mvbmc5t.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpenhciz_n.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number >= need) {\n            result.add(number);\n            result.add(remaining);\n\
    \        } else {\n            if (remaining >= need - number) {\n           \
    \     result.add(need);\n                result.add(remaining - (need - number));\n\
    \            } else {\n                result.add(remaining + number);\n     \
    \           result.add(0L);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9dmduzl1.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long eaten = number + need;\n        long left = remaining - need;\n\
    \        if (left < 0) {\n            left = 0;\n        }\n        result.add(eaten);\n\
    \        result.add(left);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9at4g0yv.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // your code here\n        return new\
    \ ArrayList<Long>();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxrlp339l.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwejnjtg.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsof9ofmm.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjmy9zl2.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total > remaining) {\n            result.add(remaining);\n           \
    \ result.add(0L);\n        } else {\n            result.add(total);\n        \
    \    result.add(remaining - total);\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2hc9fi_m.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu7gpmhjh.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            res.add(number + need);\n     \
    \       res.add(remaining - need);\n        } else {\n            res.add(number\
    \ + remaining);\n            res.add((long) 0);\n        }\n        return res;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number < 0 || need < 0 || remaining < 0) {\n            result.add((long)\
    \ -1);\n            result.add((long) -1);\n            return result;\n     \
    \   }\n        if (number > 1000 || need > 1000 || remaining > 1000) {\n     \
    \       result.add((long) -1);\n            result.add((long) -1);\n         \
    \   return result;\n        }\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add((long) 0);\n            return result;\n\
    \        }\n        result.add(number + need);\n        result.add(remaining -\
    \ need);\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1i2xvmw.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpghsa8kp9.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcnv4e3k7.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total > remaining) {\n            result.add(remaining);\n           \
    \ result.add(0L);\n        } else {\n            result.add(total);\n        \
    \    result.add(remaining - total);\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpridlw2l1.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cn1lzdy.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_3tom94.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if(remaining >= need) {\n         \
    \   result.add(number + need);\n            result.add(remaining - need);\n  \
    \      } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        return new\
    \ ArrayList<Long>();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubq5q6dz.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy860xhmf.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9xt7v72.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tz7987n.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need <= remaining) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp758pamj1.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptl1x4341.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if(remaining >= need) {\n         \
    \   result.add(number + need);\n            result.add(remaining - need);\n  \
    \      } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if(number + need <= remaining){\n \
    \           result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        }\n        else{\n            result.add(remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l),\
    \ (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n\
    \    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj08jln0b.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdd641el.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number < 0 || need < 0 || remaining < 0) {\n            result.add(0L);\n\
    \            result.add(0L);\n            return result;\n        }\n        if\
    \ (number > 1000 || need > 1000 || remaining > 1000) {\n            result.add(0L);\n\
    \            result.add(0L);\n            return result;\n        }\n        long\
    \ total = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n            return result;\n        }\n        result.add(total);\n\
    \        result.add(remaining - total);\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l),\
    \ (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n\
    \    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn2gk82bk.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = 0;\n        if (total\
    \ > remaining) {\n            left = 0;\n        } else {\n            left =\
    \ remaining - total;\n        }\n        result.add(total);\n        result.add(left);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5yqx502c.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyjq_m1xw.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6bh85ukn.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15bzpqj6.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2lp0th8.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppbmjhyfx.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpetkabook.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number < 0 || need < 0 || remaining < 0) {\n            result.add((long)\
    \ -1);\n            result.add((long) -1);\n            return result;\n     \
    \   }\n        if (number > 1000 || need > 1000 || remaining > 1000) {\n     \
    \       result.add((long) -1);\n            result.add((long) -1);\n         \
    \   return result;\n        }\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n            return result;\n\
    \        } else {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n            return result;\n        }\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number < 0 || need < 0 || remaining < 0) {\n            result.add(0L);\n\
    \            result.add(0L);\n            return result;\n        }\n        if\
    \ (number > 1000 || need > 1000 || remaining > 1000) {\n            result.add(0L);\n\
    \            result.add(0L);\n            return result;\n        }\n        if\
    \ (remaining == 0) {\n            result.add(number);\n            result.add(0L);\n\
    \            return result;\n        }\n        if (remaining < need) {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \      return result;\n        }\n        result.add(number + need);\n       \
    \ result.add(remaining - need);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8q4pb75y.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (remaining >= need) {\n     \
    \       result.add(total);\n            result.add(remaining - need);\n      \
    \  } else {\n            result.add(total - need + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total <= remaining) {\n    \
    \        result.add(total);\n            result.add(remaining - total);\n    \
    \    } else {\n            result.add(remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6kgnmpy.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidyx_34e.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total <= remaining) {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptbcilix9.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe96a58wm.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   long left = remaining - need;\n        if (left < 0) {\n            total\
    \ = total + left;\n            left = 0;\n        }\n        result.add(total);\n\
    \        result.add(left);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9gptedv5.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp70zk953q.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qhqlprl.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0c_y8jyj.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm6tzsvcl.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        // Your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l),\
    \ (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = 0;\n        if (total\
    \ > remaining) {\n            left = total - remaining;\n            total = remaining;\n\
    \        }\n        result.add(total);\n        result.add(left);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
    \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
    \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi7d9_gxc.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    // but now you need to eat more carrots to complete\
    \ the day's meals.\n    // you should return an array of [ total number of eaten\
    \ carrots after your meals,\n    // the number of carrots left after your meals\
    \ ]\n    // if there are not enough remaining carrots, you will eat all remaining\
    \ carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10)\
    \ -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11,\
    \ 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n\
    \    // the number of carrots that you have eaten.\n    // @need : integer\n \
    \   // the number of carrots that you need to eat.\n    // @remaining : integer\n\
    \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
    \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
    \ <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number,\
    \ long need, long remaining) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaolooicj.java:44)\n"
  exit_code: 1
  status: Exception
