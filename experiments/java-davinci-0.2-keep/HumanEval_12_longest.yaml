name: HumanEval_12_longest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Out of list of strings, return the longest one. Return the\
  \ first one in case of multiple\n    // strings of the same length. Return None\
  \ in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
  \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
  \    public static Optional<String> longest(ArrayList<String> strings) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(Optional.of(\"\
  x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\",\
  \ (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
  abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
completions: ["        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String string : strings) {\n            if (string.length() > maxLength)\
    \ {\n                maxLength = string.length();\n                longestString\
    \ = string;\n            }\n        }\n        return Optional.of(longestString);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longestString = strings.get(0);\n        for (String s\
    \ : strings) {\n            if (s.length() > longestString.length()) {\n     \
    \           longestString = s;\n            }\n        }\n        return Optional.of(longestString);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLen = 0;\n        String maxStr = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLen) {\n                maxLen\
    \ = s.length();\n                maxStr = s;\n            }\n        }\n     \
    \   return Optional.of(maxStr);\n", "        if (strings.size() == 0) {\n    \
    \        return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = null;\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int max_length = 0;\n        String longest_string = \"\";\n\
    \        for (String s : strings) {\n            if (s.length() > max_length)\
    \ {\n                max_length = s.length();\n                longest_string\
    \ = s;\n            }\n        }\n        return Optional.of(longest_string);\n",
  "        return Optional.empty();\n", "        // TODO: implement this function\n\
    \        return Optional.empty();\n", "        if (strings.size() == 0) {\n  \
    \          return Optional.empty();\n        }\n        int maxLength = 0;\n \
    \       String longestString = \"\";\n        for (String s : strings) {\n   \
    \         if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longestString = s;\n            }\n        }\n        return\
    \ Optional.of(longestString);\n", "        return Optional.empty();\n", "    \
    \    return strings.stream().max(Comparator.comparing(String::length));\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String max = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > max.length()) {\n                max = s;\n\
    \            }\n        }\n        return Optional.of(max);\n", "        return\
    \ strings.stream().max(Comparator.comparing(String::length));\n", "        return\
    \ strings.stream().max(Comparator.comparing(String::length));\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String maxString = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLength) {\n                maxLength\
    \ = s.length();\n                maxString = s;\n            }\n        }\n  \
    \      return Optional.of(maxString);\n", "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().reduce((a, b) -> a.length() >= b.length() ? a\
    \ : b);\n", "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int maxLength = 0;\n        String longest = \"\";\n     \
    \   for (String s : strings) {\n            if (s.length() > maxLength) {\n  \
    \              maxLength = s.length();\n                longest = s;\n       \
    \     }\n        }\n        return Optional.of(longest);\n", "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return Optional.empty();\n", "        if (strings.size() == 0) {\n   \
    \         return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = null;\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        Optional<String> longest = Optional.of(strings.get(0));\n    \
    \    for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String maxString = null;\n       \
    \ for (String s : strings) {\n            if (s.length() > maxLength) {\n    \
    \            maxLength = s.length();\n                maxString = s;\n       \
    \     }\n        }\n        return Optional.of(maxString);\n", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        return null;\n", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        int maxLength = 0;\n        String longestString = \"\";\n     \
    \   for (String s : strings) {\n            if (s.length() > maxLength) {\n  \
    \              maxLength = s.length();\n                longestString = s;\n \
    \           }\n        }\n        return Optional.of(longestString);\n", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) return Optional.empty();\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        return strings.stream().reduce((a,\
    \ b) -> a.length() >= b.length() ? a : b);\n", "        return strings.stream().reduce((a,\
    \ b) -> a.length() > b.length() ? a : b);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max = 0;\n \
    \       String longest = \"\";\n        for (String s : strings) {\n         \
    \   if (s.length() > max) {\n                max = s.length();\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        Optional<String> longest = Optional.of(strings.get(0));\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        // TODO: Implement me\n        return Optional.empty();\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String maxString = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLength) {\n                maxLength\
    \ = s.length();\n                maxString = s;\n            }\n        }\n  \
    \      return Optional.of(maxString);\n", "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) return Optional.empty();\n        int maxLen =\
    \ strings.get(0).length();\n        int maxLenIndex = 0;\n        for (int i =\
    \ 1; i < strings.size(); i++) {\n            if (strings.get(i).length() > maxLen)\
    \ {\n                maxLen = strings.get(i).length();\n                maxLenIndex\
    \ = i;\n            }\n        }\n        return Optional.of(strings.get(maxLenIndex));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String maxString = \"\";\n       \
    \ for (String s : strings) {\n            if (s.length() > maxLength) {\n    \
    \            maxLength = s.length();\n                maxString = s;\n       \
    \     }\n        }\n        return Optional.of(maxString);\n", "        return\
    \ strings.stream().max(Comparator.comparing(String::length));\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String longestString = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longestString = s;\n       \
    \     }\n        }\n        return Optional.of(longestString);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        //\
    \ TODO: Implement me\n        return Optional.empty();\n", "        return strings.stream().reduce((a,\
    \ b) -> a.length() >= b.length() ? a : b);\n", "        if (strings.size() ==\
    \ 0) {\n            return Optional.empty();\n        }\n        int max = 0;\n\
    \        String longest = \"\";\n        for (String s : strings) {\n        \
    \    if (s.length() > max) {\n                max = s.length();\n            \
    \    longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = strings.get(0).length();\n        String longestString\
    \ = strings.get(0);\n        for (int i = 1; i < strings.size(); i++) {\n    \
    \        if (strings.get(i).length() > maxLength) {\n                maxLength\
    \ = strings.get(i).length();\n                longestString = strings.get(i);\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       // YOUR CODE HERE\n        return Optional.empty();\n", "        // TODO:\
    \ Implement this function\n        return Optional.empty();\n", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longestString = null;\n        for (String s : strings) {\n\
    \            if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longestString = s;\n            }\n        }\n        return\
    \ Optional.of(longestString);\n", "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       // your code here\n        return Optional.empty();\n", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        // TODO: implement this\
    \ method\n        return null;\n", "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = null;\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = null;\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n", "  \
    \      if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);\n", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int maxLength\
    \ = 0;\n        String longestString = \"\";\n        for (String s : strings)\
    \ {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longestString = s;\n            }\n        }\n        return\
    \ Optional.of(longestString);\n", "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        // TODO: Implement this function\n        return Optional.empty();\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max_length = 0;\n        String max_string = \"\";\n     \
    \   for (String s : strings) {\n            if (s.length() > max_length) {\n \
    \               max_length = s.length();\n                max_string = s;\n  \
    \          }\n        }\n        return Optional.of(max_string);\n", "       \
    \ if (strings.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int max = 0;\n        String longest = \"\";\n        for (String s :\
    \ strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int max = 0;\n        String longest = null;\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       Optional<String> longest = Optional.empty();\n        for (String s :\
    \ strings) {\n            if (longest.isEmpty() || longest.get().length() < s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String maxString = \"\";\n       \
    \ for (String s : strings) {\n            if (s.length() > maxLength) {\n    \
    \            maxLength = s.length();\n                maxString = s;\n       \
    \     }\n        }\n        return Optional.of(maxString);\n", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max = 0;\n \
    \       String maxString = \"\";\n        for (String s : strings) {\n       \
    \     if (s.length() > max) {\n                max = s.length();\n           \
    \     maxString = s;\n            }\n        }\n        return Optional.of(maxString);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);\n",
  "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int max_length = 0;\n        String max_string = \"\";\n    \
    \    for (String s : strings) {\n            if (s.length() > max_length) {\n\
    \                max_length = s.length();\n                max_string = s;\n \
    \           }\n        }\n        return Optional.of(max_string);\n", "      \
    \  if (strings.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String longestString = null;\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longestString = s;\n       \
    \     }\n        }\n        return Optional.of(longestString);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String longestString = null;\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longestString = s;\n       \
    \     }\n        }\n        return Optional.of(longestString);\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);\n", "        return\
    \ strings.stream().max(Comparator.comparing(String::length));\n", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String maxString = null;\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLength) {\n                maxLength\
    \ = s.length();\n                maxString = s;\n            }\n        }\n  \
    \      return Optional.of(maxString);\n", "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int max_length = 0;\n        String max_string = \"\";\n    \
    \    for (String s : strings) {\n            if (s.length() > max_length) {\n\
    \                max_length = s.length();\n                max_string = s;\n \
    \           }\n        }\n        return Optional.of(max_string);\n", "      \
    \  if (strings.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        int max = 0;\n        String maxString = \"\";\n        for (String s\
    \ : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                maxString = s;\n            }\n        }\n        return Optional.of(maxString);\n",
  "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) return Optional.empty();\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) longest = s;\n        }\n        return Optional.of(longest);\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);\n", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);\n", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String maxString = \"\";\n        for (String s : strings) {\n \
    \           if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                maxString = s;\n            }\n        }\n        return Optional.of(maxString);\n",
  "        return strings.stream().max(Comparator.comparing(String::length));\n",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);\n", " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longestString = \"\";\n  \
    \      for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
