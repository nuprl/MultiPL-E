name: HumanEval_98_count_upper
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string s, count the number of uppercase vowels in\
  \ even indices.\n    // For example:\n    // count_upper('aBCdEf') returns 1\n \
  \   // count_upper('abcdefg') returns 0\n    // count_upper('dBBE') returns 0\n\
  \    public static long countUpper(String s) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(countUpper((\"\
  aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return s.chars().filter(c -> c >= 'A' && c <= 'Z').filter(c\
    \ -> c % 2 == 0).count();\n", "        // TODO: Implement this method\n      \
    \  return 0;\n", "        return 0;\n", "        long count = 0;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        return count;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        long\
    \ count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i\
    \ % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n\
    \            }\n        }\n        return count;\n", "        return 0;\n", " \
    \       long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n    \
    \        if (i % 2 == 0 && isUpperVowel(s.charAt(i))) {\n                count++;\n\
    \            }\n        }\n        return count;\n", "        return 0;\n", " \
    \       return 0;\n", "        // TODO: Implement this function\n        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return s.chars().filter(i -> i % 2 == 0).filter(Character::isUpperCase).count();\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        // TODO: Implement this function\n        return 0;\n", "  \
    \      return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        // TODO: Implement this function\n        return\
    \ 0;\n", "        return 0;\n", "        // TODO: Implement this function\n  \
    \      return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ s.chars().filter(i -> i % 2 == 0).filter(i -> Character.isUpperCase(i)).count();\n",
  "        // TODO: Implement this function\n        return 0;\n", "        // TODO:\
    \ Implement this method\n        return 0;\n", "        return 0;\n", "      \
    \  // TODO: Implement this function.\n        return 0;\n", "        // TODO:\
    \ Implement me\n        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        // TODO: Implement me\n        return\
    \ 0;\n", "        // TODO: Implement this function\n        return 0;\n", "  \
    \      // TODO: Implement this method\n        return 0;\n", "        return 0;\n",
  "        // TODO: Implement this function\n        return 0;\n", "        long count\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2\
    \ == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n  \
    \          }\n        }\n        return count;\n", "        // TODO: Implement\
    \ this function\n        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        // TODO: implement this method\n\
    \        return 0;\n", "        long count = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n\
    \                count++;\n            }\n        }\n        return count;\n",
  "        return 0;\n", "        return 0;\n", "        // TODO: Implement me\n \
    \       return 0;\n", "        return 0;\n", "        long count = 0;\n      \
    \  for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        return count;\n",
  "        return 0;\n", "        return 0;\n", "        // TODO: Implement this function\n\
    \        return 0;\n", "        return 0;\n", "        return 0;\n", "       \
    \ long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n          \
    \  if (i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n\
    \            }\n        }\n        return count;\n", "        return 0;\n", " \
    \       long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n    \
    \        if (i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n           \
    \     count++;\n            }\n        }\n        return count;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        // TODO: Implement\
    \ this function\n        return 0;\n", "        return 0;\n", "        // TODO:\
    \ implement this function\n        return 0;\n", "        return 0;\n", "    \
    \    return 0;\n", "        return s.chars().filter(c -> c >= 'A' && c <= 'Z').filter(c\
    \ -> c % 2 == 0).count();\n", "        return 0;\n", "        return 0;\n", " \
    \       return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return s.chars().filter(c -> c >= 'A'\
    \ && c <= 'Z' && c % 2 == 0).count();\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        long count = 0;\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        return count;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        long\
    \ count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i\
    \ % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n\
    \            }\n        }\n        return count;\n", "        return 0;\n", " \
    \       return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        // TODO: Implement this function\n        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        // TODO: Implement me\n        return 0;\n", " \
    \       return 0;\n", "        return 0;\n", "        return 0;\n", "        //\
    \ TODO: implement this function\n        return 0;\n", "        return 0;\n",
  "        // TODO: Implement this method\n        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        // Your code here\n        return 0;\n", "     \
    \   return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        // TODO: Implement this method\n        return 0;\n", "    \
    \    return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        // TODO: Implement this method\n\
    \        return 0;\n", "        return 0;\n", "        return 0;\n", "       \
    \ // TODO: Implement this function\n        return 0;\n", "        // TODO: implement\
    \ this function\n        return 0;\n", "        return 0;\n", "        // TODO:\
    \ Implement this method\n        return 0;\n", "        return 0;\n", "      \
    \  return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        // TODO: Implement\
    \ me\n        return 0;\n", "        return 0;\n", "        return 0;\n", "  \
    \      return 0;\n", "        // TODO: Implement me!\n        return 0;\n", " \
    \       return 0;\n", "        // TODO: implement this method\n        return\
    \ 0;\n", "        // TODO: Implement this function.\n        return 0;\n", " \
    \       return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        // TODO: Implement this function\n        return 0;\n", "  \
    \      return 0;\n", "        return 0;\n", "        // TODO: Implement this function.\n\
    \        return 0;\n", "        return s.chars().filter(i -> i % 2 == 0).filter(i\
    \ -> Character.isUpperCase(i)).count();\n", "        return 0;\n", "        //\
    \ TODO: Implement me\n        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        // TODO: Implement this function\n        return 0;\n", "        return\
    \ s.chars().filter(c -> c >= 'A' && c <= 'Z').filter(c -> (c - 'A') % 2 == 0).count();\n",
  "        return 0;\n", "        return 0;\n", "        // TODO: Implement this method\n\
    \        return 0;\n", "        return 0;\n", "        return 0;\n", "       \
    \ return 0;\n", "        return 0;\n", "        // TODO: implement this method\n\
    \        return 0;\n", "        return 0;\n", "        return s.chars().filter(c\
    \ -> c >= 'A' && c <= 'Z').filter(c -> c % 2 == 0).count();\n", "        return\
    \ 0;\n", "        // TODO: Implement this method\n        return 0;\n", "    \
    \    return 0;\n", "        return 0;\n", "        return 0;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
