name: HumanEval_90_next_smallest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a list of integers.\n    // Write a function\
  \ next_smallest() that returns the 2nd smallest element of the list.\n    // Return\
  \ None if there is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n\
  \    // next_smallest([5, 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n\
  \    // next_smallest([1, 1]) == None\n    public static Optional<Long> nextSmallest(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l,\
  \ (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l,\
  \ (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));\n    assert(nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l,\
  \ (long)12l, (long)-45l)))).equals(Optional.of(-35l)));\n    }\n\n}\n"
completions: ["        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long nextMin = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               nextMin = min;\n                min = cur;\n            } else\
    \ if (cur < nextMin) {\n                nextMin = cur;\n            }\n      \
    \  }\n        if (nextMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(nextMin);\n", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long nextMin = Long.MAX_VALUE;\n        for (long i : lst) {\n      \
    \      if (i < min) {\n                nextMin = min;\n                min = i;\n\
    \            } else if (i < nextMin && i != min) {\n                nextMin =\
    \ i;\n            }\n        }\n        if (nextMin == Long.MAX_VALUE) {\n   \
    \         return Optional.empty();\n        }\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n\
    \        long last = sorted.get(0);\n        for (int i = 1; i < sorted.size();\
    \ i++) {\n            long current = sorted.get(i);\n            if (current !=\
    \ last) {\n                return Optional.of(current);\n            }\n     \
    \       last = current;\n        }\n        return Optional.empty();\n", "   \
    \     if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (int i = 1; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                secondMin = min;\n              \
    \  min = x;\n            } else if (x < secondMin) {\n                secondMin\
    \ = x;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        // TODO: Implement me!\n        return Optional.empty();\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long min = lst.get(0);\n        long nextMin = lst.get(1);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long num = lst.get(i);\n        \
    \    if (num < min) {\n                nextMin = min;\n                min = num;\n\
    \            } else if (num < nextMin) {\n                nextMin = num;\n   \
    \         }\n        }\n        return min == nextMin ? Optional.empty() : Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin && i\
    \ != min) {\n                secondMin = i;\n            }\n        }\n      \
    \  if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n        for (int i =\
    \ 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n           \
    \ if (curr < min) {\n                secondMin = min;\n                min = curr;\n\
    \            } else if (curr < secondMin) {\n                secondMin = curr;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = curr;\n            } else if (curr < nextSmallest)\
    \ {\n                nextSmallest = curr;\n            }\n        }\n        return\
    \ Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long min = lst.get(0);\n        long nextMin\
    \ = lst.get(1);\n        if (min > nextMin) {\n            long tmp = min;\n \
    \           min = nextMin;\n            nextMin = tmp;\n        }\n        for\
    \ (int i = 2; i < lst.size(); i++) {\n            long curr = lst.get(i);\n  \
    \          if (curr < min) {\n                nextMin = min;\n               \
    \ min = curr;\n            } else if (curr < nextMin) {\n                nextMin\
    \ = curr;\n            }\n        }\n        return Optional.of(nextMin);\n",
  "        // Your code here\n        return Optional.empty();\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n        for (long x :\
    \ lst) {\n            if (x < min) {\n                secondMin = min;\n     \
    \           min = x;\n            } else if (x < secondMin && x != min) {\n  \
    \              secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        ArrayList<Long> sorted =\
    \ new ArrayList<Long>(lst);\n        Collections.sort(sorted);\n        for (int\
    \ i = 1; i < sorted.size(); i++) {\n            if (sorted.get(i) != sorted.get(i\
    \ - 1)) {\n                return Optional.of(sorted.get(i));\n            }\n\
    \        }\n        return Optional.empty();\n", "        // Your code here\n\
    \        return Optional.empty();\n", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long x : lst) {\n    \
    \        if (x < min) {\n                secondMin = min;\n                min\
    \ = x;\n            } else if (x < secondMin) {\n                secondMin = x;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long next = Long.MAX_VALUE;\n       \
    \ for (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                next = min;\n                min\
    \ = cur;\n            } else if (cur < next) {\n                next = cur;\n\
    \            }\n        }\n        return next == Long.MAX_VALUE ? Optional.empty()\
    \ : Optional.of(next);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long smallest = lst.get(0);\n        long\
    \ nextSmallest = lst.get(1);\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            long current = lst.get(i);\n            if (current < smallest) {\n\
    \                nextSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < nextSmallest) {\n                nextSmallest\
    \ = current;\n            }\n        }\n        return Optional.of(nextSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n\
    \        return Optional.of(sorted.get(1));\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long nextMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            Long x = lst.get(i);\n            if (x < min) {\n          \
    \      nextMin = min;\n                min = x;\n            } else if (x < nextMin)\
    \ {\n                nextMin = x;\n            }\n        }\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  if (min > secondMin) {\n            long tmp = min;\n            min = secondMin;\n\
    \            secondMin = tmp;\n        }\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long nextSmallest = smallest;\n        for (int i = 1;\
    \ i < lst.size(); i++) {\n            long current = lst.get(i);\n           \
    \ if (current < smallest) {\n                nextSmallest = smallest;\n      \
    \          smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   if (nextSmallest == smallest) {\n            return Optional.empty();\n  \
    \      }\n        return Optional.of(nextSmallest);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = Long.MAX_VALUE;\n        for (long\
    \ i : lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        if\
    \ (secondSmallest == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondSmallest);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n        for (long\
    \ i : lst) {\n            if (i < smallest) {\n                nextSmallest =\
    \ smallest;\n                smallest = i;\n            } else if (i < nextSmallest)\
    \ {\n                nextSmallest = i;\n            }\n        }\n        if (nextSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n  \
    \          return Optional.empty();\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(lst);\n        Collections.sort(sorted);\n        Long\
    \ smallest = sorted.get(0);\n        Long secondSmallest = sorted.get(1);\n  \
    \      for (Long i : lst) {\n            if (i == smallest) {\n              \
    \  continue;\n            }\n            if (i == secondSmallest) {\n        \
    \        return Optional.of(i);\n            }\n        }\n        return Optional.empty();\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Collections.min(lst);\n        long secondMin = Collections.max(lst);\n\
    \        for (long i : lst) {\n            if (i > min && i < secondMin) {\n \
    \               secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Collections.max(lst)) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n \
    \           return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = null;\n        for (Long x : lst) {\n            if\
    \ (x < min) {\n                secondMin = min;\n                min = x;\n  \
    \          } else if (x < secondMin || secondMin == null) {\n                secondMin\
    \ = x;\n            }\n        }\n        return Optional.ofNullable(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin && i\
    \ != min) {\n                secondMin = i;\n            }\n        }\n      \
    \  if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long nextSmallest = lst.get(1);\n        for (int i =\
    \ 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n        \
    \    if (current < smallest) {\n                nextSmallest = smallest;\n   \
    \             smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n   \
    \         return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long i : lst) {\n    \
    \        if (i < min) {\n                secondMin = min;\n                min\
    \ = i;\n            } else if (i < secondMin) {\n                secondMin = i;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = Long.MAX_VALUE;\n    \
    \    for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                nextMin = min;\n             \
    \   min = curr;\n            } else if (curr < nextMin) {\n                nextMin\
    \ = curr;\n            }\n        }\n        if (nextMin == Long.MAX_VALUE) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n        Collections.sort(sorted);\n\
    \        long smallest = sorted.get(0);\n        long secondSmallest = sorted.get(1);\n\
    \        for (long i : lst) {\n            if (i == smallest) {\n            \
    \    continue;\n            }\n            if (i < secondSmallest) {\n       \
    \         secondSmallest = i;\n            }\n        }\n        return Optional.of(secondSmallest);\n",
  "        // TODO: Implement me\n        return Optional.empty();\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long smallest = lst.get(0);\n        long secondSmallest = Long.MAX_VALUE;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     if (secondSmallest == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondSmallest);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        if (smallest\
    \ > secondSmallest) {\n            smallest = secondSmallest;\n            secondSmallest\
    \ = lst.get(0);\n        }\n        for (int i = 2; i < lst.size(); i++) {\n \
    \           long current = lst.get(i);\n            if (current < smallest) {\n\
    \                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return Optional.of(secondSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   if (nextSmallest == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(nextSmallest);\n", "        // Your code\
    \ here\n        return Optional.empty();\n", "        if (lst.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        if (lst.size() == 1)\
    \ {\n            return Optional.empty();\n        }\n        if (lst.size() ==\
    \ 2) {\n            if (lst.get(0) == lst.get(1)) {\n                return Optional.empty();\n\
    \            }\n            return Optional.of(Math.min(lst.get(0), lst.get(1)));\n\
    \        }\n        ArrayList<Long> lst2 = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            lst2.add(lst.get(i));\n    \
    \    }\n        Collections.sort(lst2);\n        for (int i = 0; i < lst2.size()\
    \ - 1; i++) {\n            if (lst2.get(i) != lst2.get(i + 1)) {\n           \
    \     return Optional.of(lst2.get(i + 1));\n            }\n        }\n       \
    \ return Optional.empty();\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long min = lst.get(0);\n        long min2\
    \ = lst.get(1);\n        for (int i = 1; i < lst.size(); i++) {\n            long\
    \ cur = lst.get(i);\n            if (cur < min) {\n                min2 = min;\n\
    \                min = cur;\n            } else if (cur < min2) {\n          \
    \      min2 = cur;\n            }\n        }\n        if (min2 == min) {\n   \
    \         return Optional.empty();\n        }\n        return Optional.of(min2);\n",
  "        // TODO: Implement me\n        return Optional.empty();\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n    \
    \    for (long x : lst) {\n            if (x < min) {\n                secondMin\
    \ = min;\n                min = x;\n            } else if (x < secondMin) {\n\
    \                secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        if (min > secondMin) {\n      \
    \      long tmp = min;\n            min = secondMin;\n            secondMin =\
    \ tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n          \
    \  long cur = lst.get(i);\n            if (cur < min) {\n                secondMin\
    \ = min;\n                min = cur;\n            } else if (cur < secondMin)\
    \ {\n                secondMin = cur;\n            }\n        }\n        return\
    \ Optional.of(secondMin);\n", "        // Your code here.\n        return Optional.empty();\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin && i\
    \ != min) {\n                secondMin = i;\n            }\n        }\n      \
    \  if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long secondMin = lst.get(1);\n        if (min > secondMin)\
    \ {\n            long tmp = min;\n            min = secondMin;\n            secondMin\
    \ = tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n        \
    \    long current = lst.get(i);\n            if (current < min) {\n          \
    \      secondMin = min;\n                min = current;\n            } else if\
    \ (current < secondMin) {\n                secondMin = current;\n            }\n\
    \        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        Long min =\
    \ lst.get(0);\n        Long secondMin = null;\n        for (Long i : lst) {\n\
    \            if (i < min) {\n                secondMin = min;\n              \
    \  min = i;\n            } else if (i < secondMin || secondMin == null) {\n  \
    \              secondMin = i;\n            }\n        }\n        return Optional.ofNullable(secondMin);\n",
  "        if (lst.size() <= 1) {\n            return Optional.empty();\n        }\n\
    \        long min = Collections.min(lst);\n        lst.remove(min);\n        return\
    \ Optional.of(Collections.min(lst));\n", "        // TODO: implement me\n    \
    \    return Optional.empty();\n", "        if (lst.size() < 2) {\n           \
    \ return Optional.empty();\n        }\n        long smallest = lst.get(0);\n \
    \       long secondSmallest = Long.MAX_VALUE;\n        for (long i : lst) {\n\
    \            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long second = Long.MAX_VALUE;\n        for (long x : lst) {\n       \
    \     if (x < min) {\n                second = min;\n                min = x;\n\
    \            } else if (x < second && x != min) {\n                second = x;\n\
    \            }\n        }\n        if (second == Long.MAX_VALUE) {\n         \
    \   return Optional.empty();\n        }\n        return Optional.of(second);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = smallest;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = cur;\n            } else if (cur < nextSmallest) {\n\
    \                nextSmallest = cur;\n            }\n        }\n        if (nextSmallest\
    \ == smallest) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long min = lst.get(0);\n        long next\
    \ = lst.get(1);\n        for (int i = 1; i < lst.size(); i++) {\n            long\
    \ cur = lst.get(i);\n            if (cur < min) {\n                next = min;\n\
    \                min = cur;\n            } else if (cur < next) {\n          \
    \      next = cur;\n            }\n        }\n        return min == next ? Optional.empty()\
    \ : Optional.of(next);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long smallest = Long.MAX_VALUE;\n    \
    \    long secondSmallest = Long.MAX_VALUE;\n        for (long i : lst) {\n   \
    \         if (i < smallest) {\n                secondSmallest = smallest;\n  \
    \              smallest = i;\n            } else if (i < secondSmallest) {\n \
    \               secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondMin);\n", " \
    \       if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                secondMin = min;\n           \
    \     min = curr;\n            } else if (curr < secondMin) {\n              \
    \  secondMin = curr;\n            }\n        }\n        if (min == secondMin)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  for (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                secondMin = min;\n            \
    \    min = cur;\n            } else if (cur < secondMin) {\n                secondMin\
    \ = cur;\n            }\n        }\n        if (min == secondMin) {\n        \
    \    return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long val = lst.get(i);\n   \
    \         if (val < min) {\n                nextMin = min;\n                min\
    \ = val;\n            } else if (val < nextMin) {\n                nextMin = val;\n\
    \            }\n        }\n        return Optional.of(nextMin);\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long min = lst.get(0);\n        long nextMin = Long.MAX_VALUE;\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long n = lst.get(i);\n     \
    \       if (n < min) {\n                nextMin = min;\n                min =\
    \ n;\n            } else if (n < nextMin) {\n                nextMin = n;\n  \
    \          }\n        }\n        if (nextMin == Long.MAX_VALUE) {\n          \
    \  return Optional.empty();\n        }\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n   \
    \         return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long i : lst) {\n    \
    \        if (i < min) {\n                secondMin = min;\n                min\
    \ = i;\n            } else if (i < secondMin && i != min) {\n                secondMin\
    \ = i;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        if (lst.size() == 1) {\n            return Optional.empty();\n      \
    \  }\n        if (lst.size() == 2) {\n            if (lst.get(0) == lst.get(1))\
    \ {\n                return Optional.empty();\n            }\n            return\
    \ Optional.of(Math.min(lst.get(0), lst.get(1)));\n        }\n        ArrayList<Long>\
    \ lst2 = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            lst2.add(lst.get(i));\n        }\n        Collections.sort(lst2);\n\
    \        if (lst2.get(0) == lst2.get(1)) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(lst2.get(1));\n", "        // Your code\
    \ here.\n        return Optional.empty();\n", "        // Your code here\n   \
    \     return Optional.empty();\n", "        if (lst.size() < 2) {\n          \
    \  return Optional.empty();\n        }\n        long min = lst.get(0);\n     \
    \   long nextSmallest = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                nextSmallest = min;\n                min = curr;\n          \
    \  } else if (curr < nextSmallest) {\n                nextSmallest = curr;\n \
    \           }\n        }\n        if (nextSmallest == Long.MAX_VALUE) {\n    \
    \        return Optional.empty();\n        }\n        return Optional.of(nextSmallest);\n",
  "        // Your code here\n        return Optional.empty();\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        if (smallest\
    \ > secondSmallest) {\n            smallest = secondSmallest;\n            secondSmallest\
    \ = lst.get(0);\n        }\n        for (int i = 2; i < lst.size(); i++) {\n \
    \           long current = lst.get(i);\n            if (current < smallest) {\n\
    \                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return Optional.of(secondSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < smallest) {\n             \
    \   nextSmallest = smallest;\n                smallest = i;\n            } else\
    \ if (i < nextSmallest) {\n                nextSmallest = i;\n            }\n\
    \        }\n        if (nextSmallest == Long.MAX_VALUE) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(nextSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   return Optional.of(nextSmallest);\n", "        // TODO: Implement this function\n\
    \        return Optional.empty();\n", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        Long min = lst.get(0);\n  \
    \      Long nextMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            Long curr = lst.get(i);\n            if (curr < min) {\n    \
    \            nextMin = min;\n                min = curr;\n            } else if\
    \ (curr < nextMin) {\n                nextMin = curr;\n            }\n       \
    \ }\n        return Optional.of(nextMin);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long nextSmallest = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                nextSmallest = min;\n                min = curr;\n          \
    \  } else if (curr < nextSmallest) {\n                nextSmallest = curr;\n \
    \           }\n        }\n        if (nextSmallest == Long.MAX_VALUE) {\n    \
    \        return Optional.empty();\n        }\n        return Optional.of(nextSmallest);\n",
  "        // Your code here\n        return Optional.empty();\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        Long min =\
    \ lst.get(0);\n        Long second = null;\n        for (Long i : lst) {\n   \
    \         if (i < min) {\n                second = min;\n                min =\
    \ i;\n            } else if (second == null || i < second) {\n               \
    \ second = i;\n            }\n        }\n        return Optional.ofNullable(second);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long next = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n   \
    \         if (cur < min) {\n                next = min;\n                min =\
    \ cur;\n            } else if (cur < next) {\n                next = cur;\n  \
    \          }\n        }\n        return Optional.of(next);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = Long.MAX_VALUE;\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n        \
    \    if (cur < smallest) {\n                secondSmallest = smallest;\n     \
    \           smallest = cur;\n            } else if (cur < secondSmallest) {\n\
    \                secondSmallest = cur;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        if (min > secondMin) {\n      \
    \      Long tmp = min;\n            min = secondMin;\n            secondMin =\
    \ tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n          \
    \  Long curr = lst.get(i);\n            if (curr < min) {\n                secondMin\
    \ = min;\n                min = curr;\n            } else if (curr < secondMin)\
    \ {\n                secondMin = curr;\n            }\n        }\n        return\
    \ Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long smallest = Long.MAX_VALUE;\n    \
    \    long secondSmallest = Long.MAX_VALUE;\n        for (long n : lst) {\n   \
    \         if (n < smallest) {\n                secondSmallest = smallest;\n  \
    \              smallest = n;\n            } else if (n < secondSmallest) {\n \
    \               secondSmallest = n;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        if (smallest > secondSmallest)\
    \ {\n            smallest = secondSmallest;\n            secondSmallest = lst.get(0);\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long current\
    \ = lst.get(i);\n            if (current < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = current;\n            } else if (current\
    \ < secondSmallest) {\n                secondSmallest = current;\n           \
    \ }\n        }\n        return Optional.of(secondSmallest);\n", "        // Your\
    \ code here\n        return Optional.empty();\n", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        Long smallest =\
    \ lst.get(0);\n        Long secondSmallest = null;\n        for (Long i : lst)\
    \ {\n            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (secondSmallest == null\
    \ || i < secondSmallest) {\n                secondSmallest = i;\n            }\n\
    \        }\n        return Optional.ofNullable(secondSmallest);\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n  \
    \      for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst.get(i);\n\
    \            } else if (lst.get(i) < secondSmallest) {\n                secondSmallest\
    \ = lst.get(i);\n            }\n        }\n        if (smallest == secondSmallest)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = smallest;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   if (nextSmallest == smallest) {\n            return Optional.empty();\n  \
    \      }\n        return Optional.of(nextSmallest);\n", "        // Your code\
    \ here\n        return Optional.empty();\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = smallest;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long current = lst.get(i);\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        if (secondSmallest == smallest)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n",
  "        // Your code here\n        return Optional.empty();\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = Long.MAX_VALUE;\n        long secondSmallest = Long.MAX_VALUE;\n        for\
    \ (long n : lst) {\n            if (n < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = n;\n            } else if (n < secondSmallest)\
    \ {\n                secondSmallest = n;\n            }\n        }\n        if\
    \ (secondSmallest == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondSmallest);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long min2 = lst.get(1);\n        if (min2 < min) {\n  \
    \          long tmp = min;\n            min = min2;\n            min2 = tmp;\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long x\
    \ = lst.get(i);\n            if (x < min) {\n                min2 = min;\n   \
    \             min = x;\n            } else if (x < min2) {\n                min2\
    \ = x;\n            }\n        }\n        return Optional.of(min2);\n", "    \
    \    if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        if (lst.size() == 1) {\n            return Optional.empty();\n      \
    \  }\n        if (lst.size() == 2) {\n            if (lst.get(0) == lst.get(1))\
    \ {\n                return Optional.empty();\n            }\n            return\
    \ Optional.of(Math.min(lst.get(0), lst.get(1)));\n        }\n        ArrayList<Long>\
    \ sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        for\
    \ (int i = 1; i < sorted.size(); i++) {\n            if (sorted.get(i) != sorted.get(i\
    \ - 1)) {\n                return Optional.of(sorted.get(i));\n            }\n\
    \        }\n        return Optional.empty();\n", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long x : lst) {\n    \
    \        if (x < min) {\n                secondMin = min;\n                min\
    \ = x;\n            } else if (x < secondMin) {\n                secondMin = x;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = Long.MAX_VALUE;\n    \
    \    for (int i = 1; i < lst.size(); i++) {\n            long val = lst.get(i);\n\
    \            if (val < min) {\n                nextMin = min;\n              \
    \  min = val;\n            } else if (val < nextMin) {\n                nextMin\
    \ = val;\n            }\n        }\n        if (nextMin == Long.MAX_VALUE) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin && i\
    \ != min) {\n                secondMin = i;\n            }\n        }\n      \
    \  if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        // Your code here\n\
    \        return null;\n", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = curr;\n            } else if (curr < nextSmallest)\
    \ {\n                nextSmallest = curr;\n            }\n        }\n        if\
    \ (nextSmallest == Long.MAX_VALUE) {\n            return Optional.empty();\n \
    \       }\n        return Optional.of(nextSmallest);\n", "        // Your code\
    \ here\n        return Optional.empty();\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = Collections.min(lst);\n\
    \        long secondMin = Collections.max(lst);\n        for (long i : lst) {\n\
    \            if (i < secondMin && i > min) {\n                secondMin = i;\n\
    \            }\n        }\n        if (secondMin == Collections.max(lst)) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n\
    \        for (int i = 1; i < sorted.size(); i++) {\n            if (sorted.get(i)\
    \ != sorted.get(i - 1)) {\n                return Optional.of(sorted.get(i));\n\
    \            }\n        }\n        return Optional.empty();\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n        for (int i =\
    \ 1; i < lst.size(); i++) {\n            long num = lst.get(i);\n            if\
    \ (num < min) {\n                secondMin = min;\n                min = num;\n\
    \            } else if (num < secondMin) {\n                secondMin = num;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = smallest;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < smallest) {\n                nextSmallest = smallest;\n \
    \               smallest = x;\n            } else if (x < nextSmallest) {\n  \
    \              nextSmallest = x;\n            }\n        }\n        if (nextSmallest\
    \ == smallest) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(nextSmallest);\n", "        // TODO: Implement me!\n        return\
    \ Optional.empty();\n", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        Long min = lst.get(0);\n        Long secondMin = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            Long x = lst.get(i);\n\
    \            if (x < min) {\n                secondMin = min;\n              \
    \  min = x;\n            } else if (x < secondMin) {\n                secondMin\
    \ = x;\n            }\n        }\n        if (min == secondMin) {\n          \
    \  return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = lst.get(1);\n\
    \        if (smallest > nextSmallest) {\n            smallest = nextSmallest;\n\
    \            nextSmallest = lst.get(0);\n        }\n        for (int i = 2; i\
    \ < lst.size(); i++) {\n            long val = lst.get(i);\n            if (val\
    \ < smallest) {\n                nextSmallest = smallest;\n                smallest\
    \ = val;\n            } else if (val < nextSmallest) {\n                nextSmallest\
    \ = val;\n            }\n        }\n        return Optional.of(nextSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) < secondSmallest) {\n     \
    \           secondSmallest = lst.get(i);\n            }\n        }\n        if\
    \ (smallest == secondSmallest) {\n            return Optional.empty();\n     \
    \   }\n        return Optional.of(secondSmallest);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n        for (long i :\
    \ lst) {\n            if (i < min) {\n                secondMin = min;\n     \
    \           min = i;\n            } else if (i < secondMin && i != min) {\n  \
    \              secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = null;\n        for (Long i : lst) {\n            if\
    \ (i < min) {\n                secondMin = min;\n                min = i;\n  \
    \          } else if (i < secondMin || secondMin == null) {\n                secondMin\
    \ = i;\n            }\n        }\n        return Optional.ofNullable(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long next = Long.MAX_VALUE;\n       \
    \ for (int i = 1; i < lst.size(); i++) {\n            long n = lst.get(i);\n \
    \           if (n < min) {\n                next = min;\n                min =\
    \ n;\n            } else if (n < next) {\n                next = n;\n        \
    \    }\n        }\n        return next == Long.MAX_VALUE ? Optional.empty() :\
    \ Optional.of(next);\n", "        // Your code here\n        return Optional.empty();\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long min2 = lst.get(1);\n        if (min2\
    \ < min) {\n            long tmp = min;\n            min = min2;\n           \
    \ min2 = tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n   \
    \         long x = lst.get(i);\n            if (x < min) {\n                min2\
    \ = min;\n                min = x;\n            } else if (x < min2) {\n     \
    \           min2 = x;\n            }\n        }\n        return Optional.of(min2);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin && i\
    \ != min) {\n                secondMin = i;\n            }\n        }\n      \
    \  if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        // Your code here\n\
    \        return Optional.empty();\n", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        long min = lst.get(0);\n  \
    \      long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long x = lst.get(i);\n            if (x < min) {\n          \
    \      secondMin = min;\n                min = x;\n            } else if (x <\
    \ secondMin) {\n                secondMin = x;\n            }\n        }\n   \
    \     if (min == secondMin) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n \
    \           return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = null;\n        for (Long i : lst) {\n            if\
    \ (i < min) {\n                secondMin = min;\n                min = i;\n  \
    \          } else if (i > min && (secondMin == null || i < secondMin)) {\n   \
    \             secondMin = i;\n            }\n        }\n        return Optional.ofNullable(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n  \
    \          if (curr < min) {\n                nextMin = min;\n               \
    \ min = curr;\n            } else if (curr < nextMin) {\n                nextMin\
    \ = curr;\n            }\n        }\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin && i\
    \ != min) {\n                secondMin = i;\n            }\n        }\n      \
    \  if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long next = Long.MAX_VALUE;\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long cur = lst.get(i);\n            if (cur\
    \ < min) {\n                next = min;\n                min = cur;\n        \
    \    } else if (cur < next) {\n                next = cur;\n            }\n  \
    \      }\n        return next == Long.MAX_VALUE ? Optional.empty() : Optional.of(next);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        ArrayList<Long> lst2 = new ArrayList<>(lst);\n        Collections.sort(lst2);\n\
    \        Long min = lst2.get(0);\n        Long min2 = null;\n        for (Long\
    \ x : lst2) {\n            if (x != min) {\n                min2 = x;\n      \
    \          break;\n            }\n        }\n        return Optional.ofNullable(min2);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n   \
    \         if (cur < min) {\n                nextMin = min;\n                min\
    \ = cur;\n            } else if (cur < nextMin) {\n                nextMin = cur;\n\
    \            }\n        }\n        return Optional.of(nextMin);\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n  \
    \      if (smallest > secondSmallest) {\n            smallest = secondSmallest;\n\
    \            secondSmallest = lst.get(0);\n        }\n        for (int i = 2;\
    \ i < lst.size(); i++) {\n            long current = lst.get(i);\n           \
    \ if (current < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = Long.MAX_VALUE;\n        for (long i : lst) {\n\
    \            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = Long.MAX_VALUE;\n        for (long l : lst) {\n\
    \            if (l < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = l;\n            } else if (l < secondSmallest) {\n\
    \                secondSmallest = l;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               secondMin = min;\n                min = cur;\n            } else\
    \ if (cur < secondMin) {\n                secondMin = cur;\n            }\n  \
    \      }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n        for (int i\
    \ = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n         \
    \   if (curr < min) {\n                nextSmallest = min;\n                min\
    \ = curr;\n            } else if (curr < nextSmallest) {\n                nextSmallest\
    \ = curr;\n            }\n        }\n        if (nextSmallest == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(nextSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  for (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                secondMin = min;\n            \
    \    min = cur;\n            } else if (cur < secondMin) {\n                secondMin\
    \ = cur;\n            }\n        }\n        if (min == secondMin) {\n        \
    \    return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin && i\
    \ != min) {\n                secondMin = i;\n            }\n        }\n      \
    \  if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long nextMin = lst.get(1);\n        for (int i = 1; i <\
    \ lst.size(); i++) {\n            long cur = lst.get(i);\n            if (cur\
    \ < min) {\n                nextMin = min;\n                min = cur;\n     \
    \       } else if (cur < nextMin) {\n                nextMin = cur;\n        \
    \    }\n        }\n        return Optional.of(nextMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long nextSmallest = lst.get(1);\n        for (int i =\
    \ 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n            if\
    \ (cur < smallest) {\n                nextSmallest = smallest;\n             \
    \   smallest = cur;\n            } else if (cur < nextSmallest) {\n          \
    \      nextSmallest = cur;\n            }\n        }\n        return Optional.of(nextSmallest);\n",
  "        // Your code here\n        return null;\n", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long x = lst.get(i);\n            if (x < min) {\n          \
    \      min2 = min;\n                min = x;\n            } else if (x < min2)\
    \ {\n                min2 = x;\n            }\n        }\n        if (min2 ==\
    \ min) {\n            return Optional.empty();\n        }\n        return Optional.of(min2);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < smallest) {\n             \
    \   secondSmallest = smallest;\n                smallest = i;\n            } else\
    \ if (i < secondSmallest && i != smallest) {\n                secondSmallest =\
    \ i;\n            }\n        }\n        if (secondSmallest == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long x : lst) {\n            if (x < min) {\n                secondMin\
    \ = min;\n                min = x;\n            } else if (x < secondMin) {\n\
    \                secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) return Optional.empty();\n\
    \        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n\
    \        return Optional.of(sorted.get(1));\n", "        if (lst.size() < 2) return\
    \ Optional.empty();\n        long min = lst.get(0);\n        long nextMin = Long.MAX_VALUE;\n\
    \        for (long x : lst) {\n            if (x < min) {\n                nextMin\
    \ = min;\n                min = x;\n            } else if (x < nextMin) {\n  \
    \              nextMin = x;\n            }\n        }\n        if (nextMin ==\
    \ Long.MAX_VALUE) return Optional.empty();\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        if (smallest > secondSmallest) {\n            smallest = secondSmallest;\n\
    \            secondSmallest = lst.get(0);\n        }\n        for (int i = 2;\
    \ i < lst.size(); i++) {\n            long curr = lst.get(i);\n            if\
    \ (curr < smallest) {\n                secondSmallest = smallest;\n          \
    \      smallest = curr;\n            } else if (curr < secondSmallest) {\n   \
    \             secondSmallest = curr;\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n          \
    \  return Optional.empty();\n        }\n        long min = lst.get(0);\n     \
    \   long secondMin = lst.get(1);\n        if (min > secondMin) {\n           \
    \ long tmp = min;\n            min = secondMin;\n            secondMin = tmp;\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long cur\
    \ = lst.get(i);\n            if (cur < min) {\n                secondMin = min;\n\
    \                min = cur;\n            } else if (cur < secondMin) {\n     \
    \           secondMin = cur;\n            }\n        }\n        return Optional.of(secondMin);\n",
  "        // TODO: Implement me!\n        return Optional.empty();\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long smallest = lst.get(0);\n        long secondSmallest = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < smallest) {\n             \
    \   secondSmallest = smallest;\n                smallest = i;\n            } else\
    \ if (i < secondSmallest) {\n                secondSmallest = i;\n           \
    \ }\n        }\n        if (secondSmallest == Long.MAX_VALUE) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n\
    \        for (int i = 1; i < sorted.size(); i++) {\n            if (sorted.get(i)\
    \ != sorted.get(i - 1)) {\n                return Optional.of(sorted.get(i));\n\
    \            }\n        }\n        return Optional.empty();\n", "        // Your\
    \ code here\n        return Optional.empty();\n", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long min2 = null;\n        for (Long i : lst) {\n            if (i <\
    \ min) {\n                min2 = min;\n                min = i;\n            }\
    \ else if (min2 == null || i < min2) {\n                min2 = i;\n          \
    \  }\n        }\n        return Optional.of(min2);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < smallest) {\n                nextSmallest = smallest;\n     \
    \           smallest = curr;\n            } else if (curr < nextSmallest) {\n\
    \                nextSmallest = curr;\n            }\n        }\n        if (nextSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n  \
    \          return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = smallest;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long current = lst.get(i);\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        if (secondSmallest == smallest)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long nextMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long curr = lst.get(i);\n            if (curr < min) {\n    \
    \            nextMin = min;\n                min = curr;\n            } else if\
    \ (curr < nextMin) {\n                nextMin = curr;\n            }\n       \
    \ }\n        return Optional.of(nextMin);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long nextSmallest = Long.MAX_VALUE;\n        for (long i : lst) {\n \
    \           if (i < smallest) {\n                nextSmallest = smallest;\n  \
    \              smallest = i;\n            } else if (i < nextSmallest) {\n   \
    \             nextSmallest = i;\n            }\n        }\n        if (nextSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n  \
    \          return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = Long.MAX_VALUE;\n        for (long i : lst) {\n\
    \            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        // Your code here\n    \
    \    return null;\n", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long secondMin = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < min) {\n                secondMin = min;\n        \
    \        min = current;\n            } else if (current < secondMin) {\n     \
    \           secondMin = current;\n            }\n        }\n        if (min ==\
    \ secondMin) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(secondMin);\n", "        // TODO: implement this function\n    \
    \    return Optional.empty();\n", "        if (lst.size() < 2) {\n           \
    \ return Optional.empty();\n        }\n        long min = lst.get(0);\n      \
    \  long nextSmallest = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long x = lst.get(i);\n            if (x < min) {\n     \
    \           nextSmallest = min;\n                min = x;\n            } else\
    \ if (x < nextSmallest) {\n                nextSmallest = x;\n            }\n\
    \        }\n        if (nextSmallest == Long.MAX_VALUE) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(nextSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n\
    \        long smallest = sorted.get(0);\n        for (int i = 1; i < sorted.size();\
    \ i++) {\n            if (sorted.get(i) != smallest) {\n                return\
    \ Optional.of(sorted.get(i));\n            }\n        }\n        return Optional.empty();\n",
  "        // Your code here\n        return Optional.empty();\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n\
    \        long prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long curr = lst.get(i);\n            if (curr != prev) {\n  \
    \              return Optional.of(curr);\n            }\n            prev = curr;\n\
    \        }\n        return Optional.empty();\n", "        // Your code here\n\
    \        return Optional.empty();\n", "        // Your code here\n        return\
    \ Optional.empty();\n", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long nextSmallest = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n   \
    \         return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        return Optional.of(secondMin);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n        for (long\
    \ l : lst) {\n            if (l < min) {\n                secondMin = min;\n \
    \               min = l;\n            } else if (l < secondMin) {\n          \
    \      secondMin = l;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                secondMin = min;\n           \
    \     min = curr;\n            } else if (curr < secondMin) {\n              \
    \  secondMin = curr;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n  \
    \          if (curr < min) {\n                nextMin = min;\n               \
    \ min = curr;\n            } else if (curr < nextMin) {\n                nextMin\
    \ = curr;\n            }\n        }\n        return Optional.of(nextMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long next = Long.MAX_VALUE;\n       \
    \ for (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                next = min;\n                min\
    \ = cur;\n            } else if (cur < next) {\n                next = cur;\n\
    \            }\n        }\n        if (next == Long.MAX_VALUE) {\n           \
    \ return Optional.empty();\n        }\n        return Optional.of(next);\n", " \
    \       if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < nextSmallest)\
    \ {\n                nextSmallest = current;\n            }\n        }\n     \
    \   return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n   \
    \         return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long nextSmallest = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < smallest)\
    \ {\n                nextSmallest = smallest;\n                smallest = curr;\n\
    \            } else if (curr < nextSmallest) {\n                nextSmallest =\
    \ curr;\n            }\n        }\n        return Optional.of(nextSmallest);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        if (smallest > secondSmallest) {\n            smallest = secondSmallest;\n\
    \            secondSmallest = lst.get(0);\n        }\n        for (int i = 2;\
    \ i < lst.size(); i++) {\n            long current = lst.get(i);\n           \
    \ if (current < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = Long.MAX_VALUE;\n\
    \        long secondSmallest = Long.MAX_VALUE;\n        for (long x : lst) {\n\
    \            if (x < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = x;\n            } else if (x < secondSmallest) {\n\
    \                secondSmallest = x;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) return\
    \ Optional.empty();\n        long min = lst.get(0);\n        long next = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                next\
    \ = min;\n                min = i;\n            } else if (i < next) {\n     \
    \           next = i;\n            }\n        }\n        return next == Long.MAX_VALUE\
    \ ? Optional.empty() : Optional.of(next);\n", "        if (lst.size() < 2) return\
    \ Optional.empty();\n        ArrayList<Long> sorted = new ArrayList<>(lst);\n\
    \        Collections.sort(sorted);\n        for (int i = 1; i < sorted.size();\
    \ i++) {\n            if (sorted.get(i) != sorted.get(i - 1)) {\n            \
    \    return Optional.of(sorted.get(i));\n            }\n        }\n        return\
    \ Optional.empty();\n", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long min2 = lst.get(1);\n\
    \        if (min2 < min) {\n            long tmp = min;\n            min = min2;\n\
    \            min2 = tmp;\n        }\n        for (int i = 2; i < lst.size(); i++)\
    \ {\n            long cur = lst.get(i);\n            if (cur < min) {\n      \
    \          min2 = min;\n                min = cur;\n            } else if (cur\
    \ < min2) {\n                min2 = cur;\n            }\n        }\n        return\
    \ Optional.of(min2);\n", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long x : lst) {\n            if (x < min) {\n                secondMin\
    \ = min;\n                min = x;\n            } else if (x < secondMin) {\n\
    \                secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long min2 = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            Long x = lst.get(i);\n            if (x < min) {\n          \
    \      min2 = min;\n                min = x;\n            } else if (x < min2)\
    \ {\n                min2 = x;\n            }\n        }\n        if (min2 ==\
    \ min) {\n            return Optional.empty();\n        }\n        return Optional.of(min2);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                nextSmallest = min;\n        \
    \        min = curr;\n            } else if (curr < nextSmallest) {\n        \
    \        nextSmallest = curr;\n            }\n        }\n        if (nextSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n  \
    \          return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = Long.MAX_VALUE;\n        for (long i : lst) {\n\
    \            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long nextSmallest = smallest;\n        for (long l : lst) {\n       \
    \     if (l < smallest) {\n                nextSmallest = smallest;\n        \
    \        smallest = l;\n            } else if (l < nextSmallest) {\n         \
    \       nextSmallest = l;\n            }\n        }\n        if (nextSmallest\
    \ == smallest) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ secondMin = Long.MAX_VALUE;\n        for (long x : lst) {\n            if (x\
    \ < min) {\n                secondMin = min;\n                min = x;\n     \
    \       } else if (x < secondMin) {\n                secondMin = x;\n        \
    \    }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondMin);\n", " \
    \       if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long min2 = lst.get(1);\n        if (min2\
    \ < min) {\n            long tmp = min;\n            min = min2;\n           \
    \ min2 = tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n   \
    \         long x = lst.get(i);\n            if (x < min) {\n                min2\
    \ = min;\n                min = x;\n            } else if (x < min2) {\n     \
    \           min2 = x;\n            }\n        }\n        return Optional.of(min2);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = lst.get(1);\n        if\
    \ (min > nextMin) {\n            long tmp = min;\n            min = nextMin;\n\
    \            nextMin = tmp;\n        }\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               nextMin = min;\n                min = cur;\n            } else\
    \ if (cur < nextMin) {\n                nextMin = cur;\n            }\n      \
    \  }\n        return Optional.of(nextMin);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        if (min > secondMin) {\n      \
    \      long tmp = min;\n            min = secondMin;\n            secondMin =\
    \ tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n          \
    \  long cur = lst.get(i);\n            if (cur < min) {\n                secondMin\
    \ = min;\n                min = cur;\n            } else if (cur < secondMin)\
    \ {\n                secondMin = cur;\n            }\n        }\n        return\
    \ Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long min = lst.get(0);\n        long next\
    \ = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size(); i++) {\n        \
    \    long cur = lst.get(i);\n            if (cur < min) {\n                next\
    \ = min;\n                min = cur;\n            } else if (cur < next) {\n \
    \               next = cur;\n            }\n        }\n        return next ==\
    \ Long.MAX_VALUE ? Optional.empty() : Optional.of(next);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        Long min =\
    \ lst.get(0);\n        Long secondMin = null;\n        for (Long i : lst) {\n\
    \            if (i < min) {\n                secondMin = min;\n              \
    \  min = i;\n            } else if (i < secondMin || secondMin == null) {\n  \
    \              secondMin = i;\n            }\n        }\n        return Optional.ofNullable(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = curr;\n            } else if (curr < nextSmallest)\
    \ {\n                nextSmallest = curr;\n            }\n        }\n        return\
    \ Optional.of(nextSmallest);\n", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            long curr = lst.get(i);\n            if (curr < smallest) {\n   \
    \             secondSmallest = smallest;\n                smallest = curr;\n \
    \           } else if (curr < secondSmallest) {\n                secondSmallest\
    \ = curr;\n            }\n        }\n        if (smallest == secondSmallest) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n",
  "        // TODO: Implement me\n        return Optional.empty();\n", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < min) {\n                secondMin = min;\n        \
    \        min = current;\n            } else if (current < secondMin) {\n     \
    \           secondMin = current;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        if (min > secondMin) {\n      \
    \      Long temp = min;\n            min = secondMin;\n            secondMin =\
    \ temp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n         \
    \   Long curr = lst.get(i);\n            if (curr < min) {\n                secondMin\
    \ = min;\n                min = curr;\n            } else if (curr < secondMin)\
    \ {\n                secondMin = curr;\n            }\n        }\n        return\
    \ Optional.of(secondMin);\n", "        if (lst.size() < 2) return Optional.empty();\n\
    \        long min = lst.get(0);\n        long next = Long.MAX_VALUE;\n       \
    \ for (long i : lst) {\n            if (i < min) {\n                next = min;\n\
    \                min = i;\n            } else if (i < next && i != min) {\n  \
    \              next = i;\n            }\n        }\n        return next == Long.MAX_VALUE\
    \ ? Optional.empty() : Optional.of(next);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            Long current = lst.get(i);\n            if (current < min)\
    \ {\n                secondMin = min;\n                min = current;\n      \
    \      } else if (current < secondMin) {\n                secondMin = current;\n\
    \            }\n        }\n        return Optional.of(secondMin);\n", "      \
    \  if (lst.size() < 2) {\n            return Optional.empty();\n        }\n  \
    \      long min = lst.get(0);\n        long secondMin = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n   \
    \         if (cur < min) {\n                secondMin = min;\n               \
    \ min = cur;\n            } else if (cur < secondMin) {\n                secondMin\
    \ = cur;\n            }\n        }\n        if (min == secondMin) {\n        \
    \    return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        // Your code here\n        return Optional.empty();\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n        for (int i =\
    \ 1; i < lst.size(); i++) {\n            long n = lst.get(i);\n            if\
    \ (n < min) {\n                secondMin = min;\n                min = n;\n  \
    \          } else if (n < secondMin) {\n                secondMin = n;\n     \
    \       }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n           \
    \ return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (int i = 1; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                secondMin = min;\n              \
    \  min = x;\n            } else if (x < secondMin) {\n                secondMin\
    \ = x;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min = Collections.min(lst);\n        lst.remove(min);\n        return\
    \ Optional.of(Collections.min(lst));\n", "        // Your code here\n        return\
    \ Optional.empty();\n", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = Collections.min(lst);\n        lst.remove(min);\n\
    \        return Optional.of(Collections.min(lst));\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long nextMin = Long.MAX_VALUE;\n        for (int i = 1;\
    \ i < lst.size(); i++) {\n            long n = lst.get(i);\n            if (n\
    \ < min) {\n                nextMin = min;\n                min = n;\n       \
    \     } else if (n < nextMin) {\n                nextMin = n;\n            }\n\
    \        }\n        if (nextMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(nextMin);\n", "        // Your code here\n\
    \        return Optional.empty();\n", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        if (smallest > secondSmallest)\
    \ {\n            smallest = secondSmallest;\n            secondSmallest = lst.get(0);\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long current\
    \ = lst.get(i);\n            if (current < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = current;\n            } else if (current\
    \ < secondSmallest) {\n                secondSmallest = current;\n           \
    \ }\n        }\n        return Optional.of(secondSmallest);\n", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long nextMin = lst.get(1);\n        for (int i = 1; i <\
    \ lst.size(); i++) {\n            long x = lst.get(i);\n            if (x < min)\
    \ {\n                nextMin = min;\n                min = x;\n            } else\
    \ if (x < nextMin) {\n                nextMin = x;\n            }\n        }\n\
    \        return Optional.of(nextMin);\n", "        if (lst.size() < 2) {\n   \
    \         return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long nextMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long curr = lst.get(i);\n            if (curr < min) {\n    \
    \            nextMin = min;\n                min = curr;\n            } else if\
    \ (curr < nextMin) {\n                nextMin = curr;\n            }\n       \
    \ }\n        return Optional.of(nextMin);\n", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long x = lst.get(i);\n            if (x < min) {\n     \
    \           min2 = min;\n                min = x;\n            } else if (x <\
    \ min2) {\n                min2 = x;\n            }\n        }\n        if (min2\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(min2);\n", "        if (lst.size() < 2) {\n          \
    \  return Optional.empty();\n        }\n        long min = lst.get(0);\n     \
    \   long secondMin = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long elem = lst.get(i);\n            if (elem < min) {\n\
    \                secondMin = min;\n                min = elem;\n            }\
    \ else if (elem < secondMin) {\n                secondMin = elem;\n          \
    \  }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondMin);\n", " \
    \       if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);\n", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = smallest;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long current = lst.get(i);\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        if (secondSmallest == smallest)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
