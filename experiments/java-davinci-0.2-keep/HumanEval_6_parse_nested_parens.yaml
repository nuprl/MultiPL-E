name: HumanEval_6_parse_nested_parens
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
  \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long>\
  \ parseNestedParens(String paren_string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((()))\
  \ (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
  \ (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        String[]\
    \ paren_groups = paren_string.split(\" \");\n        for (String paren_group :\
    \ paren_groups) {\n            int max_depth = 0;\n            int depth = 0;\n\
    \            for (int i = 0; i < paren_group.length(); i++) {\n              \
    \  if (paren_group.charAt(i) == '(') {\n                    depth++;\n       \
    \             max_depth = Math.max(max_depth, depth);\n                } else\
    \ if (paren_group.charAt(i) == ')') {\n                    depth--;\n        \
    \        }\n            }\n            result.add((long) max_depth);\n       \
    \ }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max = 0;\n   \
    \         long count = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    count++;\n\
    \                    max = Math.max(max, count);\n                } else {\n \
    \                   count--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max = 0;\n   \
    \         long count = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    count++;\n\
    \                    max = Math.max(max, count);\n                } else {\n \
    \                   count--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth++;\n                    max_depth = Math.max(max_depth, depth);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else {\n                    depth--;\n                }\n            }\n \
    \           result.add(max_depth);\n        }\n        return result;\n", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here.\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        // Write your code here.\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (int i = 0; i < paren_group.length(); i++) {\n                if\
    \ (paren_group.charAt(i) == '(') {\n                    current_depth++;\n   \
    \                 max_depth = Math.max(max_depth, current_depth);\n          \
    \      } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        // >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n        // [2, 3, 1, 3]\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        ArrayList<String> groups = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \ \")));\n        for (String group : groups) {\n            long max_depth =\
    \ 0;\n            long current_depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    current_depth++;\n\
    \                    if (current_depth > max_depth) {\n                      \
    \  max_depth = current_depth;\n                    }\n                } else if\
    \ (group.charAt(i) == ')') {\n                    current_depth--;\n         \
    \       }\n            }\n            result.add(max_depth);\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_depth = 0;\n            long current_depth = 0;\n            for (int i\
    \ = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    current_depth++;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (paren_group.charAt(i)\
    \ == ')') {\n                    current_depth--;\n                }\n       \
    \     }\n            result.add(max_depth);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            int max_depth = 0;\n            int depth = 0;\n            for\
    \ (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add((long)\
    \ max_depth);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (char c : paren.toCharArray()) {\n\
    \                if (c == '(') {\n                    depth++;\n             \
    \       max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        int max = 0;\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string.charAt(i) == ')') {\n      \
    \          count--;\n            } else if (paren_string.charAt(i) == ' ') {\n\
    \                result.add((long) max);\n                max = 0;\n         \
    \       count = 0;\n            }\n        }\n        result.add((long) max);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_nesting =\
    \ 0;\n            long nesting = 0;\n            for (char c : group.toCharArray())\
    \ {\n                if (c == '(') {\n                    nesting++;\n       \
    \             max_nesting = Math.max(max_nesting, nesting);\n                }\
    \ else if (c == ')') {\n                    nesting--;\n                }\n  \
    \          }\n            result.add(max_nesting);\n        }\n        return\
    \ result;\n", "        // Write your code here\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] parens = paren_string.split(\" \"\
    );\n        for (String paren : parens) {\n            long max = 0;\n       \
    \     long count = 0;\n            for (int i = 0; i < paren.length(); i++) {\n\
    \                if (paren.charAt(i) == '(') {\n                    count++;\n\
    \                    max = Math.max(max, count);\n                } else {\n \
    \                   count--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(max);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else {\n                    depth--;\n                }\n            }\n \
    \           result.add(max_depth);\n        }\n        return result;\n", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (paren_group.charAt(i)\
    \ == ')') {\n                    depth -= 1;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            long max_depth = 0;\n            long current_depth = 0;\n\
    \            for (int i = 0; i < paren_group.length(); i++) {\n              \
    \  if (paren_group.charAt(i) == '(') {\n                    current_depth++;\n\
    \                    max_depth = Math.max(max_depth, current_depth);\n       \
    \         } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here.\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] groups = paren_string.split(\" \");\n        for (String group :\
    \ groups) {\n            long max_depth = 0;\n            long depth = 0;\n  \
    \          for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else {\n                    depth--;\n                }\n            }\n \
    \           result.add(max_depth);\n        }\n        return result;\n", "  \
    \      // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(max);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] paren_groups = paren_string.split(\" \");\n        for (String paren_group\
    \ : paren_groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < paren_group.length(); i++) {\n       \
    \         if (paren_group.charAt(i) == '(') {\n                    current_depth++;\n\
    \                    max_depth = Math.max(max_depth, current_depth);\n       \
    \         } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int max_depth = 0;\n        int depth = 0;\n        for (int i = 0; i\
    \ < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.add((long)\
    \ max_depth);\n                max_depth = 0;\n                depth = 0;\n  \
    \          }\n        }\n        result.add((long) max_depth);\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] paren_groups = paren_string.split(\" \");\n        for (String paren_group\
    \ : paren_groups) {\n            long max_depth = 0;\n            long depth =\
    \ 0;\n            for (int i = 0; i < paren_group.length(); i++) {\n         \
    \       if (paren_group.charAt(i) == '(') {\n                    depth++;\n  \
    \                  max_depth = Math.max(max_depth, depth);\n                }\
    \ else if (paren_group.charAt(i) == ')') {\n                    depth--;\n   \
    \             }\n            }\n            result.add(max_depth);\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_depth = 0;\n            long depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           max_depth = Math.max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                stack.add((long) 1);\n                max = Math.max(max,\
    \ (long) stack.size());\n            } else if (paren_string.charAt(i) == ')')\
    \ {\n                stack.remove(stack.size() - 1);\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(max);\n                max = 0;\n    \
    \        }\n        }\n        result.add(max);\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (char c : paren_group.toCharArray()) {\n                if (c ==\
    \ '(') {\n                    current_depth += 1;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (c == ')')\
    \ {\n                    current_depth -= 1;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            int max_depth = 0;\n            int current_depth =\
    \ 0;\n            for (int i = 0; i < group.length(); i++) {\n               \
    \ if (group.charAt(i) == '(') {\n                    current_depth++;\n      \
    \              max_depth = Math.max(max_depth, current_depth);\n             \
    \   } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add((long)max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else {\n                    depth--;\n          \
    \      }\n            }\n            result.add(max_depth);\n        }\n     \
    \   return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int max_depth = 0;\n        int current_depth = 0;\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                current_depth += 1;\n                max_depth =\
    \ Math.max(max_depth, current_depth);\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                current_depth -= 1;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add((long) max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.add((long) max_depth);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (group.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] paren_groups = paren_string.split(\" \");\n        for (String paren_group\
    \ : paren_groups) {\n            long max_depth = 0;\n            long depth =\
    \ 0;\n            for (char c : paren_group.toCharArray()) {\n               \
    \ if (c == '(') {\n                    depth += 1;\n                    max_depth\
    \ = Math.max(max_depth, depth);\n                } else if (c == ')') {\n    \
    \                depth -= 1;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                char c = paren_group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth++;\n                    max_depth = Math.max(max_depth, depth);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_nesting += 1;\n\
    \                    max_nesting = Math.max(max_nesting, current_nesting);\n \
    \               } else if (c == ')') {\n                    current_nesting -=\
    \ 1;\n                }\n            }\n            result.add(max_nesting);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_depth = 0;\n            long depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           max_depth = Math.max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ group : paren_groups) {\n            long max_depth = 0;\n            long depth\
    \ = 0;\n            for (char c : group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> ans = new ArrayList<>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_depth = 0;\n            long cur_depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    cur_depth++;\n     \
    \               max_depth = Math.max(max_depth, cur_depth);\n                }\
    \ else if (c == ')') {\n                    cur_depth--;\n                }\n\
    \            }\n            ans.add(max_depth);\n        }\n        return ans;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        long max = 0;\n\
    \        long count = 0;\n        for(int i = 0; i < paren_string.length(); i++)\
    \ {\n            if(paren_string.charAt(i) == '(') {\n                count++;\n\
    \                if(count > max) {\n                    max = count;\n       \
    \         }\n            }\n            else if(paren_string.charAt(i) == ')')\
    \ {\n                count--;\n            }\n            else if(paren_string.charAt(i)\
    \ == ' ') {\n                temp.add(max);\n                max = 0;\n      \
    \          count = 0;\n            }\n        }\n        temp.add(max);\n    \
    \    return temp;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(max);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_level = 0;\n\
    \            long level = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    level++;\n\
    \                    max_level = Math.max(max_level, level);\n               \
    \ } else {\n                    level--;\n                }\n            }\n \
    \           result.add(max_level);\n        }\n        return result;\n", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (int i = 0; i < paren_group.length(); i++) {\n                if\
    \ (paren_group.charAt(i) == '(') {\n                    current_depth++;\n   \
    \                 max_depth = Math.max(max_depth, current_depth);\n          \
    \      } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here.\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] parens = paren_string.split(\" \");\n        for (String paren :\
    \ parens) {\n            long max = 0;\n            long count = 0;\n        \
    \    for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(max);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] groups = paren_string.split(\" \");\n        for (String group :\
    \ groups) {\n            long max_depth = 0;\n            long depth = 0;\n  \
    \          for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // TODO: Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            long max_depth\
    \ = 0;\n            long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (char c : group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    current_depth++;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (c == ')')\
    \ {\n                    current_depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        String[] parens = paren_string.split(\" \");\n     \
    \   for (String paren : parens) {\n            long max = 0;\n            long\
    \ curr = 0;\n            for (int i = 0; i < paren.length(); i++) {\n        \
    \        if (paren.charAt(i) == '(') {\n                    curr++;\n        \
    \            max = Math.max(max, curr);\n                } else {\n          \
    \          curr--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                char c = paren_group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack = new ArrayList<Long>();\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
    \                max_depth = Math.max(max_depth, depth);\n            } else if\
    \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
    \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.add(max_depth);\n        return result;\n", "      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        // Write your code\
    \ here\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (char c : group.toCharArray()) {\n\
    \                if (c == '(') {\n                    depth++;\n             \
    \       max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (String paren_group\
    \ : paren_string.split(\" \")) {\n            long max_depth = 0;\n          \
    \  long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth++;\n                    max_depth = Math.max(max_depth, depth);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max = 0;\n   \
    \         long curr = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    curr++;\n\
    \                    max = Math.max(max, curr);\n                } else {\n  \
    \                  curr--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else {\n                    depth--;\n          \
    \      }\n            }\n            result.add(max_depth);\n        }\n     \
    \   return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack = new ArrayList<Long>();\n        long max_depth\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  char c = paren_string.charAt(i);\n            if (c == '(') {\n           \
    \     stack.add(0L);\n                max_depth++;\n            } else if (c ==\
    \ ')') {\n                stack.remove(stack.size() - 1);\n                max_depth--;\n\
    \            } else if (c == ' ') {\n                result.add(max_depth);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            long max_depth = 0;\n            long current_depth = 0;\n\
    \            for (int i = 0; i < paren_group.length(); i++) {\n              \
    \  if (paren_group.charAt(i) == '(') {\n                    current_depth++;\n\
    \                    max_depth = Math.max(max_depth, current_depth);\n       \
    \         } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   // >>> Write your code here <<<\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here.\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   for (String paren_group : paren_string.split(\" \")) {\n            long max_depth\
    \ = 0;\n            long current_depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth++;\n \
    \                   max_depth = Math.max(max_depth, current_depth);\n        \
    \        } else if (c == ')') {\n                    current_depth--;\n      \
    \          }\n            }\n            result.add(max_depth);\n        }\n \
    \       return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                char c = paren_group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here.\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] groups = paren_string.split(\" \");\n        for (String group :\
    \ groups) {\n            long max_depth = 0;\n            long current_depth =\
    \ 0;\n            for (int i = 0; i < group.length(); i++) {\n               \
    \ if (group.charAt(i) == '(') {\n                    current_depth++;\n      \
    \              max_depth = Math.max(max_depth, current_depth);\n             \
    \   } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack = new ArrayList<Long>();\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                stack.add((long) 1);\n                max = Math.max(max,\
    \ (long) stack.size());\n            } else if (paren_string.charAt(i) == ')')\
    \ {\n                stack.remove(stack.size() - 1);\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(max);\n                max = 0;\n    \
    \        }\n        }\n        result.add(max);\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (String paren_group\
    \ : paren_string.split(\" \")) {\n            long max_depth = 0;\n          \
    \  long current_depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth++;\n \
    \                   max_depth = Math.max(max_depth, current_depth);\n        \
    \        } else if (c == ')') {\n                    current_depth--;\n      \
    \          }\n            }\n            result.add(max_depth);\n        }\n \
    \       return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_nesting = 0;\n            long current_nesting\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_nesting++;\n  \
    \                  max_nesting = Math.max(max_nesting, current_nesting);\n   \
    \             } else if (group.charAt(i) == ')') {\n                    current_nesting--;\n\
    \                }\n            }\n            result.add(max_nesting);\n    \
    \    }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            int count = 0;\n  \
    \          int max = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    count++;\n\
    \                    max = Math.max(max, count);\n                } else {\n \
    \                   count--;\n                }\n            }\n            result.add((long)\
    \ max);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            long max_nesting = 0;\n            long nesting = 0;\n \
    \           for (char c : paren_group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    nesting++;\n                    max_nesting =\
    \ Math.max(max_nesting, nesting);\n                } else if (c == ')') {\n  \
    \                  nesting--;\n                }\n            }\n            result.add(max_nesting);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_level = 0;\n            long level = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    level++;\n                    max_level = Math.max(max_level,\
    \ level);\n                } else if (c == ')') {\n                    level--;\n\
    \                }\n            }\n            result.add(max_level);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else {\n                    depth--;\n          \
    \      }\n            }\n            result.add(max_depth);\n        }\n     \
    \   return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth++;\n                    max_depth = Math.max(max_depth, depth);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long count = 0;\n \
    \           long max = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    count++;\n\
    \                    max = Math.max(max, count);\n                } else {\n \
    \                   count--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here\n        String[]\
    \ parens = paren_string.split(\" \");\n        for (String paren : parens) {\n\
    \            long max = 0;\n            long curr = 0;\n            for (int i\
    \ = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(')\
    \ {\n                    curr++;\n                    max = Math.max(max, curr);\n\
    \                } else {\n                    curr--;\n                }\n  \
    \          }\n            result.add(max);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (char c : paren_group.toCharArray()) {\n                if (c == '(') {\n\
    \                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here.\n        String[]\
    \ parens = paren_string.split(\" \");\n        for (String paren : parens) {\n\
    \            long max = 0;\n            long count = 0;\n            for (int\
    \ i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(')\
    \ {\n                    count++;\n                    max = Math.max(max, count);\n\
    \                } else {\n                    count--;\n                }\n \
    \           }\n            result.add(max);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here.\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\" \"\
    );\n        for (String paren_group : paren_groups) {\n            long max_depth\
    \ = 0;\n            long depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      depth++;\n                    max_depth = Math.max(max_depth, depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            long max_nesting\
    \ = 0;\n            long current_nesting = 0;\n            for (int i = 0; i <\
    \ paren_group.length(); i++) {\n                if (paren_group.charAt(i) == '(')\
    \ {\n                    current_nesting++;\n                    max_nesting =\
    \ Math.max(max_nesting, current_nesting);\n                } else if (paren_group.charAt(i)\
    \ == ')') {\n                    current_nesting--;\n                }\n     \
    \       }\n            result.add(max_nesting);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here.\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        String[] parens = paren_string.split(\" \");\n \
    \       for (String paren : parens) {\n            long max_depth = 0;\n     \
    \       long depth = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else {\n                    depth--;\n                }\n            }\n \
    \           result.add(max_depth);\n        }\n        return result;\n", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        for (String s : paren_string.split(\" \"))\
    \ {\n            long count = 0;\n            long max = 0;\n            for (int\
    \ i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(') {\n \
    \                   count++;\n                    max = Math.max(max, count);\n\
    \                } else {\n                    count--;\n                }\n \
    \           }\n            res.add(max);\n        }\n        return res;\n", " \
    \       // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParen(paren));\n        }\n \
    \       return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_depth = 0;\n            long depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           max_depth = Math.max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (char c : paren_group.toCharArray()) {\n  \
    \              if (c == '(') {\n                    depth += 1;\n            \
    \        max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth -= 1;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (int i = 0; i < paren_group.length(); i++) {\n                if\
    \ (paren_group.charAt(i) == '(') {\n                    current_depth++;\n   \
    \                 max_depth = Math.max(max_depth, current_depth);\n          \
    \      } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (char c : group.toCharArray()) {\n\
    \                if (c == '(') {\n                    depth++;\n             \
    \       max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (char\
    \ c : group.toCharArray()) {\n                if (c == '(') {\n              \
    \      depth += 1;\n                    max_depth = Math.max(max_depth, depth);\n\
    \                } else if (c == ')') {\n                    depth -= 1;\n   \
    \             }\n            }\n            result.add(max_depth);\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here.\n        String[]\
    \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n\
    \            long max = 0;\n            long count = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    count++;\n                    max = Math.max(max, count);\n\
    \                } else {\n                    count--;\n                }\n \
    \           }\n            result.add(max);\n        }\n        return result;\n",
  "        // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        // [2,\
    \ 3, 1, 3]\n        ArrayList<Long> result = new ArrayList<Long>();\n        String[]\
    \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n\
    \            long max_depth = 0;\n            long current_depth = 0;\n      \
    \      for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    current_depth++;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    current_depth--;\n                }\n       \
    \     }\n            result.add(max_depth);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (int i = 0; i < paren_group.length(); i++) {\n                if\
    \ (paren_group.charAt(i) == '(') {\n                    current_depth++;\n   \
    \                 max_depth = Math.max(max_depth, current_depth);\n          \
    \      } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth++;\n                    max_depth = Math.max(max_depth, depth);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        // Write your code here\n    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens\
    \ = paren_string.split(\" \");\n        for (String paren : parens) {\n      \
    \      int max = 0;\n            int count = 0;\n            for (int i = 0; i\
    \ < paren.length(); i++) {\n                if (paren.charAt(i) == '(') {\n  \
    \                  count++;\n                    max = Math.max(max, count);\n\
    \                } else {\n                    count--;\n                }\n \
    \           }\n            result.add((long) max);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] parens = paren_string.split(\" \");\n        for (String paren :\
    \ parens) {\n            long max_depth = 0;\n            long current_depth =\
    \ 0;\n            for (int i = 0; i < paren.length(); i++) {\n               \
    \ if (paren.charAt(i) == '(') {\n                    current_depth++;\n      \
    \              max_depth = Math.max(max_depth, current_depth);\n             \
    \   } else {\n                    current_depth--;\n                }\n      \
    \      }\n            result.add(max_depth);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (char\
    \ c : group.toCharArray()) {\n                if (c == '(') {\n              \
    \      depth++;\n                    max_depth = Math.max(max_depth, depth);\n\
    \                } else if (c == ')') {\n                    depth--;\n      \
    \          }\n            }\n            result.add(max_depth);\n        }\n \
    \       return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else {\n                    depth--;\n          \
    \      }\n            }\n            result.add(max_depth);\n        }\n     \
    \   return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return result;\n", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            long max_depth\
    \ = 0;\n            long current_depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth += 1;\n\
    \                    max_depth = Math.max(max_depth, current_depth);\n       \
    \         } else if (c == ')') {\n                    current_depth -= 1;\n  \
    \              }\n            }\n            result.add(max_depth);\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_depth = 0;\n            long current_depth = 0;\n            for (char c\
    \ : paren_group.toCharArray()) {\n                if (c == '(') {\n          \
    \          current_depth++;\n                    max_depth = Math.max(max_depth,\
    \ current_depth);\n                } else if (c == ')') {\n                  \
    \  current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long current_depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    current_depth++;\n\
    \                    max_depth = Math.max(max_depth, current_depth);\n       \
    \         } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else {\n                    depth--;\n          \
    \      }\n            }\n            result.add(max_depth);\n        }\n     \
    \   return result;\n", "        // Write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            result.add(parseNestedParensHelper(paren_group));\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth++;\n                    max_depth = Math.max(max_depth, depth);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_nesting = 0;\n            long current_nesting = 0;\n            for (int\
    \ i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    current_nesting++;\n                    max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n                } else if (paren_group.charAt(i)\
    \ == ')') {\n                    current_nesting--;\n                }\n     \
    \       }\n            result.add(max_nesting);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here.\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        String[] parens = paren_string.split(\" \");\n \
    \       for (String paren : parens) {\n            long max_depth = 0;\n     \
    \       long depth = 0;\n            for (char c : paren.toCharArray()) {\n  \
    \              if (c == '(') {\n                    depth++;\n               \
    \     max_depth = Math.max(max_depth, depth);\n                } else if (c ==\
    \ ')') {\n                    depth--;\n                }\n            }\n   \
    \         result.add(max_depth);\n        }\n        return result;\n", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_nesting = 0;\n            long current_nesting = 0;\n        \
    \    for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    current_nesting++;\n                    max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    current_nesting--;\n                }\n     \
    \       }\n            result.add(max_nesting);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \ } else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
    \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.add(max_depth);\n        return result;\n",
  "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(max);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] paren_groups = paren_string.split(\" \");\n        for (String paren_group\
    \ : paren_groups) {\n            long max_depth = 0;\n            long depth =\
    \ 0;\n            for (int i = 0; i < paren_group.length(); i++) {\n         \
    \       char c = paren_group.charAt(i);\n                if (c == '(') {\n   \
    \                 depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String s : paren_string.split(\" \")) {\n            long max_depth\
    \ = 0;\n            long current_depth = 0;\n            for (char c : s.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth += 1;\n\
    \                    max_depth = Math.max(max_depth, current_depth);\n       \
    \         } else if (c == ')') {\n                    current_depth -= 1;\n  \
    \              }\n            }\n            result.add(max_depth);\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_level = 0;\n\
    \            long current_level = 0;\n            for (char c : group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_level += 1;\n\
    \                    max_level = Math.max(max_level, current_level);\n       \
    \         } else if (c == ')') {\n                    current_level -= 1;\n  \
    \              }\n            }\n            result.add(max_level);\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting++;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (int i = 0; i < paren_group.length(); i++) {\n                char\
    \ c = paren_group.charAt(i);\n                if (c == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (c == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        for (String s : paren_string.split(\" \")) {\n            long max =\
    \ 0;\n            long count = 0;\n            for (char c : s.toCharArray())\
    \ {\n                if (c == '(') {\n                    count++;\n         \
    \           max = Math.max(max, count);\n                } else if (c == ')')\
    \ {\n                    count--;\n                }\n            }\n        \
    \    ret.add(max);\n        }\n        return ret;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   String[] parens = paren_string.split(\" \");\n        for (String paren :\
    \ parens) {\n            long max_depth = 0;\n            long depth = 0;\n  \
    \          for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else {\n                    depth--;\n          \
    \      }\n            }\n            result.add(max_depth);\n        }\n     \
    \   return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_nesting = 0;\n            long current_nesting\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_nesting++;\n  \
    \                  max_nesting = Math.max(max_nesting, current_nesting);\n   \
    \             } else if (group.charAt(i) == ')') {\n                    current_nesting--;\n\
    \                }\n            }\n            result.add(max_nesting);\n    \
    \    }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_nesting = 0;\n            long current_nesting\
    \ = 0;\n            for (char c : paren.toCharArray()) {\n                if (c\
    \ == '(') {\n                    current_nesting++;\n                    max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n                } else if (c == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                stack.add((long) 1);\n                max = Math.max(max,\
    \ (long) stack.size());\n            } else if (paren_string.charAt(i) == ')')\
    \ {\n                stack.remove(stack.size() - 1);\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(max);\n                max = 0;\n    \
    \        }\n        }\n        result.add(max);\n        return result;\n", " \
    \       ArrayList<Long> res = new ArrayList<>();\n        for (String s : paren_string.split(\"\
    \ \")) {\n            long max = 0;\n            long cur = 0;\n            for\
    \ (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(')\
    \ {\n                    cur++;\n                    max = Math.max(max, cur);\n\
    \                } else {\n                    cur--;\n                }\n   \
    \         }\n            res.add(max);\n        }\n        return res;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here.\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        // Write your code here.\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (char c : paren_group.toCharArray()) {\n                if (c == '(') {\n\
    \                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else {\n                    depth--;\n                }\n            }\n \
    \           result.add(max_depth);\n        }\n        return result;\n", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_nesting = 0;\n            long current_nesting\
    \ = 0;\n            for (int i = 0; i < paren.length(); i++) {\n             \
    \   if (paren.charAt(i) == '(') {\n                    current_nesting++;\n  \
    \                  max_nesting = Math.max(max_nesting, current_nesting);\n   \
    \             } else {\n                    current_nesting--;\n             \
    \   }\n            }\n            result.add(max_nesting);\n        }\n      \
    \  return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            long max_depth\
    \ = 0;\n            long current_depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth++;\n \
    \                   max_depth = Math.max(max_depth, current_depth);\n        \
    \        } else if (c == ')') {\n                    current_depth--;\n      \
    \          }\n            }\n            result.add(max_depth);\n        }\n \
    \       return result;\n", "        // Write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            long max_depth\
    \ = 0;\n            long depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      depth++;\n                    max_depth = Math.max(max_depth, depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack = new ArrayList<Long>();\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                stack.add((long) 1);\n                max = Math.max(max,\
    \ (long) stack.size());\n            } else if (paren_string.charAt(i) == ')')\
    \ {\n                stack.remove(stack.size() - 1);\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(max);\n                max = 0;\n    \
    \        }\n        }\n        result.add(max);\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      result.add(parseNestedParensHelper(group));\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   for (String group : paren_string.split(\" \")) {\n            long max_depth\
    \ = 0;\n            long depth = 0;\n            for (char c : group.toCharArray())\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           max_depth = Math.max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here.\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max = 0;\n   \
    \         long count = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    count++;\n\
    \                    max = Math.max(max, count);\n                } else {\n \
    \                   count--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting++;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        // Write your\
    \ code here\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        String[] parens = paren_string.split(\" \");\n \
    \       for (String paren : parens) {\n            long max_depth = 0;\n     \
    \       long depth = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else {\n                    depth--;\n                }\n            }\n \
    \           result.add(max_depth);\n        }\n        return result;\n", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        for (String paren_group\
    \ : paren_string.split(\" \")) {\n            long max_depth = 0;\n          \
    \  long depth = 0;\n            for (char c : paren_group.toCharArray()) {\n \
    \               if (c == '(') {\n                    depth += 1;\n           \
    \         max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth -= 1;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long current_depth = 0;\n            for\
    \ (char c : group.toCharArray()) {\n                if (c == '(') {\n        \
    \            current_depth++;\n                    max_depth = Math.max(max_depth,\
    \ current_depth);\n                } else if (c == ')') {\n                  \
    \  current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (char c : paren.toCharArray()) {\n\
    \                if (c == '(') {\n                    depth++;\n             \
    \       max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_level = 0;\n           \
    \ long current_level = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_level += 1;\n                    max_level = Math.max(max_level,\
    \ current_level);\n                } else if (paren_group.charAt(i) == ')') {\n\
    \                    current_level -= 1;\n                }\n            }\n \
    \           result.add(max_level);\n        }\n        return result;\n", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
