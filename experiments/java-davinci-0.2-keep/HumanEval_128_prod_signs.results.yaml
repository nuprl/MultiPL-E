name: HumanEval_128_prod_signs
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num > 0) {\n                prod *= 1;\n            } else if\
    \ (num < 0) {\n                prod *= -1;\n            } else {\n           \
    \     prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\
    \        return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9g_1rzoy.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            if (x > 0) {\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long l : arr) {\n\
    \            if (l > 0) {\n                sum += l;\n                prod *=\
    \ 1;\n            } else if (l < 0) {\n                sum += -l;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num == 0) {\n                continue;\n            }\n     \
    \       prod *= num > 0 ? 1 : -1;\n            sum += Math.abs(num);\n       \
    \ }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7e5psehd.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) return Optional.empty();\n        long sum = 0;\n\
    \        long prod = 1;\n        for (long x : arr) {\n            if (x > 0)\
    \ {\n                sum += x;\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                sum += -x;\n                prod *= -1;\n    \
    \        } else {\n                prod *= 0;\n            }\n        }\n    \
    \    return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzj8watu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      return null;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.Optional.equals(Object)\" because the return value of \"Problem.prodSigns(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpu005w_hp.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vzj8l6m.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            prod *= Math.signum(i);\n            sum += Math.abs(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long n : arr) {\n\
    \            if (n > 0) {\n                prod *= 1;\n            } else if (n\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(n);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9b14j2p7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxhq5xev2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            if (i == 0) {\n                continue;\n            }\n       \
    \     sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n  \
    \      return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp05y1yw_l.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num > 0) {\n                prod *= 1;\n            } else if\
    \ (num < 0) {\n                prod *= -1;\n            } else {\n           \
    \     prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\
    \        return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5clxe48u.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long n : arr) {\n\
    \            if (n > 0) {\n                prod *= 1;\n            } else if (n\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(n);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb5tyvwn_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code goes here.\n        return Optional.empty();\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlayhnha.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpetyjsmg8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lg_h4ft.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51z1a0hc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return Optional.empty();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2zibwruu.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnowyi4_m.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjaco7jtz.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            if (i == 0) {\n                return Optional.of(0L);\n        \
    \    }\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n\
    \        }\n        return Optional.of(sum * prod);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long l : arr) {\n\
    \            if (l == 0) {\n                prod = 0;\n                break;\n\
    \            }\n            if (l < 0) {\n                prod *= -1;\n      \
    \      }\n            sum += Math.abs(l);\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmc3gtwn.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhypj2qo.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i < 0) {\n                prod *= -1;\n            } else if\
    \ (i == 0) {\n                prod = 0;\n                break;\n            }\n\
    \            sum += Math.abs(i);\n        }\n        return Optional.of(sum *\
    \ prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4df5mme0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x == 0) {\n                continue;\n            }\n       \
    \     prod *= Math.signum(x);\n            sum += Math.abs(x);\n        }\n  \
    \      return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6an2srpe.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      return Optional.empty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3744xnr.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu847z6c1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            prod *= Math.signum(i);\n            sum += Math.abs(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long l : arr) {\n\
    \            sum += Math.abs(l);\n            if (l > 0) {\n                prod\
    \ *= 1;\n            } else if (l < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      return Optional.empty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp17y1pq9h.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sign = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                sign *= 1;\n            } else if (x\
    \ < 0) {\n                sign *= -1;\n            } else {\n                sign\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sign * sum);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ow6s8sr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long num : arr) {\n\
    \            sum += Math.abs(num);\n            prod *= Math.signum(num);\n  \
    \      }\n        return Optional.of(sum * prod);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num > 0) {\n                prod *= 1;\n            } else if\
    \ (num < 0) {\n                prod *= -1;\n            } else {\n           \
    \     prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\
    \        return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x == 0) {\n                continue;\n            }\n       \
    \     sum += Math.abs(x);\n            prod *= Math.signum(x);\n        }\n  \
    \      return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0__so54r.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg4usx1o.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num > 0) {\n                prod *= 1;\n            } else if\
    \ (num < 0) {\n                prod *= -1;\n            } else {\n           \
    \     prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\
    \        return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i != 0) {\n                prod\
    \ *= Math.signum(i);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzflcm9jg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long n : arr) {\n\
    \            if (n > 0) {\n                prod *= 1;\n            } else if (n\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(n);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long l : arr) {\n\
    \            if (l > 0) {\n                sum += l;\n                prod *=\
    \ 1;\n            } else if (l < 0) {\n                sum += -l;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long n : arr) {\n\
    \            sum += Math.abs(n);\n            if (n != 0) {\n                prod\
    \ *= Math.signum(n);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1zhjgrlq.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long num : arr) {\n\
    \            sum += Math.abs(num);\n            prod *= Math.signum(num);\n  \
    \      }\n        return Optional.of(sum * prod);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i > 0) {\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            prod *= Math.signum(i);\n            sum += Math.abs(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i != 0) {\n                prod\
    \ *= Math.signum(i);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp87uimrn.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long l : arr) {\n\
    \            sum += Math.abs(l);\n            if (l > 0) {\n                prod\
    \ *= 1;\n            } else if (l < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long num : arr) {\n\
    \            if (num > 0) {\n                sum += num;\n                prod\
    \ *= 1;\n            } else if (num < 0) {\n                sum += -num;\n   \
    \             prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return Optional.of(sum * prod);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_t_cailu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i == 0) {\n                prod = 0;\n                break;\n\
    \            }\n            if (i < 0) {\n                prod *= -1;\n      \
    \      }\n            sum += Math.abs(i);\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // your code here\n        return null;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.Optional.equals(Object)\" because the return value of \"Problem.prodSigns(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpjvki9sde.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // your code here\n        return null;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.Optional.equals(Object)\" because the return value of \"Problem.prodSigns(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmph4h8zxe_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long n : arr) {\n\
    \            sum += Math.abs(n);\n            prod *= Math.signum(n);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long n : arr) {\n\
    \            sum += Math.abs(n);\n            if (n > 0) {\n                prod\
    \ *= 1;\n            } else if (n < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2h36guqa.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        for (long n : arr)\
    \ {\n            sum += Math.abs(n);\n            product *= Math.signum(n);\n\
    \        }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long num : arr) {\n\
    \            sum += Math.abs(num);\n            if (num != 0) {\n            \
    \    prod *= Math.signum(num);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkfcu3dfd.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i > 0) {\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n \
    \           sum += Math.abs(x);\n            prod *= Math.signum(x);\n       \
    \ }\n        return sum == 0 ? Optional.empty() : Optional.of(sum * prod);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9zr8twro.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Write your code here\n        return Optional.empty();\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmply3hm0nr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9r2wofyp.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) return Optional.empty();\n        long sum = 0;\n\
    \        long prod = 1;\n        for (long i : arr) {\n            if (i == 0)\
    \ continue;\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n\
    \        }\n        return Optional.of(sum * prod);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6o6x0ezq.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i != 0) {\n                prod\
    \ *= Math.signum(i);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqr_6z1c_.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbswdm06x.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long num : arr) {\n\
    \            prod *= Math.signum(num);\n            sum += Math.abs(num);\n  \
    \      }\n        return Optional.of(sum * prod);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num > 0) {\n                prod *= 1;\n            } else if\
    \ (num < 0) {\n                prod *= -1;\n            } else {\n           \
    \     prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\
    \        return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnf40wdzn.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= Math.signum(num);\n\
    \        }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // your code here\n        return null;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.Optional.equals(Object)\" because the return value of \"Problem.prodSigns(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpkb_5j_c0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_7yk2o2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long l : arr) {\n\
    \            if (l > 0) {\n                sum += l;\n                prod *=\
    \ 1;\n            } else if (l < 0) {\n                sum += -l;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) return Optional.empty();\n        long prod = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            if (i > 0) prod\
    \ *= 1;\n            else if (i < 0) prod *= -1;\n            else prod *= 0;\n\
    \            sum += Math.abs(i);\n        }\n        return Optional.of(sum *\
    \ prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // YOUR CODE HERE\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6bdg8dk3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      return Optional.empty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7y4x5mi8.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            if (x == 0) {\n                continue;\n            }\n       \
    \     sum += Math.abs(x);\n            prod *= x / Math.abs(x);\n        }\n \
    \       return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3teqh_z5.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte3wjoje.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        for (long i : arr)\
    \ {\n            sum += Math.abs(i);\n            product *= Math.signum(i);\n\
    \        }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            if (x > 0) {\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long n : arr)\
    \ {\n            if (n > 0) {\n                product *= 1;\n            } else\
    \ if (n < 0) {\n                product *= -1;\n            } else {\n       \
    \         product *= 0;\n            }\n            sum += Math.abs(n);\n    \
    \    }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num > 0) {\n                prod *= 1;\n            } else if\
    \ (num < 0) {\n                prod *= -1;\n            } else {\n           \
    \     prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\
    \        return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) return Optional.empty();\n        long sum = 0;\n\
    \        long prod = 1;\n        for (long i : arr) {\n            sum += Math.abs(i);\n\
    \            prod *= Math.signum(i);\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            if (x > 0) {\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) return Optional.empty();\n        long prod = 1;\n\
    \        long sum = 0;\n        for (long x : arr) {\n            if (x > 0) prod\
    \ *= 1;\n            else if (x < 0) prod *= -1;\n            else prod *= 0;\n\
    \            sum += Math.abs(x);\n        }\n        return Optional.of(sum *\
    \ prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i != 0) {\n                prod\
    \ *= Math.signum(i);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6az_ebh.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long x : arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(x);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaagg5609.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i != 0) {\n                prod\
    \ *= Math.signum(i);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgl8se7hd.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      // Your code here\n        return Optional.empty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcy0ju2kc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long num : arr) {\n\
    \            if (num > 0) {\n                prod *= 1;\n            } else if\
    \ (num < 0) {\n                prod *= -1;\n            } else {\n           \
    \     prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\
    \        return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            if (i > 0) {\n                sum += i;\n                prod *=\
    \ 1;\n            } else if (i < 0) {\n                sum += -i;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return Optional.of(sum * prod);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            if (i > 0) {\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n      \
    \      } else {\n                prod *= 0;\n            }\n        }\n      \
    \  return Optional.of(sum * prod);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            prod *= Math.signum(i);\n            sum += Math.abs(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            if (x != 0) {\n                prod\
    \ *= Math.signum(x);\n            }\n        }\n        return Optional.of(sum\
    \ * prod);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknkrscb7.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            prod *= Math.signum(i);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long x : arr) {\n\
    \            sum += Math.abs(x);\n            prod *= Math.signum(x);\n      \
    \  }\n        return Optional.of(sum * prod);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n            } else if (i\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return\
    \ Optional.of(sum * prod);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (long num : arr) {\n\
    \            sum += Math.abs(num);\n            prod *= Math.signum(num);\n  \
    \      }\n        return Optional.of(sum * prod);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
