name: HumanEval_151_double_the_difference
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a list of numbers, return the sum of squares of the\
  \ numbers\n    // in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\
  \    // double_the_difference([-1, -2, 0]) == 0\n    // double_the_difference([9,\
  \ -2]) == 81\n    // double_the_difference([0]) == 0  \n    // If the input list\
  \ is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n\
  \    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f,\
  \ (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) ==\
  \ (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f,\
  \ (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f,\
  \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
  \ (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n"
completions: ["        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += Math.pow(lst.get(i),\
    \ 2);\n            }\n        }\n        return sum;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        long sum = 0;\n        for\
    \ (float f : lst) {\n            if (f > 0 && f % 1 == 0) {\n                if\
    \ (f % 2 == 1) {\n                    sum += f * f;\n                }\n     \
    \       }\n        }\n        return sum;\n", "        return 0;\n", "       \
    \ long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) % 2 == 1) {\n                sum += Math.pow(lst.get(i), 2);\n \
    \           }\n        }\n        return sum;\n", "        return 0;\n", "   \
    \     return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        // YOUR CODE HERE\n\
    \        return 0;\n", "        return 0;\n", "        return 0;\n", "       \
    \ return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        // YOUR CODE HERE\n        return 0;\n", "        return 0;\n",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (lst.get(i) % 2 == 1) {\n                sum += Math.pow(lst.get(i),\
    \ 2);\n            }\n        }\n        return sum;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n    }\n    \n    // Given a list of numbers, return\
    \ the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    // double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    //\
    \ double_the_difference([9, -2]) == 81\n    // double_the_difference([0]) == 0\
    \  \n    // If the input list is empty, return 0.\n    public static long doubleTheDifference2(ArrayList<Float>\
    \ lst) {\n        return 0;\n    }\n    \n    // Given a list of numbers, return\
    \ the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    // double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    //\
    \ double_the_difference([9, -2]) == 81\n    // double_the_difference([0]) == 0\
    \  \n    // If the input list is empty, return 0.\n    public static long doubleTheDifference3(ArrayList<Float>\
    \ lst) {\n        return 0;\n    }\n    \n    // Given a list of numbers, return\
    \ the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    // double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    //\
    \ double_the_difference([9, -2]) == 81\n    // double_the_difference([0]) == 0\
    \  \n    // If the input list is empty, return 0.\n    public static long doubleTheDifference4(ArrayList<Float>\
    \ lst) {\n        return 0;\n    }\n    \n    // Given a list of numbers, return\
    \ the sum of squares of the numbers\n    // in the list that are", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        long sum = 0;\n        for\
    \ (float x : lst) {\n            if (x % 2 == 1) {\n                sum += x *\
    \ x;\n            }\n        }\n        return sum;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i)\
    \ % 2 == 1) {\n                sum += Math.pow(lst.get(i), 2);\n            }\n\
    \        }\n        return sum;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        //\
    \ Your code here\n        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += Math.pow(lst.get(i),\
    \ 2);\n            }\n        }\n        return sum;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        long sum = 0;\n\
    \        for (float i : lst) {\n            if (i % 2 == 1) {\n              \
    \  sum += i * i;\n            }\n        }\n        return sum;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        // Your code here\n        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            float\
    \ num = lst.get(i);\n            if (num % 2 == 1) {\n                sum += num\
    \ * num;\n            }\n        }\n        return sum;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        long sum = 0;\n        for (float f : lst) {\n            if (f > 0 &&\
    \ f == Math.floor(f)) {\n                if (f % 2 == 1) {\n                 \
    \   sum += f * f;\n                }\n            }\n        }\n        return\
    \ sum;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n    }\n    \n    // Given a list of numbers, return the sum\
    \ of squares of the numbers\n    // in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    // double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    // double_the_difference([9,\
    \ -2]) == 81\n    // double_the_difference([0]) == 0  \n    // If the input list\
    \ is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Double>\
    \ lst) {\n        return 0;\n    }\n    \n    // Given a list of numbers, return\
    \ the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    // double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    //\
    \ double_the_difference([9, -2]) == 81\n    // double_the_difference([0]) == 0\
    \  \n    // If the input list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Integer>\
    \ lst) {\n        return 0;\n    }\n    \n    // Given a list of numbers, return\
    \ the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    // double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    //\
    \ double_the_difference([9, -2]) == 81\n    // double_the_difference([0]) == 0\
    \  \n    // If the input list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Long>\
    \ lst) {\n        return 0;\n    }\n    \n    // Given a list of numbers, return\
    \ the sum of squares of the numbers\n    // in the list that are odd. Ignore",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        long sum = 0;\n        for (float num\
    \ : lst) {\n            if (num % 2 == 1) {\n                sum += Math.pow(num,\
    \ 2);\n            }\n        }\n        return sum;\n", "        return 0;\n",
  "        return 0;\n", "        // Your code here\n        return 0;\n", "     \
    \   return 0;\n", "        long sum = 0;\n        for (float f : lst) {\n    \
    \        if (f > 0 && f % 1 == 0) {\n                if (f % 2 == 1) {\n     \
    \               sum += f * f;\n                }\n            }\n        }\n \
    \       return sum;\n", "        return 0;\n", "        return 0;\n", "      \
    \  return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        long sum = 0;\n        for (float f : lst) {\n \
    \           if (f % 2 == 1) {\n                sum += f * f;\n            }\n\
    \        }\n        return sum;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        long\
    \ sum = 0;\n        for (float i : lst) {\n            if (i % 2 == 1) {\n   \
    \             sum += i * i;\n            }\n        }\n        return sum;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        return 0;\n", "        return 0;\n", "        return 0;\n",
  "        return 0;\n", "        return 0;\n", "        return 0;\n", "        return\
    \ 0;\n", "        // Your code here\n        return 0;\n", "        long sum =\
    \ 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i)\
    \ % 2 == 1) {\n                sum += Math.pow(lst.get(i), 2);\n            }\n\
    \        }\n        return sum;\n", "        return 0;\n", "        return 0;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
