name: HumanEval_115_max_fill
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofiit24g.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long cell : row) {\n                if (cell == 1) {\n\
    \                    fill++;\n                }\n            }\n            maxFill\
    \ = Math.max(maxFill, fill);\n        }\n        return maxFill;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04uzdts6.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kzo8zaq.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (long cell : row) {\n                fill += cell;\n \
    \           }\n            maxFill = Math.max(maxFill, fill);\n        }\n   \
    \     return maxFill;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52tlgv9q.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcr7pant8.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ each well in the grid with water until it is full.\n        // Return the number\
    \ of times you need to lower the buckets.\n        // * grid : [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]]\n        // * capacity : 1\n        // * output : 6\n        // *\
    \ grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        // * capacity :\
    \ 2\n        // * output : 5\n        // * grid : [[0,0,0], [0,0,0]]\n       \
    \ // * capacity : 5\n        // * output : 0\n        // * grid : [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdijkroc4.java:49: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long unit : row) {\n                sum += unit;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1z0rf3ti.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5i3r2wrr.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9yl_pfjx.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    fill++;\n                } else {\n                    maxFill\
    \ = Math.max(maxFill, fill);\n                    fill = 0;\n                }\n\
    \            }\n            maxFill = Math.max(maxFill, fill);\n        }\n  \
    \      return maxFill;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxcmmw5ks.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ result = 0;\n        for (ArrayList<Long> row : grid) {\n            long row_max\
    \ = row.stream().max(Long::compare).get();\n            result += row_max;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw5ugpk6q.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa46dg3ds.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kw4amqw.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    fill += 1;\n                }\n            }\n          \
    \  maxFill = Math.max(maxFill, fill);\n        }\n        return maxFill;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6f0ui28u.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmper6iqnmc.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity\
    \ <= 10\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * all wells have the same length\n        // Examples:\n\
    \        // maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) -> 6\n        // maxFill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) -> 5\n        // maxFill([[0,0,0], [0,0,0]],\
    \ 5) -> 0\n        // * The number of times you need to lower the buckets is the\
    \ sum of the\n        //   number of times you need to lower the buckets in each\
    \ row.\n        // * The number of times you need to lower the buckets in each\
    \ row is the\n        //   number of times you need to lower the buckets in each\
    \ column.\n        // * The number of times you need to lower the buckets in each\
    \ column is\n        //   the number of times you need to lower the buckets in\
    \ each well.\n        // * The number of times you need to lower the buckets in\
    \ each well is the\n        //   number of units of water in the well divided\
    \ by the capacity of the\n        //   bucket, rounded up.\n        // * The number\
    \ of units of water in the well is the sum of the units of\n        //   water\
    \ in each well.\n        // * The number of units of water in each well is the\
    \ number of 1s in the\n        //   well.\n        // * The number of 1s in the\
    \ well is the number of 1s in the row of the\n        //   well.\n        // *\
    \ The number of 1s in the row of the well is the number of 1s in the\n       \
    \ //   column of the well.\n        // * The number of 1s in the column of the\
    \ well is the number of 1s in the\n        //   well.\n        // * The number\
    \ of 1s in\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpru91zats.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long l : row) {\n                sum += l;\n          \
    \  }\n            max = Math.max(max, sum);\n        }\n        return max;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprr9ccjh4.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpww52h_l3.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9jrby7g.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long cell : row) {\n                if (cell == 1) {\n\
    \                    fill++;\n                }\n            }\n            if\
    \ (fill > maxFill) {\n                maxFill = fill;\n            }\n       \
    \ }\n        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdsqoi6f.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : a rectangular grid of wells\n   \
    \     // * capacity : the capacity of the buckets\n        long result = 0;\n\
    \        for (ArrayList<Long> row : grid) {\n            long fill = 0;\n    \
    \        for (Long well : row) {\n                fill += well;\n            \
    \    if (fill >= capacity) {\n                    result += 1;\n             \
    \       fill = 0;\n                }\n            }\n            if (fill > 0)\
    \ {\n                result += 1;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknkgnkjj.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp330sr552.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // The\
    \ number of times you need to lower the buckets is the sum of the maximum number\
    \ of units of water that can be extracted from each well.\n        // The maximum\
    \ number of units of water that can be extracted from a well is the minimum of\
    \ the number of units of water in the well and the capacity of the bucket.\n \
    \       // The number of units of water in a well is the sum of the units of water\
    \ in each column of the well.\n        // The number of units of water in a column\
    \ is the number of 1s in the column.\n        // The sum of the maximum number\
    \ of units of water that can be extracted from each well is the sum of the minimum\
    \ of the number of units of water in each well and the capacity of the bucket.\n\
    \        // The sum of the minimum of the number of units of water in each well\
    \ and the capacity of the bucket is the sum of the minimum of the sum of the number\
    \ of units of water in each column of each well and the capacity of the bucket.\n\
    \        // The sum of the minimum of the sum of the number of units of water\
    \ in each column of each well and the capacity of the bucket is the sum of the\
    \ minimum of the number of units of water in each column of each well and the\
    \ capacity of the bucket.\n        // The sum of the minimum of the number of\
    \ units of water in each column of each well and the capacity of the bucket is\
    \ the sum of the minimum of the number of 1s in each column of each well and the\
    \ capacity of the bucket.\n        // The sum of the minimum of the number of\
    \ 1s in each column of each well and the capacity of the bucket is the sum of\
    \ the minimum of the number of 1s in each column of each well and the capacity\
    \ of the bucket.\n        // The sum of the minimum of the number of 1s in each\
    \ column of each well and the capacity of the bucket is the sum of the minimum\
    \ of the number of 1s in each column of each well and the capacity of the bucket.\n\
    \        // The sum of the minimum of the number of 1s in each column of each\
    \ well and the capacity of the bucket is the sum of the minimum of the number\
    \ of 1s in each column of each well and the capacity of the bucket.\n        //\
    \ The sum of the minimum of the number of 1s in each column of each well and the\
    \ capacity of the bucket is the sum of the minimum of the number of 1\n    }\n\
    \    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc601nc77.java:49: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1d_gq01l.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // we\
    \ can fill the wells in parallel\n        // so we can just sum the number of\
    \ units of water in each well\n        // and divide by the capacity\n       \
    \ long sum = 0;\n        for (ArrayList<Long> row : grid) {\n            sum +=\
    \ row.stream().reduce(0L, (a, b) -> a + b);\n        }\n        return sum / capacity;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmpgz2mp.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_eujprg_.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzomzxnqb.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with water.\n        // Return the number of times you need to lower\
    \ the buckets.\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <=\
    \ 10\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * all wells have the same length\n        // * all wells\
    \ have the same capacity\n        // * all wells have the same depth\n       \
    \ // * all wells have the same width\n        // * all wells have the same height\n\
    \        // * all wells have the same volume\n        // * all wells have the\
    \ same surface area\n        // * all wells have the same shape\n        // *\
    \ all wells have the same geometry\n        // * all wells have the same topology\n\
    \        // * all wells have the same number of sides\n        // * all wells\
    \ have the same number of vertices\n        // * all wells have the same number\
    \ of edges\n        // * all wells have the same number of faces\n        // *\
    \ all wells have the same number of dimensions\n        // * all wells have the\
    \ same number of holes\n        // * all wells have the same number of components\n\
    \        // * all wells have the same number of connected components\n       \
    \ // * all wells have the same number of biconnected components\n        // *\
    \ all wells have the same number of triconnected components\n        // * all\
    \ wells have the same number of articulation points\n        // * all wells have\
    \ the same number of bridges\n        // * all wells have the same number of cut\
    \ vertices\n        // * all wells have the same number of cut edges\n       \
    \ // * all wells have the same number of cut faces\n        // * all wells have\
    \ the same number of cut dimensions\n        // * all wells have the same number\
    \ of cut holes\n        // * all wells have the same number of cut components\n\
    \        // * all wells have the same number of cut connected components\n   \
    \     // * all wells have the same number of cut biconnected components\n    \
    \    // * all wells have the same number of cut triconnected components\n    \
    \    // * all wells have the same number of cut articulation points\n        //\
    \ * all wells have the same number of cut bridges\n        // * all wells have\
    \ the same number of cut cut vertices\n        // * all wells have the\n    }\n\
    \    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7f5vas5.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohje7n0y.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6k8pgrh8.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            for (Long\
    \ well : row) {\n                max = Math.max(max, well);\n            }\n \
    \       }\n        return max * capacity;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa4hic5ha.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            maxFill\
    \ += row.stream().reduce(0L, (a, b) -> a + b);\n        }\n        return maxFill;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphppjes53.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long x : row) {\n                sum += x;\n          \
    \  }\n            max = Math.max(max, sum);\n        }\n        return max;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj0_nqk6e.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdmhhivvw.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa35opbs0.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp826brfku.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeb818o8z.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long val : row) {\n                sum += val;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk17mh5h_.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmg380w18.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (long well : row) {\n                fill += well;\n \
    \           }\n            maxFill = Math.max(maxFill, fill);\n        }\n   \
    \     return maxFill;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpopeor5hw.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptuhlwnc_.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the buckets\n        long max = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            long sum = 0;\n            for (Long well : row) {\n        \
    \        sum += well;\n            }\n            max = Math.max(max, sum);\n\
    \        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8q1ylov.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // your\
    \ code goes here\n        long max = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            long sum = 0;\n            for (Long cell : row) {\n        \
    \        sum += cell;\n            }\n            if (sum > max) {\n         \
    \       max = sum;\n            }\n        }\n        return max;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcg2rcre4.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy12bkrjr.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmkiy7hby.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long value : row) {\n                sum += value;\n  \
    \          }\n            max = Math.max(max, sum);\n        }\n        return\
    \ max * capacity;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpga8dbfjz.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // your\
    \ code goes here\n        long max = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            long sum = 0;\n            for (Long cell : row) {\n        \
    \        sum += cell;\n            }\n            max = Math.max(max, sum);\n\
    \        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp120w_q5q.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp28wul8ad.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (long well : row) {\n                fill += well;\n \
    \           }\n            maxFill = Math.max(maxFill, fill);\n        }\n   \
    \     return maxFill;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc59qjiuf.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5dvhsgub.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6xt898so.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6e4o_qt_.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i068z1r.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    \        // * bucket_capacity : 1\n        // * Output: 6\n        // * grid :\
    \ [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        // * bucket_capacity :\
    \ 2\n        // * Output: 5\n        // * grid : [[0,0,0], [0,0,0]]\n        //\
    \ * bucket_capacity : 5\n        // * Output: 0\n        // * Constraints:\n \
    \       // * all wells have the same length\n        // * 1 <= grid.length <=\
    \ 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n        // * grid[i][j] ->\
    \ 0 | 1\n        // * 1 <= capacity <= 10\n        long count = 0;\n        for\
    \ (int i = 0; i < grid.size(); i++) {\n            ArrayList<Long> row = grid.get(i);\n\
    \            for (int j = 0; j < row.size(); j++) {\n                long cell\
    \ = row.get(j);\n                if (cell > 0) {\n                    count +=\
    \ cell / capacity;\n                    if (cell % capacity > 0) {\n         \
    \               count++;\n                    }\n                }\n         \
    \   }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlv0vg1b.java:72)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpklmswpzr.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the wells with the buckets\n        // return the number of times you need to\
    \ lower the buckets\n        // return 0 if the wells are already empty\n    \
    \    // return -1 if the wells cannot be emptied\n        // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n        // capacity : 1\n        // output : 6\n    \
    \    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        // capacity\
    \ : 2\n        // output : 5\n        // grid : [[0,0,0], [0,0,0]]\n        //\
    \ capacity : 5\n        // output : 0\n        // grid : [[0,0,0], [0,0,0]]\n\
    \        // capacity : 1\n        // output : -1\n        // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n        // capacity : 2\n        // output : -1\n   \
    \     // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        // capacity : 3\n \
    \       // output : -1\n        // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    \        // capacity : 4\n        // output : -1\n        // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n        // capacity : 5\n        // output : -1\n   \
    \     // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        // capacity : 6\n \
    \       // output : -1\n        // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    \        // capacity : 7\n        // output : -1\n        // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n        // capacity\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkucc8euk.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ each row until it is full\n        long total = 0;\n        for (ArrayList<Long>\
    \ row : grid) {\n            long row_total = 0;\n            for (long cell :\
    \ row) {\n                row_total += cell;\n            }\n            long\
    \ row_fill = Math.min(row_total, capacity);\n            total += row_fill;\n\
    \        }\n        return total;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mr9911g.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            maxFill\
    \ += row.stream().filter(x -> x == 1).count();\n        }\n        return maxFill;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e6w8ytg.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : the wells\n        // * capacity\
    \ : the bucket capacity\n        long n = grid.size();\n        long m = grid.get(0).size();\n\
    \        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = 0; j < m; j++) {\n                max = Math.max(max, grid.get(i).get(j));\n\
    \            }\n        }\n        long lo = 0;\n        long hi = max;\n    \
    \    while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n         \
    \   if (canFill(grid, capacity, mid)) {\n                hi = mid;\n         \
    \   } else {\n                lo = mid + 1;\n            }\n        }\n      \
    \  return lo;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpau0096t0.java:53: error: cannot find symbol\n            if (canFill(grid,\
    \ capacity, mid)) {\n                ^\n  symbol:   method canFill(ArrayList<ArrayList<Long>>,long,long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity\
    \ <= 10\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * all wells have the same length\n        // * all buckets\
    \ have the same capacity\n        // * the wells are rectangular\n        // *\
    \ the wells are empty\n        // * the buckets are empty\n        // * the buckets\
    \ are full\n        // * the wells are full\n        // * the wells are partially\
    \ full\n        // * the buckets are partially full\n        // * the wells are\
    \ not full\n        // * the buckets are not full\n        // * the wells are\
    \ not empty\n        // * the buckets are not empty\n        // * the wells are\
    \ empty\n        // * the buckets are empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not empty\n        // * the wells are not empty\n\
    \        // * the buckets are not\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgu1xr2j6.java:92: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ each well with the bucket\n        // if the well is full, then move to the\
    \ next well\n        // if the well is not full, then fill it with the bucket\n\
    \        // if the well is full, then move to the next well\n        // if the\
    \ well is not full, then fill it with the bucket\n        // if the well is full,\
    \ then move to the next well\n        // if the well is not full, then fill it\
    \ with the bucket\n        // if the well is full, then move to the next well\n\
    \        // if the well is not full, then fill it with the bucket\n        //\
    \ if the well is full, then move to the next well\n        // if the well is not\
    \ full, then fill it with the bucket\n        // if the well is full, then move\
    \ to the next well\n        // if the well is not full, then fill it with the\
    \ bucket\n        // if the well is full, then move to the next well\n       \
    \ // if the well is not full, then fill it with the bucket\n        // if the\
    \ well is full, then move to the next well\n        // if the well is not full,\
    \ then fill it with the bucket\n        // if the well is full, then move to the\
    \ next well\n        // if the well is not full, then fill it with the bucket\n\
    \        // if the well is full, then move to the next well\n        // if the\
    \ well is not full, then fill it with the bucket\n        // if the well is full,\
    \ then move to the next well\n        // if the well is not full, then fill it\
    \ with the bucket\n        // if the well is full, then move to the next well\n\
    \        // if the well is not full, then fill it with the bucket\n        //\
    \ if the well is full, then move to the next well\n        // if the well is not\
    \ full, then fill it with the bucket\n        // if the well is full, then move\
    \ to the next well\n        // if the well is not full, then fill it with the\
    \ bucket\n        // if the well is full, then move to the next well\n       \
    \ // if the well is not full, then fill it with the bucket\n        // if the\
    \ well is full, then move to the next well\n        // if the well is not full,\
    \ then fill it with the bucket\n        // if the well is\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ue4n54h.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ all wells\n        long count = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            for (Long well : row) {\n                if (well == 1) {\n \
    \                   count++;\n                }\n            }\n        }\n  \
    \      return count * capacity;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2kb42opf.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // your\
    \ code goes here\n        long maxFill = 0;\n        for (ArrayList<Long> row\
    \ : grid) {\n            long sum = 0;\n            for (Long well : row) {\n\
    \                sum += well;\n            }\n            maxFill += sum / capacity;\n\
    \            if (sum % capacity != 0) {\n                maxFill++;\n        \
    \    }\n        }\n        return maxFill;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            for (Long\
    \ cell : row) {\n                if (cell > max) {\n                    max =\
    \ cell;\n                }\n            }\n        }\n        return max * capacity;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpps61pk0i.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoq7u4dim.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    fill++;\n                } else {\n                    maxFill\
    \ = Math.max(maxFill, fill);\n                    fill = 0;\n                }\n\
    \            }\n            maxFill = Math.max(maxFill, fill);\n        }\n  \
    \      return maxFill;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3sgdzlb.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the buckets with the wells\n        // we can use the max of each row to fill\
    \ the buckets\n        // we can then use the max of the buckets to fill the wells\n\
    \        // we can then repeat this process until we have no more water\n    \
    \    // we can then return the number of times we filled the buckets\n       \
    \ long count = 0;\n        while (true) {\n            long max = 0;\n       \
    \     for (ArrayList<Long> row : grid) {\n                max = Math.max(max,\
    \ Collections.max(row));\n            }\n            if (max == 0) {\n       \
    \         break;\n            }\n            for (ArrayList<Long> row : grid)\
    \ {\n                for (int i = 0; i < row.size(); i++) {\n                \
    \    long water = row.get(i);\n                    if (water > 0) {\n        \
    \                long fill = Math.min(water, capacity);\n                    \
    \    row.set(i, water - fill);\n                        capacity -= fill;\n  \
    \                  }\n                }\n            }\n            count++;\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code goes here\n        long max = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            long sum = 0;\n            for (Long cell : row) {\n        \
    \        sum += cell;\n            }\n            max = Math.max(max, sum);\n\
    \        }\n        return max * capacity;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqgwl1bkc.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    fill++;\n                } else {\n                    if\
    \ (fill > 0) {\n                        maxFill += fill / capacity;\n        \
    \                fill = fill % capacity;\n                    }\n            \
    \    }\n            }\n            if (fill > 0) {\n                maxFill +=\
    \ fill / capacity;\n                fill = fill % capacity;\n            }\n \
    \       }\n        return maxFill;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw679zylq.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptpss2v4x.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdcm2no42.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            for (long\
    \ cell : row) {\n                max = Math.max(max, cell);\n            }\n \
    \       }\n        return max * capacity;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54dwe4iv.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc5o7x3nk.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long val : row) {\n                sum += val;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiseronz2.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        return\
    \ grid.stream().mapToLong(row -> row.stream().reduce(0L, (a, b) -> a + b)).max().orElse(0);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5rjwqjb.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkb3d2ku.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg8b71dbm.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // We\
    \ can use the fact that the wells are all the same length to our advantage.\n\
    \        // We can fill the buckets from the first well, and then move them to\
    \ the next well.\n        // We can do this until we have filled the last well.\n\
    \        // We can use the fact that the wells are all the same length to our\
    \ advantage.\n        // We can fill the buckets from the first well, and then\
    \ move them to the next well.\n        // We can do this until we have filled\
    \ the last well.\n        // We can use the fact that the wells are all the same\
    \ length to our advantage.\n        // We can fill the buckets from the first\
    \ well, and then move them to the next well.\n        // We can do this until\
    \ we have filled the last well.\n        // We can use the fact that the wells\
    \ are all the same length to our advantage.\n        // We can fill the buckets\
    \ from the first well, and then move them to the next well.\n        // We can\
    \ do this until we have filled the last well.\n        // We can use the fact\
    \ that the wells are all the same length to our advantage.\n        // We can\
    \ fill the buckets from the first well, and then move them to the next well.\n\
    \        // We can do this until we have filled the last well.\n        // We\
    \ can use the fact that the wells are all the same length to our advantage.\n\
    \        // We can fill the buckets from the first well, and then move them to\
    \ the next well.\n        // We can do this until we have filled the last well.\n\
    \        // We can use the fact that the wells are all the same length to our\
    \ advantage.\n        // We can fill the buckets from the first well, and then\
    \ move them to the next well.\n        // We can do this until we have filled\
    \ the last well.\n        // We can use the fact that the wells are all the same\
    \ length to our advantage.\n        // We can fill the buckets from the first\
    \ well, and then move them to the next well.\n        // We can do this until\
    \ we have filled the last well.\n        // We can use the fact that the wells\
    \ are all the same length to our advantage.\n        // We can fill the buckets\
    \ from the first well, and then move them to the next well.\n        // We can\
    \ do this until we have filled the last well\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp17iy6o64.java:64: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            for (Long\
    \ cell : row) {\n                if (cell > max) {\n                    max =\
    \ cell;\n                }\n            }\n        }\n        return max * capacity;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp44f1ze4q.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long col : row) {\n                sum += col;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdy6a3tsv.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long val : row) {\n                sum += val;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc5vkxmv7.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplgf56zsl.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        long max = 0;\n        for (ArrayList<Long> row : grid) {\n\
    \            long sum = 0;\n            for (Long cell : row) {\n            \
    \    sum += cell;\n            }\n            max = Math.max(max, sum);\n    \
    \    }\n        return max;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeh_pme9z.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpskdwpx54.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph36jcq0v.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpicaxvwep.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    \        // * bucket_capacity : 1\n        // * Output: 6\n        // * Example\
    \ 2:\n        // * Input: \n        // * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n        // * bucket_capacity : 2\n        // * Output: 5\n     \
    \   // * Example 3:\n        // * Input: \n        // * grid : [[0,0,0], [0,0,0]]\n\
    \        // * bucket_capacity : 5\n        // * Output: 0\n        // * Constraints:\n\
    \        // * all wells have the same length\n        // * 1 <= grid.length <=\
    \ 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n        // * grid[i][j] ->\
    \ 0 | 1\n        // * 1 <= capacity <= 10\n        // * grid : [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]]\n        // * bucket_capacity : 1\n        // * Output: 6\n     \
    \   // * Example 2:\n        // * Input: \n        // * grid : [[0,0,1,1], [0,0,0,0],\
    \ [1,1,1,1], [0,1,1,1]]\n        // * bucket_capacity : 2\n        // * Output:\
    \ 5\n        // * Example 3:\n        // * Input: \n        // * grid : [[0,0,0],\
    \ [0,0,0]]\n        // * bucket_capacity : 5\n        // * Output: 0\n       \
    \ // * Constraints:\n        // * all wells have the same length\n        // *\
    \ 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n     \
    \   // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n        long count\
    \ =\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa04cqrmm.java:78: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppz8gt_s8.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowMax\
    \ = 0;\n            for (Long cell : row) {\n                rowMax += cell;\n\
    \            }\n            max = Math.max(max, rowMax);\n        }\n        return\
    \ max;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8oeha__b.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (long well : row) {\n                fill += well;\n \
    \           }\n            if (fill > maxFill) {\n                maxFill = fill;\n\
    \            }\n        }\n        return maxFill;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuiuvue33.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long column : row) {\n                rowFill += column;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0w3co8uh.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (long cell : row) {\n                fill += cell;\n \
    \           }\n            maxFill = Math.max(maxFill, fill);\n        }\n   \
    \     return maxFill;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27d8yl__.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            for (Long\
    \ cell : row) {\n                if (cell > max) {\n                    max =\
    \ cell;\n                }\n            }\n        }\n        return max * capacity;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuca2a53m.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with water, and return the number of times you need to lower the buckets.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the well is empty.\n\
    \        // * You can only lower the buckets into a well if the\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsuugcssf.java:64: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ each well with capacity\n        // then fill each well with the difference\
    \ between capacity and the number of units of water\n        // return the sum\
    \ of the number of times each well was filled\n        long sum = 0;\n       \
    \ for (ArrayList<Long> row : grid) {\n            for (long well : row) {\n  \
    \              sum += capacity - well;\n            }\n        }\n        return\
    \ sum;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpodm8ah0c.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk2xzq7vm.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the buckets\n        // lower the buckets\n        // repeat until all wells\
    \ are empty\n        long maxFill = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            long fill = 0;\n            for (Long well : row) {\n       \
    \         fill += well;\n            }\n            if (fill > maxFill) {\n  \
    \              maxFill = fill;\n            }\n        }\n        return maxFill;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi9ikzjqa.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long val : row) {\n                sum += val;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mxzzwzn.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfqr2d9ws.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // your\
    \ code goes here\n        long max = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            for (Long well : row) {\n                if (well > max) {\n\
    \                    max = well;\n                }\n            }\n        }\n\
    \        return max * capacity;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfp923err.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpel71e6gb.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ltnxdj7.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // your\
    \ code goes here\n        long maxFill = 0;\n        for (ArrayList<Long> row\
    \ : grid) {\n            long rowFill = 0;\n            for (Long well : row)\
    \ {\n                rowFill += well;\n            }\n            maxFill = Math.max(maxFill,\
    \ rowFill);\n        }\n        return maxFill * capacity;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2v92p3_b.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphsc0ehte.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ result = 0;\n        for (ArrayList<Long> row : grid) {\n            long row_sum\
    \ = row.stream().reduce(0L, (a, b) -> a + b);\n            result += row_sum /\
    \ capacity;\n            if (row_sum % capacity != 0) {\n                result++;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int\
    \ j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ > max) {\n                    max = grid.get(i).get(j);\n                }\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95mjg790.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : the wells\n        // * capacity\
    \ : the bucket capacity\n        // Example:\n        // grid : [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]]\n        // capacity : 1\n        // Output: 6\n        // Explanation:\n\
    \        // 1. [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        // 2. [[0,0,1,0], [0,1,0,0],\
    \ [1,1,0,1]]\n        // 3. [[0,0,1,0], [0,1,0,0], [1,0,0,1]]\n        // 4. [[0,0,1,0],\
    \ [0,0,0,0], [1,0,0,1]]\n        // 5. [[0,0,1,0], [0,0,0,0], [0,0,0,1]]\n   \
    \     // 6. [[0,0,0,0], [0,0,0,0], [0,0,0,1]]\n        // 7. [[0,0,0,0], [0,0,0,0],\
    \ [0,0,0,0]]\n        // The number of times you need to lower the buckets is\
    \ 6.\n        long count = 0;\n        long max = 0;\n        for (int i = 0;\
    \ i < grid.size(); i++) {\n            max = 0;\n            for (int j = 0; j\
    \ < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) > max)\
    \ {\n                    max = grid.get(i).get(j);\n                }\n      \
    \      }\n            if (max > 0) {\n                count += max;\n        \
    \        for (int j = 0; j < grid.get(i).size(); j++) {\n                    grid.get(i).set(j,\
    \ max - grid.get(i).get(j));\n                }\n            }\n        }\n  \
    \      return count;\n   \n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprp__rbqh.java:74)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.ceil((double) rowFill / capacity);\n\
    \        }\n        return maxFill;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_t_j1v0c.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    rowFill += capacity;\n                }\n            }\n\
    \            maxFill = Math.max(maxFill, rowFill);\n        }\n        return\
    \ maxFill;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprr36k4u.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ each well with capacity\n        // return the number of times you need to lower\
    \ the buckets\n        // 0 <= grid[i][j] <= capacity\n        // grid[i][j] =\
    \ 0 | 1\n        // grid[i][j] = 0 -> no water\n        // grid[i][j] = 1 -> water\n\
    \        // grid[i][j] = capacity -> full\n        // grid[i][j] = 0 -> no water\n\
    \        // grid[i][j] = 1 -> water\n        // grid[i][j] = capacity -> full\n\
    \        // grid[i][j] = 0 -> no water\n        // grid[i][j] = 1 -> water\n \
    \       // grid[i][j] = capacity -> full\n        // grid[i][j] = 0 -> no water\n\
    \        // grid[i][j] = 1 -> water\n        // grid[i][j] = capacity -> full\n\
    \        // grid[i][j] = 0 -> no water\n        // grid[i][j] = 1 -> water\n \
    \       // grid[i][j] = capacity -> full\n        // grid[i][j] = 0 -> no water\n\
    \        // grid[i][j] = 1 -> water\n        // grid[i][j] = capacity -> full\n\
    \        // grid[i][j] = 0 -> no water\n        // grid[i][j] = 1 -> water\n \
    \       // grid[i][j] = capacity -> full\n        // grid[i][j] = 0 -> no water\n\
    \        // grid[i][j] = 1 -> water\n        // grid[i][j] = capacity -> full\n\
    \        // grid[i][j] = 0 -> no water\n        // grid[i][j] = 1 -> water\n \
    \       // grid[i][j] = capacity -> full\n        // grid[i][j] = 0 -> no water\n\
    \        // grid[i][j] = 1 -> water\n        // grid[i][j] = capacity -> full\n\
    \        // grid[i][j] = 0 -> no water\n        // grid[i][j] = 1 -> water\n \
    \       // grid[i][j] = capacity -> full\n        // grid[i][j] = 0 -> no water\n\
    \        // grid[i][j] =\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8q96zqr.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long water : row) {\n                sum += water;\n  \
    \          }\n            max = Math.max(max, sum);\n        }\n        return\
    \ max;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpouej_oy9.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pza93oz.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            for (Long\
    \ cell : row) {\n                max = Math.max(max, cell);\n            }\n \
    \       }\n        return max * capacity;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwiintfxl.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long val : row) {\n                sum += val;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcu6hby12.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpml4jquen.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long value : row) {\n                sum += value;\n  \
    \          }\n            max = Math.max(max, sum);\n        }\n        return\
    \ max;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8te9l0rw.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxd5fg08.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpewr24qvr.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long l : row) {\n                sum += l;\n          \
    \  }\n            max = Math.max(max, sum);\n        }\n        return max;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk8sb_6_6.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppba_yjus.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4iq9sgdx.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the wells with the buckets\n        // return the number of times you need to\
    \ lower the buckets\n        // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n   \
    \     // bucket_capacity : 1\n        // Output: 6\n        // Example 2:\n  \
    \      // Input: \n        // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\
    \        // bucket_capacity : 2\n        // Output: 5\n        // Example 3:\n\
    \        // Input: \n        // grid : [[0,0,0], [0,0,0]]\n        // bucket_capacity\
    \ : 5\n        // Output: 0\n        // Constraints:\n        // * all wells have\
    \ the same length\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n\
    \        long count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n  \
    \          ArrayList<Long> row = grid.get(i);\n            for (int j = 0; j <\
    \ row.size(); j++) {\n                long cell = row.get(j);\n              \
    \  if (cell > 0) {\n                    long diff = capacity - cell;\n       \
    \             if (diff > 0) {\n                        count += diff;\n      \
    \                  row.set(j, capacity);\n                    }\n            \
    \    }\n            }\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphu4cehae.java:76)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    rowFill += capacity;\n                }\n            }\n\
    \            maxFill = Math.max(maxFill, rowFill);\n        }\n        return\
    \ maxFill;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5k4yo7z.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // We\
    \ can use a greedy algorithm to solve this problem.\n        // We can start by\
    \ filling the first row of wells.\n        // Then, we can fill the second row\
    \ of wells, and so on.\n        // We can use a priority queue to keep track of\
    \ the wells that need to be filled.\n        // We can use a priority queue to\
    \ keep track of the wells that need to be filled.\n        // We can use a priority\
    \ queue to keep track of the wells that need to be filled.\n        // We can\
    \ use a priority queue to keep track of the wells that need to be filled.\n  \
    \      // We can use a priority queue to keep track of the wells that need to\
    \ be filled.\n        // We can use a priority queue to keep track of the wells\
    \ that need to be filled.\n        // We can use a priority queue to keep track\
    \ of the wells that need to be filled.\n        // We can use a priority queue\
    \ to keep track of the wells that need to be filled.\n        // We can use a\
    \ priority queue to keep track of the wells that need to be filled.\n        //\
    \ We can use a priority queue to keep track of the wells that need to be filled.\n\
    \        // We can use a priority queue to keep track of the wells that need to\
    \ be filled.\n        // We can use a priority queue to keep track of the wells\
    \ that need to be filled.\n        // We can use a priority queue to keep track\
    \ of the wells that need to be filled.\n        // We can use a priority queue\
    \ to keep track of the wells that need to be filled.\n        // We can use a\
    \ priority queue to keep track of the wells that need to be filled.\n        //\
    \ We can use a priority queue to keep track of the wells that need to be filled.\n\
    \        // We can use a priority queue to keep track of the wells that need to\
    \ be filled.\n        // We can use a priority queue to keep track of the wells\
    \ that need to be filled.\n        // We can use a priority queue to keep track\
    \ of the wells that need to be filled.\n        // We can use a priority queue\
    \ to keep track of the wells that need to be filled.\n        // We can use a\
    \ priority queue to keep track of the wells that need to be filled.\n        //\
    \ We can use a priority queue to keep track of the wells that need to be filled.\n\
    \        // We\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7yg9o76e.java:63: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptx7rjssi.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67spnmbc.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long col : row) {\n                sum += col;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplgudunxz.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0xw8i486.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets until they are all empty.\n        // Return the\
    \ number of times you need to lower the buckets.\n        // * grid[i][j] -> 0\
    \ | 1\n        // * 1 <= capacity <= 10\n        // * 1 <= grid.length <= 10^2\n\
    \        // * 1 <= grid[:,1].length <= 10^2\n        // * all wells have the same\
    \ length\n        // * all wells have the same length\n        // * all wells\
    \ have the same length\n        // * all wells have the same length\n        //\
    \ * all wells have the same length\n        // * all wells have the same length\n\
    \        // * all wells have the same length\n        // * all wells have the\
    \ same length\n        // * all wells have the same length\n        // * all wells\
    \ have the same length\n        // * all wells have the same length\n        //\
    \ * all wells have the same length\n        // * all wells have the same length\n\
    \        // * all wells have the same length\n        // * all wells have the\
    \ same length\n        // * all wells have the same length\n        // * all wells\
    \ have the same length\n        // * all wells have the same length\n        //\
    \ * all wells have the same length\n        // * all wells have the same length\n\
    \        // * all wells have the same length\n        // * all wells have the\
    \ same length\n        // * all wells have the same length\n        // * all wells\
    \ have the same length\n        // * all wells have the same length\n        //\
    \ * all wells have the same length\n        // * all wells have the same length\n\
    \        // * all wells have the same length\n        // * all wells have the\
    \ same length\n        // * all wells have the same length\n        // * all wells\
    \ have the same length\n        // * all wells have the same length\n        //\
    \ * all wells have the same length\n        // * all wells have the same length\n\
    \        // * all wells have the same length\n        // * all wells have the\
    \ same length\n        // * all wells have the same length\n        // * all wells\
    \ have the same length\n        // * all wells have the same length\n        //\
    \ * all wells have the same length\n        // * all wells have the same length\n\
    \        // * all wells have the same length\n        // * all wells have the\
    \ same length\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpayw12llm.java:86: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvex7xph7.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua4klggd.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    rowFill += capacity;\n                }\n            }\n\
    \            maxFill = Math.max(maxFill, rowFill);\n        }\n        return\
    \ maxFill;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotub3rjl.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        return\
    \ grid.stream().mapToLong(row -> {\n            long max = row.stream().max(Long::compare).get();\n\
    \            return max > capacity ? capacity : max;\n        }).sum();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx0u708cg.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long value : row) {\n                sum += value;\n  \
    \          }\n            max = Math.max(max, sum);\n        }\n        return\
    \ max;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpypwvjcly.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32zj8dv5.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for\
    \ (int j = 0; j < grid.get(i).size(); j++) {\n                maxFill += grid.get(i).get(j);\n\
    \            }\n        }\n        return maxFill;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdoo3pk5.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the wells with the buckets\n        // if the capacity of the bucket is greater\
    \ than the number of units in the well,\n        // then fill the well with the\
    \ bucket\n        // otherwise, fill the bucket with the well\n        // return\
    \ the number of times the bucket was lowered\n        long count = 0;\n      \
    \  for (ArrayList<Long> row : grid) {\n            for (Long well : row) {\n \
    \               if (well < capacity) {\n                    count += well;\n \
    \               } else {\n                    count += capacity;\n           \
    \     }\n            }\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3j2lqjti.java:57)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_l1xchl.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets until they are full.\n        // Return the number\
    \ of times you need to lower the buckets.\n        // * grid : the grid of wells\n\
    \        // * capacity : the capacity of the buckets\n        // <returns>the\
    \ number of times you need to lower the buckets</returns>\n        long result\
    \ = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum = 0;\n\
    \            for (Long value : row) {\n                sum += value;\n       \
    \     }\n            result += sum / capacity;\n            if (sum % capacity\
    \ > 0) {\n                result++;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5f1pheop.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * all wells have the same length\n       \
    \ // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n\
    \        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n        //\
    \ Examples:\n        // maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) = 6\n  \
    \      // maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) = 5\n     \
    \   // maxFill([[0,0,0], [0,0,0]], 5) = 0\n        // * all wells have the same\
    \ length\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n\
    \        // * all wells have the same length\n        // * 1 <= grid.length <=\
    \ 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n        // * grid[i][j] ->\
    \ 0 | 1\n        // * 1 <= capacity <= 10\n        // * all wells have the same\
    \ length\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n\
    \        // * all wells have the same length\n        // * 1 <= grid.length <=\
    \ 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n        // * grid[i][j] ->\
    \ 0 | 1\n        // * 1 <= capacity <= 10\n        // * all wells have the same\
    \ length\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ozwy6x2.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pb8hz0a.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // We\
    \ can solve this problem by using a greedy algorithm.\n        // We can start\
    \ by filling the first well, then the second, and so on.\n        // We can fill\
    \ the first well by lowering the bucket capacity times.\n        // We can fill\
    \ the second well by lowering the bucket capacity - 1 times.\n        // We can\
    \ fill the third well by lowering the bucket capacity - 2 times.\n        // We\
    \ can fill the fourth well by lowering the bucket capacity - 3 times.\n      \
    \  // We can fill the fifth well by lowering the bucket capacity - 4 times.\n\
    \        // We can fill the sixth well by lowering the bucket capacity - 5 times.\n\
    \        // We can fill the seventh well by lowering the bucket capacity - 6 times.\n\
    \        // We can fill the eighth well by lowering the bucket capacity - 7 times.\n\
    \        // We can fill the ninth well by lowering the bucket capacity - 8 times.\n\
    \        // We can fill the tenth well by lowering the bucket capacity - 9 times.\n\
    \        // We can fill the eleventh well by lowering the bucket capacity - 10\
    \ times.\n        // We can fill the twelfth well by lowering the bucket capacity\
    \ - 11 times.\n        // We can fill the thirteenth well by lowering the bucket\
    \ capacity - 12 times.\n        // We can fill the fourteenth well by lowering\
    \ the bucket capacity - 13 times.\n        // We can fill the fifteenth well by\
    \ lowering the bucket capacity - 14 times.\n        // We can fill the sixteenth\
    \ well by lowering the bucket capacity - 15 times.\n        // We can fill the\
    \ seventeenth well by lowering the bucket capacity - 16 times.\n        // We\
    \ can fill the eighteenth well by lowering the bucket capacity - 17 times.\n \
    \       // We can fill the nineteenth well by lowering the bucket capacity - 18\
    \ times.\n        // We can fill the twentieth well by lowering the bucket capacity\
    \ - 19 times.\n        // We can fill the twenty-first well by lowering the bucket\
    \ capacity - 20 times.\n        // We can fill the twenty-second well by lowering\
    \ the bucket capacity - 21 times.\n        // We can fill the twenty-third well\
    \ by lowering the bucket capacity - 22 times.\n        // We can fill the twenty-fourth\
    \ well by lowering the bucket capacity - 23 times.\n        // We can fill the\
    \ twenty-fifth well by lowering the bucket capacity - 24 times.\n        // We\
    \ can fill the twenty-sixth well\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2y4p0dkg.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4zk5y9z.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxh_1p7t6.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long value : row) {\n                sum += value;\n  \
    \          }\n            max = Math.max(max, sum);\n        }\n        return\
    \ max;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp05td2fon.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    rowFill += capacity;\n                }\n            }\n\
    \            maxFill = Math.max(maxFill, rowFill);\n        }\n        return\
    \ maxFill;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp234dz404.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    \        // * bucket_capacity : 1\n        // * Output: 6\n        // * Example\
    \ 2:\n        // * Input: \n        // * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n        // * bucket_capacity : 2\n        // * Output: 5\n     \
    \   // * Example 3:\n        // * Input: \n        // * grid : [[0,0,0], [0,0,0]]\n\
    \        // * bucket_capacity : 5\n        // * Output: 0\n        // * Constraints:\n\
    \        // * all wells have the same length\n        // * 1 <= grid.length <=\
    \ 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n        // * grid[i][j] ->\
    \ 0 | 1\n        // * 1 <= capacity <= 10\n        long count = 0;\n        for\
    \ (ArrayList<Long> row : grid) {\n            long sum = 0;\n            for (long\
    \ cell : row) {\n                sum += cell;\n            }\n            count\
    \ += sum / capacity;\n            if (sum % capacity > 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : the grid of wells\n        // * capacity\
    \ : the capacity of the buckets\n        // Constraints:\n        // * all wells\
    \ have the same length\n        // * 1 <= grid.length <= 10^2\n        // * 1\
    \ <= grid[:,1].length <= 10^2\n        // * grid[i][j] -> 0 | 1\n        // *\
    \ 1 <= capacity <= 10\n        long n = grid.size();\n        long m = grid.get(0).size();\n\
    \        long count = 0;\n        for (long i = 0; i < n; i++) {\n           \
    \ long sum = 0;\n            for (long j = 0; j < m; j++) {\n                sum\
    \ += grid.get((int)i).get((int)j);\n            }\n            count += sum /\
    \ capacity;\n            if (sum % capacity > 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            maxFill\
    \ += row.stream().mapToLong(Long::longValue).sum();\n        }\n        return\
    \ maxFill / capacity;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbaozpd5c.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tpmbmu_.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long cell : row) {\n                if (cell == 1) {\n\
    \                    fill++;\n                }\n            }\n            maxFill\
    \ = Math.max(maxFill, fill);\n        }\n        return maxFill;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvmy26_yv.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity\
    \ <= 10\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * all wells have the same length\n        // Examples:\n\
    \        // maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) -> 6\n        // maxFill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) -> 5\n        // maxFill([[0,0,0], [0,0,0]],\
    \ 5) -> 0\n        // * The number of times you need to lower the buckets is the\
    \ sum of the number of times you need to lower the buckets in each row.\n    \
    \    // * The number of times you need to lower the buckets in a row is the number\
    \ of 1s in the row divided by the capacity, rounded up.\n        // * The number\
    \ of 1s in a row is the sum of the elements in the row.\n        // * The sum\
    \ of the elements in a row is the sum of the elements in the row.\n        //\
    \ * The sum of the elements in a row is the sum of the elements in the row.\n\
    \        // * The sum of the elements in a row is the sum of the elements in the\
    \ row.\n        // * The sum of the elements in a row is the sum of the elements\
    \ in the row.\n        // * The sum of the elements in a row is the sum of the\
    \ elements in the row.\n        // * The sum of the elements in a row is the sum\
    \ of the elements in the row.\n        // * The sum of the elements in a row is\
    \ the sum of the elements in the row.\n        // * The sum of the elements in\
    \ a row is the sum of the elements in the row.\n        // * The sum of the elements\
    \ in a row is the sum of the elements in the row.\n        // * The sum of the\
    \ elements in a row is the sum of the elements in the row.\n       \n    }\n \
    \   public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwj7jmr8d.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3xp90u3t.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets\n        // Return the number of times you need to\
    \ lower the buckets\n        // Return 0 if the wells are already empty\n    \
    \    // Return -1 if the wells cannot be emptied\n        // Example 1:\n    \
    \    // Input: \n        // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n       \
    \ // bucket_capacity : 1\n        // Output: 6\n        // Example 2:\n      \
    \  // Input: \n        // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\
    \        // bucket_capacity : 2\n        // Output: 5\n        // Example 3:\n\
    \        // Input: \n        // grid : [[0,0,0], [0,0,0]]\n        // bucket_capacity\
    \ : 5\n        // Output: 0\n        // Constraints:\n        // * all wells have\
    \ the same length\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n\
    \        long result = 0;\n        // Your code goes here\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6mxk0e2j.java:68)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0f96uup.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeuvdidyg.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgbn3t9m1.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long c : row) {\n                sum += c;\n          \
    \  }\n            max = Math.max(max, sum);\n        }\n        return max;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_pefyeh.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo89jaxsl.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6aefzwc.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ all wells to capacity\n        long count = 0;\n        for (int i = 0; i <\
    \ grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++)\
    \ {\n                if (grid.get(i).get(j) < capacity) {\n                  \
    \  count += capacity - grid.get(i).get(j);\n                    grid.get(i).set(j,\
    \ capacity);\n                }\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe2i3ghxc.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6gjt_3i.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qvvf05k.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    rowFill += capacity;\n                }\n            }\n\
    \            maxFill = Math.max(maxFill, rowFill);\n        }\n        return\
    \ maxFill;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_q1dplba.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the wells with the buckets\n        // return the number of times you need to\
    \ lower the buckets\n        // for each well, fill it with the bucket\n     \
    \   // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the wells with the bucket\n        // for each column,\
    \ fill the wells with the bucket\n        // for each row, fill the wells with\
    \ the bucket\n        // for each column, fill the wells with the bucket\n   \
    \     // for each row, fill the\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyoktn3ch.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long cell : row) {\n                if (cell == 1) {\n\
    \                    fill++;\n                }\n            }\n            maxFill\
    \ = Math.max(maxFill, fill);\n        }\n        return maxFill;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2khmoo0.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8acwkki.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long cell : row) {\n                rowFill += cell;\n\
    \            }\n            maxFill = Math.max(maxFill, rowFill);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp216j6__w.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpplgch65z.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi568q3eh.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzlxprv4.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk64rhwnr.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // your\
    \ code goes here\n        long maxFill = 0;\n        for (ArrayList<Long> row\
    \ : grid) {\n            long fill = 0;\n            for (Long well : row) {\n\
    \                if (well == 1) {\n                    fill++;\n             \
    \   }\n            }\n            maxFill = Math.max(maxFill, fill);\n       \
    \ }\n        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4bmf8rb.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max_fill = 0;\n        for (ArrayList<Long> row : grid) {\n            long\
    \ fill = 0;\n            for (Long well : row) {\n                if (well ==\
    \ 1) {\n                    fill++;\n                }\n            }\n      \
    \      max_fill = Math.max(max_fill, fill);\n        }\n        return max_fill;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc91xx_4x.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kjva6ff.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        long maxFill = 0;\n        for (ArrayList<Long> row : grid)\
    \ {\n            long rowFill = 0;\n            for (Long cell : row) {\n    \
    \            if (cell == 1) {\n                    rowFill += capacity;\n    \
    \            }\n            }\n            maxFill = Math.max(maxFill, rowFill);\n\
    \        }\n        return maxFill;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpul5t8wqt.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the wells\n        // for each row\n        // for each well\n        // if\
    \ the well is not full\n        // fill the well\n        // if the well is full\n\
    \        // move to the next well\n        // if the well is the last well\n \
    \       // move to the next row\n        // if the row is the last row\n     \
    \   // return the number of fills\n        long fills = 0;\n        for (int i\
    \ = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size();\
    \ j++) {\n                if (grid.get(i).get(j) < capacity) {\n             \
    \       fills++;\n                    grid.get(i).set(j, grid.get(i).get(j) +\
    \ 1);\n                }\n            }\n        }\n        return fills;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha_hfwvr.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            maxFill\
    \ += row.stream().filter(x -> x == 1).count();\n        }\n        return maxFill;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9th0678.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tuy62h2.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ total = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowTotal\
    \ = 0;\n            for (Long cell : row) {\n                rowTotal += cell;\n\
    \            }\n            total += rowTotal / capacity;\n            if (rowTotal\
    \ % capacity != 0) {\n                total++;\n            }\n        }\n   \
    \     return total;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the bucket capacity\n        // until all wells are filled.\n\
    \        // Return the number of times the bucket\n        // was lowered.\n \
    \       long count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n   \
    \         for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ < capacity) {\n                    count += capacity - grid.get(i).get(j);\n\
    \                    grid.get(i).set(j, capacity);\n                }\n      \
    \      }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3w04wmke.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkv47n9sr.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfxo27cy4.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_k_wkpwf.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwczm4rz.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                rowFill += well;\n\
    \            }\n            maxFill += Math.min(rowFill, capacity);\n        }\n\
    \        return maxFill;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhzsqqmt.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long val : row) {\n                sum += val;\n      \
    \      }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr946531b.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : a rectangular grid of wells\n   \
    \     // * capacity : the capacity of the buckets\n        // Example:\n     \
    \   // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        // capacity : 1\n   \
    \     // Output: 6\n        long count = 0;\n        for (ArrayList<Long> row\
    \ : grid) {\n            long sum = 0;\n            for (long well : row) {\n\
    \                sum += well;\n            }\n            count += sum / capacity;\n\
    \            if (sum % capacity != 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets.\n        // Return the number of times you need\
    \ to lower the buckets.\n        // * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    \        // * bucket_capacity : 1\n        // * Output: 6\n        // * Example\
    \ 2:\n        // * Input: \n        // * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n        // * bucket_capacity : 2\n        // * Output: 5\n     \
    \   // * Example 3:\n        // * Input: \n        // * grid : [[0,0,0], [0,0,0]]\n\
    \        // * bucket_capacity : 5\n        // * Output: 0\n        // * Constraints:\n\
    \        // * all wells have the same length\n        // * 1 <= grid.length <=\
    \ 10^2\n        // * 1 <= grid[:,1].length <= 10^2\n        // * grid[i][j] ->\
    \ 0 | 1\n        // * 1 <= capacity <= 10\n        long count = 0;\n        for\
    \ (ArrayList<Long> row : grid) {\n            long sum = 0;\n            for (long\
    \ cell : row) {\n                sum += cell;\n            }\n            count\
    \ += sum / capacity;\n            if (sum % capacity > 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long fill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    fill++;\n                } else {\n                    maxFill\
    \ = Math.max(maxFill, fill);\n                    fill = 0;\n                }\n\
    \            }\n            maxFill = Math.max(maxFill, fill);\n        }\n  \
    \      return maxFill;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4m57j9m.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ the wells with the buckets\n        // return the number of times the buckets\
    \ were lowered\n        // grid[i][j] -> 0 | 1\n        // capacity -> 1..10\n\
    \        // grid.length -> 1..100\n        // grid[0].length -> 1..100\n     \
    \   // grid[i].length -> grid[0].length\n        // grid[i][j] -> 0 | 1\n    \
    \    // capacity -> 1..10\n        // grid.length -> 1..100\n        // grid[0].length\
    \ -> 1..100\n        // grid[i].length -> grid[0].length\n        // grid[i][j]\
    \ -> 0 | 1\n        // capacity -> 1..10\n        // grid.length -> 1..100\n \
    \       // grid[0].length -> 1..100\n        // grid[i].length -> grid[0].length\n\
    \        // grid[i][j] -> 0 | 1\n        // capacity -> 1..10\n        // grid.length\
    \ -> 1..100\n        // grid[0].length -> 1..100\n        // grid[i].length ->\
    \ grid[0].length\n        // grid[i][j] -> 0 | 1\n        // capacity -> 1..10\n\
    \        // grid.length -> 1..100\n        // grid[0].length -> 1..100\n     \
    \   // grid[i].length -> grid[0].length\n        // grid[i][j] -> 0 | 1\n    \
    \    // capacity -> 1..10\n        // grid.length -> 1..100\n        // grid[0].length\
    \ -> 1..100\n        // grid[i].length -> grid[0].length\n        // grid[i][j]\
    \ -> 0 | 1\n        // capacity -> 1..10\n        // grid.length -> 1..100\n \
    \       // grid[0].length -> 1..100\n        // grid[i].length -> grid[0].length\n\
    \        // grid[i][j] -> 0 | 1\n        // capacity -> 1..10\n        // grid.length\
    \ -> 1..100\n        // grid[0].length -> 1..100\n        // grid[i].length ->\
    \ grid[0].length\n        // grid[i][j] -> 0 | 1\n        // capacity -> 1..10\n\
    \        // grid.length -> 1..100\n        // grid\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphr6kaw51.java:83: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzegel9r.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max\
    \ * capacity;\n\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpufsx0bhw.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long\
    \ max = 0;\n        for (ArrayList<Long> row : grid) {\n            long sum =\
    \ 0;\n            for (Long cell : row) {\n                sum += cell;\n    \
    \        }\n            max = Math.max(max, sum);\n        }\n        return max;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qq9z16k.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with the buckets until the wells are empty.\n        // Return the\
    \ number of times you need to lower the buckets.\n        // * grid[i][j] -> 0\
    \ | 1\n        // * 1 <= capacity <= 10\n        // * 1 <= grid.length <= 10^2\n\
    \        // * 1 <= grid[:,1].length <= 10^2\n        // * all wells have the same\
    \ length\n        // * all wells have the same capacity\n        // * all wells\
    \ have the same depth\n        // * all wells have the same width\n        //\
    \ * all wells have the same height\n        // * all wells have the same volume\n\
    \        // * all wells have the same area\n        // * all wells have the same\
    \ perimeter\n        // * all wells have the same length\n        // * all wells\
    \ have the same width\n        // * all wells have the same height\n        //\
    \ * all wells have the same volume\n        // * all wells have the same area\n\
    \        // * all wells have the same perimeter\n        // * all wells have the\
    \ same length\n        // * all wells have the same width\n        // * all wells\
    \ have the same height\n        // * all wells have the same volume\n        //\
    \ * all wells have the same area\n        // * all wells have the same perimeter\n\
    \        // * all wells have the same length\n        // * all wells have the\
    \ same width\n        // * all wells have the same height\n        // * all wells\
    \ have the same volume\n        // * all wells have the same area\n        //\
    \ * all wells have the same perimeter\n        // * all wells have the same length\n\
    \        // * all wells have the same width\n        // * all wells have the same\
    \ height\n        // * all wells have the same volume\n        // * all wells\
    \ have the same area\n        // * all wells have the same perimeter\n       \
    \ // * all wells have the same length\n        // * all wells have the same width\n\
    \        // * all wells have the same height\n        // * all wells have the\
    \ same volume\n        // * all wells have the same area\n        // * all wells\
    \ have the same perimeter\n        // * all wells have the same length\n     \
    \   // * all wells have the same width\n        // * all wells have the same height\n\
    \        // * all wells have the same volume\n        // * all wells have the\
    \ same area\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp090t50ss.java:86: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // Fill\
    \ the wells with water.\n        // Return the number of times you need to lower\
    \ the buckets.\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <=\
    \ 10\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * all wells have the same length\n        // Example 1:\n\
    \        // Input: \n        // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n   \
    \     // bucket_capacity : 1\n        // Output: 6\n        // Example 2:\n  \
    \      // Input: \n        // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\
    \        // bucket_capacity : 2\n        // Output: 5\n        // Example 3:\n\
    \        // Input: \n        // grid : [[0,0,0], [0,0,0]]\n        // bucket_capacity\
    \ : 5\n        // Output: 0\n        // Constraints:\n        long max = 0;\n\
    \        for (ArrayList<Long> row : grid) {\n            for (Long cell : row)\
    \ {\n                if (cell > max) {\n                    max = cell;\n    \
    \            }\n            }\n        }\n        long count = 0;\n        for\
    \ (long i = 0; i < max; i++) {\n            for (ArrayList<Long> row : grid) {\n\
    \                for (Long cell : row) {\n                    if (cell > 0) {\n\
    \                        cell--;\n                        count++;\n         \
    \           }\n                }\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new\
    \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxskarxf8.java:84)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid\
    \ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output:\
    \ 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static\
    \ long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        // fill\
    \ each well with the bucket\n        // until the bucket is empty\n        //\
    \ or the well is full\n        // then move to the next well\n        // if the\
    \ bucket is empty, refill it\n        // and continue\n        // if the bucket\
    \ is not empty,\n        // and the well is full, continue\n        // if the\
    \ bucket is not empty,\n        // and the well is not full,\n        // fill\
    \ the well with the bucket\n        // until the bucket is empty\n        // or\
    \ the well is full\n        // then move to the next well\n        // if the bucket\
    \ is empty, refill it\n        // and continue\n        // if the bucket is not\
    \ empty,\n        // and the well is full, continue\n        // if the bucket\
    \ is not empty,\n        // and the well is not full,\n        // fill the well\
    \ with the bucket\n        // until the bucket is empty\n        // or the well\
    \ is full\n        // then move to the next well\n        // if the bucket is\
    \ empty, refill it\n        // and continue\n        // if the bucket is not empty,\n\
    \        // and the well is full, continue\n        // if the bucket is not empty,\n\
    \        // and the well is not full,\n        // fill the well with the bucket\n\
    \        // until the bucket is empty\n        // or the well is full\n      \
    \  // then move to the next well\n        // if the bucket is empty, refill it\n\
    \        // and continue\n        // if the bucket is not empty,\n        // and\
    \ the well is full, continue\n        // if the bucket is not empty,\n       \
    \ // and the well is not full,\n        // fill the well with the bucket\n   \
    \     // until the bucket is empty\n        // or the well is full\n        //\
    \ then move to the next well\n        // if the bucket is empty, refill it\n \
    \       // and continue\n        // if the bucket is not empty,\n        // and\
    \ the well is full, continue\n        // if the bucket is not empty,\n       \
    \ // and the well is not full,\n        // fill the well with the bucket\n   \
    \     // until the bucket is empty\n        // or the well is full\n        //\
    \ then move to the next well\n        // if the bucket is empty, refill it\n \
    \       // and continue\n        // if the bucket is not empty,\n       \n   \
    \ }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\
    \ == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
    \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
    \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
    \ == (2l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_4jnn84.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
