name: HumanEval_116_sort_array
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> res = new ArrayList<Long>();\n        ArrayList<Long> neg\
    \ = new ArrayList<Long>();\n        ArrayList<Long> pos = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            if (l < 0) {\n                neg.add(l);\n\
    \            } else {\n                pos.add(l);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        for (Long\
    \ l : neg) {\n            res.add(l);\n        }\n        for (Long l : pos) {\n\
    \            res.add(l);\n        }\n        return res;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt0u4whik.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> positive\
    \ = new ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i >= 0) {\n                positive.add(i);\n\
    \            } else {\n                negative.add(i);\n            }\n     \
    \   }\n        Collections.sort(positive, new Comparator<Long>() {\n         \
    \   @Override\n            public int compare(Long o1, Long o2) {\n          \
    \      return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n        });\n\
    \        Collections.sort(negative, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                return Long.bitCount(o2)\
    \ - Long.bitCount(o1);\n            }\n        });\n        for (Long i : positive)\
    \ {\n            result.add(i);\n        }\n        for (Long i : negative) {\n\
    \            result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4n7r9ihu.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                int onesA =\
    \ Long.bitCount(a);\n                int onesB = Long.bitCount(b);\n         \
    \       if (onesA == onesB) {\n                    return a.compareTo(b);\n  \
    \              } else {\n                    return onesA - onesB;\n         \
    \       }\n            }\n        });\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jbn8hta.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyv50j6pm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ forties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse27oxni.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoekrq2d2.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        Collections.sort(zeros);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2tczctfl.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4kbneppr.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgklyzemc.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphy7y6e5x.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n      \
    \          zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35_q1bnr.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZero = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositive =\
    \ new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZeroAndPositiveAndNegativeAndZero\
    \ = new ArrayList\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcuyh9apz.java:33: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            Long num = arr.get(i);\n            if (sorted.size()\
    \ == 0) {\n                sorted.add(num);\n            } else {\n          \
    \      int j = 0;\n                while (j < sorted.size()) {\n             \
    \       Long sortedNum = sorted.get(j);\n                    if (numOfOnes(num)\
    \ < numOfOnes(sortedNum)) {\n                        sorted.add(j, num);\n   \
    \                     break;\n                    } else if (numOfOnes(num) ==\
    \ numOfOnes(sortedNum)) {\n                        if (num < sortedNum) {\n  \
    \                          sorted.add(j, num);\n                            break;\n\
    \                        }\n                    }\n                    j++;\n\
    \                }\n                if (j == sorted.size()) {\n              \
    \      sorted.add(num);\n                }\n            }\n        }\n       \
    \ return sorted;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5l4gnirl.java:26: error: cannot find symbol\n                 \
    \   if (numOfOnes(num) < numOfOnes(sortedNum)) {\n                        ^\n\
    \  symbol:   method numOfOnes(Long)\n  location: class Problem\n/tmp/tmp5l4gnirl.java:26:\
    \ error: cannot find symbol\n                    if (numOfOnes(num) < numOfOnes(sortedNum))\
    \ {\n                                         ^\n  symbol:   method numOfOnes(Long)\n\
    \  location: class Problem\n/tmp/tmp5l4gnirl.java:29: error: cannot find symbol\n\
    \                    } else if (numOfOnes(num) == numOfOnes(sortedNum)) {\n  \
    \                             ^\n  symbol:   method numOfOnes(Long)\n  location:\
    \ class Problem\n/tmp/tmp5l4gnirl.java:29: error: cannot find symbol\n       \
    \             } else if (numOfOnes(num) == numOfOnes(sortedNum)) {\n         \
    \                                        ^\n  symbol:   method numOfOnes(Long)\n\
    \  location: class Problem\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphh8tn8ix.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else {\n              \
    \      if (a > b) {\n                        return 1;\n                    }\
    \ else if (a < b) {\n                        return -1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkwfawwfy.java:59)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> positives\
    \ = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        for (Long num : arr) {\n            if (num < 0) {\n                negatives.add(num);\n\
    \            } else {\n                positives.add(num);\n            }\n  \
    \      }\n        Collections.sort(positives, new Comparator<Long>() {\n     \
    \       @Override\n            public int compare(Long a, Long b) {\n        \
    \        String aBin = Long.toBinaryString(a);\n                String bBin =\
    \ Long.toBinaryString(b);\n                int aOnes = 0;\n                int\
    \ bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++) {\n    \
    \                if (aBin.charAt(i) == '1') {\n                        aOnes++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ bBin.length(); i++) {\n                    if (bBin.charAt(i) == '1') {\n  \
    \                      bOnes++;\n                    }\n                }\n  \
    \              if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8nsa2zg3.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8nsa2zg3.java:81: error: reached end of file while parsing\n}\n\
    \ ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd1lvhyze.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphpvcz0yx.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long num :\
    \ arr) {\n            int index = 0;\n            for (Long sortedNum : sorted)\
    \ {\n                if (numOfOnes(num) < numOfOnes(sortedNum)) {\n          \
    \          break;\n                } else if (numOfOnes(num) == numOfOnes(sortedNum))\
    \ {\n                    if (num < sortedNum) {\n                        break;\n\
    \                    }\n                }\n                index++;\n        \
    \    }\n            sorted.add(index, num);\n        }\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphmkin_eg.java:21: error: cannot find symbol\n                if\
    \ (numOfOnes(num) < numOfOnes(sortedNum)) {\n                    ^\n  symbol:\
    \   method numOfOnes(Long)\n  location: class Problem\n/tmp/tmphmkin_eg.java:21:\
    \ error: cannot find symbol\n                if (numOfOnes(num) < numOfOnes(sortedNum))\
    \ {\n                                     ^\n  symbol:   method numOfOnes(Long)\n\
    \  location: class Problem\n/tmp/tmphmkin_eg.java:23: error: cannot find symbol\n\
    \                } else if (numOfOnes(num) == numOfOnes(sortedNum)) {\n      \
    \                     ^\n  symbol:   method numOfOnes(Long)\n  location: class\
    \ Problem\n/tmp/tmphmkin_eg.java:23: error: cannot find symbol\n             \
    \   } else if (numOfOnes(num) == numOfOnes(sortedNum)) {\n                   \
    \                          ^\n  symbol:   method numOfOnes(Long)\n  location:\
    \ class Problem\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // Your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted3 = new ArrayList<Long>();\n        ArrayList<Long> sorted4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted6 = new ArrayList<Long>();\n        ArrayList<Long> sorted7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted9 = new ArrayList<Long>();\n        ArrayList<Long> sorted10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted12 = new ArrayList<Long>();\n        ArrayList<Long> sorted13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted15 = new ArrayList<Long>();\n        ArrayList<Long> sorted16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted18 = new ArrayList<Long>();\n        ArrayList<Long> sorted19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted21 = new ArrayList<Long>();\n        ArrayList<Long> sorted22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted24 = new ArrayList<Long>();\n        ArrayList<Long> sorted25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted27 = new ArrayList<Long>();\n        ArrayList<Long> sorted28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted30 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4m_9xkut.java:48: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqsytqu2.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpql9d2pnt.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        sorted.addAll(negative);\n  \
    \      sorted.addAll(positive);\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvwmbtt3c.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> sorted_ones\
    \ = new ArrayList<>();\n        ArrayList<Long> sorted_zeros = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n    \
    \            sorted_zeros.add(i);\n            } else {\n                sorted_ones.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted_ones);\n        Collections.sort(sorted_zeros);\n\
    \        sorted.addAll(sorted_ones);\n        sorted.addAll(sorted_zeros);\n \
    \       return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpip7i3ue4.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long o1, Long o2) {\n                String s1\
    \ = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int ones1 = 0;\n                int ones2 = 0;\n            \
    \    for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        ones1++;\n                    }\n       \
    \         }\n                for (int i = 0; i < s2.length(); i++) {\n       \
    \             if (s2.charAt(i) == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return Integer.compare(ones1, ones2);\n                }\n\
    \            }\n        });\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyjp4l8uy.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptu05yga5.java:47: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmptu05yga5.java:47: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long o1, Long o2) {\n                int o1Ones\
    \ = countOnes(o1);\n                int o2Ones = countOnes(o2);\n            \
    \    if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n \
    \               } else {\n                    return o1Ones - o2Ones;\n      \
    \          }\n            }\n        });\n        return sorted;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnd7bvdba.java:24: error: cannot find symbol\n                int\
    \ o1Ones = countOnes(o1);\n                             ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmpnd7bvdba.java:25: error: cannot find symbol\n                int o2Ones\
    \ = countOnes(o2);\n                             ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // Your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1phrmafm.java:47: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmp1phrmafm.java:47: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_mtg9b5y.java:46: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmp_mtg9b5y.java:47:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fnxks29.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else {\n               \
    \     if (a < b) {\n                        return -1;\n                    }\
    \ else if (a > b) {\n                        return 1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_4h00usx.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n      \
    \          zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplq52z6m0.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long i : arr) {\n         \
    \   if (i < 0) {\n                negatives.add(i);\n            } else {\n  \
    \              positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long i : negatives) {\n  \
    \          sorted.add(i);\n        }\n        for (Long i : positives) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6bxsxkq2.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxo8y7x_m.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyones = new ArrayList<Long>();\n        ArrayList<Long> thirtytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> thirtythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirtyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyfives = new ArrayList<Long>();\n        ArrayList<Long> thirtysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> thirtysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long>\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg3yvouql.java:46: error: not a statement\n        ArrayList<Long>\n\
    \                 ^\n/tmp/tmpg3yvouql.java:46: error: ';' expected\n        ArrayList<Long>\n\
    \                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph1effmsq.java:46: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmph1effmsq.java:47:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        for (Long i : arr) {\n            sorted.add(i);\n\
    \        }\n        sorted.sort(Comparator.comparing(Problem::countOnes));\n \
    \       for (Long i : sorted) {\n            sortedByOnes.add(i);\n        }\n\
    \        sortedByOnes.sort(Comparator.comparing(Problem::decimalValue));\n   \
    \     for (Long i : sortedByOnes) {\n            sortedByDecimal.add(i);\n   \
    \     }\n        return sortedByDecimal;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpczzxecaf.java:23: error: invalid method reference\n        sorted.sort(Comparator.comparing(Problem::countOnes));\n\
    \                                         ^\n  cannot find symbol\n    symbol:\
    \   method countOnes()\n    location: class Problem\n/tmp/tmpczzxecaf.java:27:\
    \ error: invalid method reference\n        sortedByOnes.sort(Comparator.comparing(Problem::decimalValue));\n\
    \                                               ^\n  cannot find symbol\n    symbol:\
    \   method decimalValue()\n    location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long num : arr) {\n            if (num == 0) {\n               \
    \ zeros.add(num);\n            } else if (num == 1) {\n                ones.add(num);\n\
    \            } else {\n                sorted.add(num);\n            }\n     \
    \   }\n        Collections.sort(sorted);\n        for (Long num : sorted) {\n\
    \            if (num % 2 == 0) {\n                zeros.add(num);\n          \
    \  } else {\n                ones.add(num);\n            }\n        }\n      \
    \  zeros.addAll(ones);\n        return zeros;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgan82ljz.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp015fcufx.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                int o1Ones = countOnes(o1);\n                int o2Ones = countOnes(o2);\n\
    \                if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return o1Ones - o2Ones;\n     \
    \           }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_3snnzz.java:29: error: cannot find symbol\n                int\
    \ o1Ones = countOnes(o1);\n                             ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmpm_3snnzz.java:30: error: cannot find symbol\n                int o2Ones\
    \ = countOnes(o2);\n                             ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted2 = new ArrayList<Long>();\n        ArrayList<Long> sorted3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted5 = new ArrayList<Long>();\n        ArrayList<Long> sorted6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted8 = new ArrayList<Long>();\n        ArrayList<Long> sorted9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted11 = new ArrayList<Long>();\n        ArrayList<Long> sorted12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted14 = new ArrayList<Long>();\n        ArrayList<Long> sorted15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted17 = new ArrayList<Long>();\n        ArrayList<Long> sorted18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted20 = new ArrayList<Long>();\n        ArrayList<Long> sorted21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted23 = new ArrayList<Long>();\n        ArrayList<Long> sorted24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted26 = new ArrayList<Long>();\n        ArrayList<Long> sorted27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted29 = new ArrayList<Long>();\n        ArrayList<Long> sorted30 = new ArrayList<Long>();\n\
    \        Array\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25i164vn.java:47: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmp25i164vn.java:47: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negs\
    \ = new ArrayList<>();\n        ArrayList<Long> poss = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i < 0) {\n                negs.add(i);\n\
    \            } else {\n                poss.add(i);\n            }\n        }\n\
    \        Collections.sort(negs);\n        Collections.sort(poss);\n        for\
    \ (Long i : negs) {\n            sorted.add(i);\n        }\n        for (Long\
    \ i : poss) {\n            sorted.add(i);\n        }\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpulmp87fc.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpunjml8xg.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = (int) aBin.chars().filter(ch -> ch == '1').count();\n\
    \                int bOnes = (int) bBin.chars().filter(ch -> ch == '1').count();\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zg1w5wl.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> positive\
    \ = new ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i >= 0) {\n                positive.add(i);\n\
    \            } else {\n                negative.add(i);\n            }\n     \
    \   }\n        Collections.sort(positive, new Comparator<Long>() {\n         \
    \   @Override\n            public int compare(Long o1, Long o2) {\n          \
    \      String s1 = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        Collections.sort(negative, new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long o1, Long o2) {\n   \
    \             String s1 = Long.toBinaryString(o1);\n                String s2\
    \ = Long.toBinaryString(o2);\n                int count1 = 0;\n              \
    \  int count2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n\
    \                    if (s1.charAt(i) == '1') {\n                        count1++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ s2.length(); i++) {\n                    if (s2.charAt(i) == '1') {\n      \
    \                  count2++;\n                    }\n                }\n     \
    \           if (count1 == count2) {\n                    return o1.compareTo\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmmsosxna.java:69: error: ';' expected\n                    return\
    \ o1.compareTo\n                                       ^\n/tmp/tmpmmsosxna.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpmmsosxna.java:82: error: reached end of file while parsing\n\
    }\n ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           sorted.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk470cynj.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // Write your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long num : arr) {\n            if\
    \ (num == 0) {\n                zeros.add(num);\n            } else {\n      \
    \          ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpopqssd4f.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            sorted.add(i);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int ones1 =\
    \ 0;\n                int ones2 = 0;\n                for (char c : s1.toCharArray())\
    \ {\n                    if (c == '1') {\n                        ones1++;\n \
    \                   }\n                }\n                for (char c : s2.toCharArray())\
    \ {\n                    if (c == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return o1.compareTo(o2);\n                }\n       \
    \         return ones1 - ones2;\n            }\n        });\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpglafl6ue.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = 0;\n            while (num > 0) {\n                ones += num % 2;\n    \
    \            num /= 2;\n            }\n            sorted.add(ones);\n       \
    \ }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j\
    \ = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i) > sorted.get(j))\
    \ {\n                    long temp = sorted.get(i);\n                    sorted.set(i,\
    \ sorted.get(j));\n                    sorted.set(j, temp);\n                \
    \    temp = arr.get(i);\n                    arr.set(i, arr.get(j));\n       \
    \             arr.set(j, temp);\n                }\n            }\n        }\n\
    \        return arr;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz70q9u0c.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        ArrayList<Long> positive = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxvxo9yk.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                int aOnes =\
    \ Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n         \
    \       if (aOnes == bOnes) {\n                    return a.compareTo(b);\n  \
    \              } else {\n                    return aOnes - bOnes;\n         \
    \       }\n            }\n        });\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp606aggi.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        Collections.sort(zeros);\n        sorted.addAll(zeros);\n\
    \        sorted.addAll(ones);\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9ehzt1z.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = 0;\n            while (num > 0) {\n                ones += num % 2;\n    \
    \            num /= 2;\n            }\n            sorted.add(ones);\n       \
    \ }\n        Collections.sort(sorted);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp99te3tqc.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo37f54s8.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6sagkmj.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long n : arr) {\n            if (n == 0) {\n                zeros.add(n);\n\
    \            } else {\n                ones.add(n);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qm9ezqi.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> positive\
    \ = new ArrayList<>();\n        ArrayList<Long> negative = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(positive, new Comparator<Long>() {\n         \
    \   @Override\n            public int compare(Long o1, Long o2) {\n          \
    \      String s1 = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        Collections.sort(negative, new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long o1, Long o2) {\n   \
    \             String s1 = Long.toBinaryString(o1);\n                String s2\
    \ = Long.toBinaryString(o2);\n                int count1 = 0;\n              \
    \  int count2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n\
    \                    if (s1.charAt(i) == '1') {\n                        count1++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ s2.length(); i++) {\n                    if (s2.charAt(i) == '1') {\n      \
    \                  count2++;\n                    }\n                }\n     \
    \           if (count1 == count2) {\n                    return o1.compareTo\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp49san7jv.java:69: error: ';' expected\n                    return\
    \ o1.compareTo\n                                       ^\n/tmp/tmp49san7jv.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp49san7jv.java:82: error: reached end of file while parsing\n\
    }\n ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2f0n0_s.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        for (Long num : arr) {\n            if (num == 0) {\n               \
    \ zeros.add(num);\n            } else {\n                ones.add(num);\n    \
    \        }\n        }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmezl9f63.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBinary\
    \ = Long.toBinaryString(a);\n                String bBinary = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBinary.length(); i++) {\n                    if (aBinary.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBinary.length(); i++) {\n  \
    \                  if (bBinary.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdu_uffd.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted_ones = new ArrayList<Long>();\n        ArrayList<Long> sorted_zeros =\
    \ new ArrayList<Long>();\n        ArrayList<Long> sorted_neg = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                sorted_neg.add(i);\n\
    \            } else if (i == 0) {\n                sorted_zeros.add(i);\n    \
    \        } else if (i == 1) {\n                sorted_ones.add(i);\n         \
    \   } else {\n                sorted.add(i);\n            }\n        }\n     \
    \   Collections.sort(sorted_neg);\n        Collections.sort(sorted_zeros);\n \
    \       Collections.sort(sorted_ones);\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            public int compare(Long a, Long b) {\n                return\
    \ Long.bitCount(a) - Long.bitCount(b);\n            }\n        });\n        sorted.addAll(0,\
    \ sorted_neg);\n        sorted.addAll(sorted_zeros);\n        sorted.addAll(sorted_ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5njnmkcw.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBinary\
    \ = Long.toBinaryString(a);\n                String bBinary = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBinary.length(); i++) {\n                    if (aBinary.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBinary.length(); i++) {\n  \
    \                  if (bBinary.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvc8g3f23.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeieyxsqr.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                String s1 = Long.toBinaryString(o1);\n                String\
    \ s2 = Long.toBinaryString(o2);\n                int count1 = 0;\n           \
    \     int count2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n\
    \                    if (s1.charAt(i) == '1') {\n                        count1++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ s2.length(); i++) {\n                    if (s2.charAt(i) == '1') {\n      \
    \                  count2++;\n                    }\n                }\n     \
    \           if (count1 == count2) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return count1 - count2;\n     \
    \           }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5v34zdku.java:57)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        ArrayList<Long> positives = new\
    \ ArrayList<Long>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                positives.add(i);\n\
    \            }\n        }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzilsg8_b.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77fbhc95.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_xvopmn0.java:46: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmp_xvopmn0.java:47:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long l : arr) {\n            if (l < 0) {\n\
    \                negatives.add(l);\n            } else {\n                sorted.add(l);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n\
    \        });\n        Collections.sort(negatives, new Comparator<Long>() {\n \
    \           @Override\n            public int compare(Long o1, Long o2) {\n  \
    \              return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n\
    \        });\n        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr0t8accq.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeqsu9rq_.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negs\
    \ = new ArrayList<>();\n        ArrayList<Long> poss = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i < 0) {\n                negs.add(i);\n\
    \            } else {\n                poss.add(i);\n            }\n        }\n\
    \        Collections.sort(negs);\n        Collections.sort(poss);\n        for\
    \ (Long i : negs) {\n            sorted.add(i);\n        }\n        for (Long\
    \ i : poss) {\n            sorted.add(i);\n        }\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgluszk14.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long n : arr) {\n            if (n < 0) {\n                negatives.add(n);\n\
    \            } else {\n                positives.add(n);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long n : negatives) {\n            sorted.add(n);\n        }\n \
    \       for (Long n : positives) {\n            sorted.add(n);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8z2gw7p.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54_st0jg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByNegativeAndOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndNegativeAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n       \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaeh76n9g.java:39: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        for (long i : arr) {\n            if (i < 0) {\n\
    \                negative.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, (a, b) -> {\n    \
    \        String aBin = Long.toBinaryString(a);\n            String bBin = Long.toBinaryString(b);\n\
    \            int aOnes = aBin.length() - aBin.replace(\"1\", \"\").length();\n\
    \            int bOnes = bBin.length() - bBin.replace(\"1\", \"\").length();\n\
    \            if (aOnes == bOnes) {\n                return Long.compare(a, b);\n\
    \            } else {\n                return Integer.compare(aOnes, bOnes);\n\
    \            }\n        });\n        Collections.sort(negative);\n        sorted.addAll(negative);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvm67glwq.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> neg\
    \ = new ArrayList<>();\n        ArrayList<Long> pos = new ArrayList<>();\n   \
    \     for (Long i : arr) {\n            if (i < 0) {\n                neg.add(i);\n\
    \            } else {\n                pos.add(i);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        for (Long\
    \ i : neg) {\n            sorted.add(i);\n        }\n        for (Long i : pos)\
    \ {\n            sorted.add(i);\n        }\n        return sorted;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpav4gf48d.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negative.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negative);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           sorted.add(i);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52vrjbyz.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                String s1 = Long.toBinaryString(o1);\n                String\
    \ s2 = Long.toBinaryString(o2);\n                int ones1 = s1.length() - s1.replace(\"\
    1\", \"\").length();\n                int ones2 = s2.length() - s2.replace(\"\
    1\", \"\").length();\n                if (ones1 == ones2) {\n                \
    \    return o1.compareTo(o2);\n                } else {\n                    return\
    \ ones1 - ones2;\n                }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsmv4a4k.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwp9d0q2b.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5o4iqea.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2c8hpa4g.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            temp.add(arr.get(i));\n        }\n     \
    \   Collections.sort(temp);\n        for (int i = 0; i < temp.size(); i++) {\n\
    \            result.add(temp.get(i));\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptzz08pwc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long num = arr.get(i);\n            int\
    \ ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n\
    \                num /= 2;\n            }\n            sorted.add(ones * 1000000000\
    \ + arr.get(i));\n        }\n        Collections.sort(sorted);\n        for (int\
    \ i = 0; i < sorted.size(); i++) {\n            sorted.set(i, sorted.get(i) %\
    \ 1000000000);\n        }\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjircqwke.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long l : arr) {\n            if (l < 0) {\n                negatives.add(l);\n\
    \            } else {\n                positives.add(l);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        for (Long l : negatives) {\n\
    \            sorted.add(l);\n        }\n        for (Long l : positives) {\n \
    \           sorted.add(l);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuup5qro2.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                return Long.bitCount(a)\
    \ - Long.bitCount(b);\n            }\n        });\n        return sorted;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph63cnms6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long l : arr)\
    \ {\n            sorted.add(l);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes < bOnes) {\n                    return\
    \ -1;\n                } else if (aOnes > bOnes) {\n                    return\
    \ 1;\n                } else {\n                    if (a < b) {\n           \
    \             return -1;\n                    } else if (a > b) {\n          \
    \              return 1;\n                    } else {\n                     \
    \   return 0;\n                    }\n                }\n            }\n     \
    \   });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp85dun7t6.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long a, Long b) {\n                int aOnes =\
    \ countOnes(a);\n                int bOnes = countOnes(b);\n                if\
    \ (aOnes == bOnes) {\n                    return a.compareTo(b);\n           \
    \     } else {\n                    return aOnes - bOnes;\n                }\n\
    \            }\n        });\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcikj2kjt.java:24: error: cannot find symbol\n                int\
    \ aOnes = countOnes(a);\n                            ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmpcikj2kjt.java:25: error: cannot find symbol\n                int bOnes\
    \ = countOnes(b);\n                            ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long num : arr) {\n            if (num < 0) {\n                negative.add(num);\n\
    \            } else {\n                positive.add(num);\n            }\n   \
    \     }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long num : negative) {\n\
    \            sorted.add(num);\n        }\n        for (Long num : positive) {\n\
    \            sorted.add(num);\n        }\n        return sorted;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73sgurwy.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp179ieesh.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        for (Long num : arr) {\n            if (num\
    \ < 0) {\n                sorted.add(num);\n            } else {\n           \
    \     sortedByOnes.add(num);\n                sortedByDecimal.add(num);\n    \
    \        }\n        }\n        Collections.sort(sortedByOnes, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                return Long.bitCount(a) - Long.bitCount(b);\n            }\n\
    \        });\n        Collections.sort(sortedByDecimal);\n        sorted.addAll(sortedByOnes);\n\
    \        sorted.addAll(sortedByDecimal);\n        return sorted;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5e4brtv.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByNegativeAndOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndDecimalAndOnesAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndNegativeAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndNegativeAndOnesAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegativeAndNegativeAndOnes\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpor6gra0b.java:38: error: ';' expected\n        ArrayList<Long>\
    \ sortedByNegativeAndNegativeAndOnes\n                                       \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long num : arr) {\n            if (num <\
    \ 0) {\n                negatives.add(num);\n            } else {\n          \
    \      sorted.add(num);\n            }\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu205bg3n.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i < 0) {\n                negative.add(i);\n            } else {\n    \
    \            positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long i : negative) {\n            result.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            result.add(i);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc8hnr0on.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long o1, Long o2) {\n                String binary1\
    \ = Long.toBinaryString(o1);\n                String binary2 = Long.toBinaryString(o2);\n\
    \                int ones1 = 0;\n                int ones2 = 0;\n            \
    \    for (int i = 0; i < binary1.length(); i++) {\n                    if (binary1.charAt(i)\
    \ == '1') {\n                        ones1++;\n                    }\n       \
    \         }\n                for (int i = 0; i < binary2.length(); i++) {\n  \
    \                  if (binary2.charAt(i) == '1') {\n                        ones2++;\n\
    \                    }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return ones1 - ones2;\n                }\n            }\n\
    \        });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjx55klhi.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ forty = new ArrayList<Long>();\n        ArrayList<Long> fifty = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventy = new ArrayList<Long>();\n        ArrayList<Long> eighty = new ArrayList<Long>();\n\
    \        ArrayList<Long> ninety = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundred = new ArrayList<Long>();\n        ArrayList<\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkmx_col9.java:48: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpkmx_col9.java:47: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        for (Long i : negatives) {\n\
    \            sorted.add(i);\n        }\n        for (Long i : positives) {\n \
    \           sorted.add(i);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpor15_f53.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        ArrayList<Long> positive = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzoa4pbv.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        for (long i : negatives) {\n\
    \            sorted.add(i);\n        }\n        for (long i : positives) {\n \
    \           sorted.add(i);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qhqiyws.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw2vzu7fb.java:46: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmpw2vzu7fb.java:47:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx7090pmm.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedZeros = new\
    \ ArrayList<Long>();\n        for (Long num : arr) {\n            if (num < 0)\
    \ {\n                sorted.add(num);\n            } else if (num == 0) {\n  \
    \              sortedZeros.add(num);\n            } else {\n                sortedOnes.add(num);\n\
    \            }\n        }\n        Collections.sort(sortedOnes, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n\
    \        });\n        Collections.sort(sortedZeros, new Comparator<Long>() {\n\
    \            @Override\n            public int compare(Long o1, Long o2) {\n \
    \               return Long.compare(o1, o2);\n            }\n        });\n   \
    \     sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n      \
    \  return sorted;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_rdhtae.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        ArrayList<Long> positives = new\
    \ ArrayList<Long>();\n        for (Long n : arr) {\n            if (n < 0) {\n\
    \                negatives.add(n);\n            } else {\n                positives.add(n);\n\
    \            }\n        }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long n : negatives) {\n            sorted.add(n);\n        }\n \
    \       for (Long n : positives) {\n            sorted.add(n);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7z_6bhbf.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2iryalvu.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedZeros = new\
    \ ArrayList<Long>();\n        for (Long i : arr) {\n            if (Long.bitCount(i)\
    \ == 0) {\n                sortedZeros.add(i);\n            } else {\n       \
    \         sortedOnes.add(i);\n            }\n        }\n        Collections.sort(sortedOnes);\n\
    \        Collections.sort(sortedZeros);\n        sorted.addAll(sortedZeros);\n\
    \        sorted.addAll(sortedOnes);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfgx8xpsv.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpazzrja8d.java:32: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg\n         \
    \                                                                            \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8559x61.java:32: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg\n         \
    \                                                                            \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        for (Long i : negatives) {\n\
    \            sorted.add(i);\n        }\n        for (Long i : positives) {\n \
    \           sorted.add(i);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjpfj3tpx.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long l : arr) {\n            if (l < 0) {\n                negative.add(l);\n\
    \            } else {\n                positive.add(l);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long l : negative) {\n \
    \           sorted.add(l);\n        }\n        for (Long l : positive) {\n   \
    \         sorted.add(l);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1z8cufot.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long l : arr)\
    \ {\n            sorted.add(l);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ l1, Long l2) {\n                int l1Ones = countOnes(l1);\n              \
    \  int l2Ones = countOnes(l2);\n                if (l1Ones == l2Ones) {\n    \
    \                return l1.compareTo(l2);\n                } else {\n        \
    \            return l1Ones - l2Ones;\n                }\n            }\n     \
    \   });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp13p3oa70.java:24: error: cannot find symbol\n                int\
    \ l1Ones = countOnes(l1);\n                             ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmp13p3oa70.java:25: error: cannot find symbol\n                int l2Ones\
    \ = countOnes(l2);\n                             ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long l : arr) {\n            if\
    \ (l == 0) {\n                zeros.add(l);\n            } else {\n          \
    \      ones.add(l);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmzufoaes.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0g70o1s.java:46: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmpb0g70o1s.java:47:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        ArrayList<Long> positive = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppmmsmv4g.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                if (a < 0 &&\
    \ b < 0) {\n                    return (int) (b - a);\n                }\n   \
    \             if (a < 0) {\n                    return 1;\n                }\n\
    \                if (b < 0) {\n                    return -1;\n              \
    \  }\n                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return (int)\
    \ (a - b);\n                }\n                return aOnes - bOnes;\n       \
    \     }\n        });\n        return sorted;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rq_5m_0.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ahh94hz.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        negative.sort(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder()));\n\
    \        positive.sort(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder()));\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwi3uyb5d.java:27: error: invalid method reference\n        negative.sort(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder()));\n\
    \                                           ^\n  cannot find symbol\n    symbol:\
    \   method countOnes()\n    location: class Problem\n/tmp/tmpwi3uyb5d.java:28:\
    \ error: invalid method reference\n        positive.sort(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder()));\n\
    \                                           ^\n  cannot find symbol\n    symbol:\
    \   method countOnes()\n    location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentys1 = new ArrayList<Long>();\n        ArrayList<Long> twentys2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentys3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentys4 = new ArrayList<Long>();\n        ArrayList<Long> twentys5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentys6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentys7 = new ArrayList<Long>();\n        ArrayList<\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu14m0kj8.java:47: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpu14m0kj8.java:46: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        ArrayList<Long> positive = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_d6w22i.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31__t9yp.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long a, Long b) {\n                int aOnes =\
    \ countOnes(a);\n                int bOnes = countOnes(b);\n                if\
    \ (aOnes == bOnes) {\n                    return a.compareTo(b);\n           \
    \     } else {\n                    return aOnes - bOnes;\n                }\n\
    \            }\n        });\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_8nquvsz.java:24: error: cannot find symbol\n                int\
    \ aOnes = countOnes(a);\n                            ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmp_8nquvsz.java:25: error: cannot find symbol\n                int bOnes\
    \ = countOnes(b);\n                            ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = 0;\n            while (num > 0) {\n                ones += num % 2;\n    \
    \            num /= 2;\n            }\n            sorted.add(ones);\n       \
    \ }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j\
    \ = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i) > sorted.get(j))\
    \ {\n                    long temp = sorted.get(i);\n                    sorted.set(i,\
    \ sorted.get(j));\n                    sorted.set(j, temp);\n                \
    \    temp = arr.get(i);\n                    arr.set(i, arr.get(j));\n       \
    \             arr.set(j, temp);\n                }\n            }\n        }\n\
    \        return arr;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvqfuh4rl.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long num : arr) {\n            if (num <\
    \ 0) {\n                negatives.add(num);\n            } else {\n          \
    \      sorted.add(num);\n            }\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (char c : aBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        aOnes++;\n \
    \                   }\n                }\n                for (char c : bBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        bOnes++;\n \
    \                   }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        Collections.sort(negatives);\n        Collections.reverse(negatives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsou46yz.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpttsq1ds0.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        for (Long i : negative) {\n            sorted.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            sorted.add(i);\n        }\n    \
    \    return sorted;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3z4wu66y.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedZeros = new\
    \ ArrayList<Long>();\n        for (Long i : arr) {\n            if (countOnes(i)\
    \ == 0) {\n                sortedZeros.add(i);\n            } else {\n       \
    \         sortedOnes.add(i);\n            }\n        }\n        Collections.sort(sortedOnes);\n\
    \        Collections.sort(sortedZeros);\n        sorted.addAll(sortedZeros);\n\
    \        sorted.addAll(sortedOnes);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwva073h6.java:21: error: cannot find symbol\n            if (countOnes(i)\
    \ == 0) {\n                ^\n  symbol:   method countOnes(Long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long num : arr) {\n            if (num == 0) {\n                zeros.add(num);\n\
    \            } else {\n                ones.add(num);\n            }\n       \
    \ }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfv614bac.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        ArrayList<Long> positives = new\
    \ ArrayList<Long>();\n        for (Long l : arr) {\n            if (l < 0) {\n\
    \                negatives.add(l);\n            } else {\n                positives.add(l);\n\
    \            }\n        }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long l : negatives) {\n            sorted.add(l);\n        }\n \
    \       for (Long l : positives) {\n            sorted.add(l);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprz9d76m0.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBinary\
    \ = Long.toBinaryString(a);\n                String bBinary = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBinary.length(); i++) {\n                    if (aBinary.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBinary.length(); i++) {\n  \
    \                  if (bBinary.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5fbq76je.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            result.add(i);\n        }\n        result.sort(new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                String s1 = Long.toBinaryString(o1);\n                String\
    \ s2 = Long.toBinaryString(o2);\n                int count1 = 0;\n           \
    \     int count2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n\
    \                    if (s1.charAt(i) == '1') {\n                        count1++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ s2.length(); i++) {\n                    if (s2.charAt(i) == '1') {\n      \
    \                  count2++;\n                    }\n                }\n     \
    \           if (count1 == count2) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return count1 - count2;\n     \
    \           }\n            }\n        });\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4c2z_rds.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ieu_82y.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirtys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fortys = new ArrayList<Long>();\n        ArrayList<Long> fiftys = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixtys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventys = new ArrayList<Long>();\n        ArrayList<Long> eighty = new ArrayList<Long>();\n\
    \        ArrayList<Long> ninety = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundred = new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvh1spyl4.java:47: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3174ij7.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpymtf5gva.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw20frsla.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long num : arr) {\n            if (num == 0) {\n               \
    \ zeros.add(num);\n            } else if (num == 1) {\n                ones.add(num);\n\
    \            } else {\n                sorted.add(num);\n            }\n     \
    \   }\n        Collections.sort(sorted);\n        Collections.sort(ones);\n  \
    \      sorted.addAll(ones);\n        sorted.addAll(zeros);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppb5z31cg.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long l : arr) {\n            if (l < 0) {\n                negative.add(l);\n\
    \            } else {\n                positive.add(l);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long l : negative) {\n \
    \           result.add(l);\n        }\n        for (Long l : positive) {\n   \
    \         result.add(l);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mr0hcho.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long n : arr) {\n            if (n == 0) {\n                zeros.add(n);\n\
    \            } else {\n                ones.add(n);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8868zmi.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx6rg72uy.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        ArrayList<Long> positives = new\
    \ ArrayList<Long>();\n        for (Long n : arr) {\n            if (n < 0) {\n\
    \                negatives.add(n);\n            } else {\n                positives.add(n);\n\
    \            }\n        }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long n : negatives) {\n            sorted.add(n);\n        }\n \
    \       for (Long n : positives) {\n            sorted.add(n);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1el3zdk.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_utml41l.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> temp\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                result.add(i);\n            } else {\n                temp.add(i);\n\
    \            }\n        }\n        Collections.sort(temp, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                int o1Ones = Integer.bitCount(o1.intValue());\n             \
    \   int o2Ones = Integer.bitCount(o2.intValue());\n                if (o1Ones\
    \ == o2Ones) {\n                    return o1.compareTo(o2);\n               \
    \ } else {\n                    return o1Ones - o2Ones;\n                }\n \
    \           }\n        });\n        result.addAll(temp);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp24el_esq.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = countOnes(num);\n            sorted.add(ones, num);\n        }\n        return\
    \ sorted;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv2bctljj.java:20: error: cannot find symbol\n            int ones\
    \ = countOnes(num);\n                       ^\n  symbol:   method countOnes(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_65dnkiu.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        HashMap<Long, Long> map = new HashMap<Long,\
    \ Long>();\n        for (Long i : arr) {\n            map.put(i, countOnes(i));\n\
    \        }\n        sorted = sortByValue(map);\n        for (Long i : sorted)\
    \ {\n            result.add(i);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_37lyzf.java:21: error: cannot find symbol\n            map.put(i,\
    \ countOnes(i));\n                       ^\n  symbol:   method countOnes(Long)\n\
    \  location: class Problem\n/tmp/tmpb_37lyzf.java:23: error: cannot find symbol\n\
    \        sorted = sortByValue(map);\n                 ^\n  symbol:   method sortByValue(HashMap<Long,Long>)\n\
    \  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptuulna4o.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long num : arr) {\n            if (num < 0) {\n                negatives.add(num);\n\
    \            } else {\n                positives.add(num);\n            }\n  \
    \      }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long num : negatives) {\n            sorted.add(num);\n        }\n\
    \        for (Long num : positives) {\n            sorted.add(num);\n        }\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp70pgtwou.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedZeros = new\
    \ ArrayList<Long>();\n        for (Long i : arr) {\n            if (Long.bitCount(i)\
    \ == 0) {\n                sortedZeros.add(i);\n            } else {\n       \
    \         sortedOnes.add(i);\n            }\n        }\n        Collections.sort(sortedOnes);\n\
    \        Collections.sort(sortedZeros);\n        sorted.addAll(sortedZeros);\n\
    \        sorted.addAll(sortedOnes);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp605fvknf.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long num : arr) {\n            if (num <\
    \ 0) {\n                negatives.add(num);\n            } else {\n          \
    \      sorted.add(num);\n            }\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (char c : aBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        aOnes++;\n \
    \                   }\n                }\n                for (char c : bBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        bOnes++;\n \
    \                   }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        Collections.sort(negatives, new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long a, Long b) {\n     \
    \           String aBin = Long.toBinaryString(a);\n                String bBin\
    \ = Long.toBinaryString(b);\n                int aOnes = 0;\n                int\
    \ bOnes = 0;\n                for (char c : aBin.toCharArray()) {\n          \
    \          if (c == '1') {\n                        aOnes++;\n               \
    \     }\n                }\n                for (char c : bBin.toCharArray())\
    \ {\n                    if (c == '1') {\n                        bOnes++;\n \
    \                   }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        Collections.reverse(negatives);\n        sorted.addAll(negatives\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcydpo3_h.java:75: error: ')' expected\n        sorted.addAll(negatives\n\
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppte3zutd.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long num : arr) {\n            if (num < 0) {\n                negatives.add(num);\n\
    \            } else {\n                positives.add(num);\n            }\n  \
    \      }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long num : negatives) {\n            sorted.add(num);\n        }\n\
    \        for (Long num : positives) {\n            sorted.add(num);\n        }\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprn1rheys.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long num : arr) {\n            if (num == 0) {\n               \
    \ zeros.add(num);\n            } else if (num == 1) {\n                ones.add(num);\n\
    \            } else {\n                sorted.add(num);\n            }\n     \
    \   }\n        Collections.sort(sorted);\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        for (Long num : zeros) {\n            result.add(num);\n\
    \        }\n        for (Long num : ones) {\n            result.add(num);\n  \
    \      }\n        for (Long num : sorted) {\n            result.add(num);\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1pvjsob.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> neg\
    \ = new ArrayList<>();\n        ArrayList<Long> pos = new ArrayList<>();\n   \
    \     for (Long i : arr) {\n            if (i < 0) {\n                neg.add(i);\n\
    \            } else {\n                pos.add(i);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        for (Long\
    \ i : neg) {\n            sorted.add(i);\n        }\n        for (Long i : pos)\
    \ {\n            sorted.add(i);\n        }\n        return sorted;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dhls4b0.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        ArrayList<Long> negative = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i >= 0) {\n                positive.add(i);\n\
    \            } else {\n                negative.add(i);\n            }\n     \
    \   }\n        positive.sort(new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                int count1\
    \ = Long.bitCount(o1);\n                int count2 = Long.bitCount(o2);\n    \
    \            if (count1 == count2) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return count1 - count2;\n     \
    \           }\n            }\n        });\n        negative.sort(new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                int count1 = Long.bitCount(o1);\n                int count2 =\
    \ Long.bitCount(o2);\n                if (count1 == count2) {\n              \
    \      return o1.compareTo(o2);\n                } else {\n                  \
    \  return count1 - count2;\n                }\n            }\n        });\n  \
    \      Collections.reverse(negative);\n        result.addAll(negative);\n    \
    \    result.addAll(positive);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuui1lmpp.java:59)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long l : arr) {\n            if (l < 0) {\n\
    \                negatives.add(l);\n            } else {\n                sorted.add(l);\n\
    \            }\n        }\n        Collections.sort(sorted, (a, b) -> {\n    \
    \        int a1 = Integer.bitCount(a.intValue());\n            int b1 = Integer.bitCount(b.intValue());\n\
    \            if (a1 == b1) {\n                return a.compareTo(b);\n       \
    \     } else {\n                return a1 - b1;\n            }\n        });\n\
    \        Collections.sort(negatives);\n        for (Long l : negatives) {\n  \
    \          sorted.add(0, l);\n        }\n        return sorted;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__w4yl0k.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long l : arr) {\n            if (l < 0) {\n\
    \                negatives.add(l);\n            } else {\n                sorted.add(l);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long l1, Long l2) {\n\
    \                String s1 = Long.toBinaryString(l1);\n                String\
    \ s2 = Long.toBinaryString(l2);\n                int ones1 = 0;\n            \
    \    int ones2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n\
    \                    if (s1.charAt(i) == '1') {\n                        ones1++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ s2.length(); i++) {\n                    if (s2.charAt(i) == '1') {\n      \
    \                  ones2++;\n                    }\n                }\n      \
    \          if (ones1 == ones2) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return ones1 - ones2;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        for (Long l : negatives) {\n            sorted.add(l);\n        }\n \
    \       return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ux4pide.java:59)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n      \
    \          zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf_lpluhq.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            long num = arr.get(i);\n            int ones\
    \ = 0;\n            while (num > 0) {\n                ones += num % 2;\n    \
    \            num /= 2;\n            }\n            sorted.add(ones);\n       \
    \ }\n        Collections.sort(sorted);\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpekpp8nkw.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirtyones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtytwos = new ArrayList<Long>();\n        ArrayList<Long> thirtythrees =\
    \ new ArrayList<Long>();\n        ArrayList<Long> thirtyfours = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirtyfives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtysixes = new ArrayList<Long>();\n        ArrayList<Long> thirtysevens =\
    \ new ArrayList<Long>();\n        ArrayList<Long> thirty\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ry5w3g6.java:46: error: ';' expected\n        ArrayList<Long>\
    \ thirty\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long a, Long b) {\n                int aOnes =\
    \ countOnes(a);\n                int bOnes = countOnes(b);\n                if\
    \ (aOnes == bOnes) {\n                    return a.compareTo(b);\n           \
    \     } else {\n                    return aOnes - bOnes;\n                }\n\
    \            }\n        });\n        return sorted;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbectka0z.java:24: error: cannot find symbol\n                int\
    \ aOnes = countOnes(a);\n                            ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmpbectka0z.java:25: error: cannot find symbol\n                int bOnes\
    \ = countOnes(b);\n                            ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAnd\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppdey_06j.java:34: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAnd\n                        \
    \                                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> sorted_ones\
    \ = new ArrayList<>();\n        ArrayList<Long> sorted_zeros = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n    \
    \            sorted_zeros.add(i);\n            } else {\n                sorted_ones.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted_ones);\n        Collections.sort(sorted_zeros);\n\
    \        sorted.addAll(sorted_ones);\n        sorted.addAll(sorted_zeros);\n \
    \       return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_ewfrt0.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0g1w3d6.java:32: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\n          \
    \                                                                            \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmsljio3.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqji4t807.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> sortedByOnes\
    \ = new ArrayList<>();\n        ArrayList<Long> sortedByDecimal = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                sorted.add(i);\n\
    \            } else {\n                sortedByOnes.add(i);\n                sortedByDecimal.add(i);\n\
    \            }\n        }\n        Collections.sort(sortedByOnes, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                return Long.bitCount(o1) - Long.bitCount(o2);\n            }\n\
    \        });\n        Collections.sort(sortedByDecimal);\n        sorted.addAll(sortedByOnes);\n\
    \        sorted.addAll(sortedByDecimal);\n        return sorted;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfdqccya3.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppkaqei6u.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eigteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        Array\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn2sgxmdm.java:46: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmpn2sgxmdm.java:46: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> sorted\
    \ = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) < 0) {\n                result.add(arr.get(i));\n     \
    \       } else {\n                sorted.add(arr.get(i));\n            }\n   \
    \     }\n        Collections.sort(sorted, new Comparator<Long>() {\n         \
    \   @Override\n            public int compare(Long o1, Long o2) {\n          \
    \      String s1 = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        result.addAll(sorted);\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4h03emyk.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> nineteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twenties = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourties = new ArrayList<Long>();\n        ArrayList<Long> fifties = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventies = new ArrayList<Long>();\n        ArrayList<Long> eighties = new ArrayList<Long>();\n\
    \        ArrayList<Long> nineties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ hundreds = new ArrayList\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gbu4wc9.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvr0flse0.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        result.addAll(negative);\n  \
    \      result.addAll(positive);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdy9sp4j.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           sorted.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplpwp29lz.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphtpva0a5.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long num : arr) {\n            if (num == 0) {\n                zeros.add(num);\n\
    \            } else {\n                ones.add(num);\n            }\n       \
    \ }\n        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotoe8jpz.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     return arr.stream().sorted(new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                int aOnes =\
    \ Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n         \
    \       if (aOnes == bOnes) {\n                    return a.compareTo(b);\n  \
    \              }\n                return aOnes - bOnes;\n            }\n     \
    \   }).collect(Collectors.toCollection(ArrayList::new));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpitunbk6p.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxd7cg0v.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n      \
    \          zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppclxaaq2.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (Long i : arr)\
    \ {\n            sorted.add(i);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String binary1 = Long.toBinaryString(o1);\n\
    \                String binary2 = Long.toBinaryString(o2);\n                int\
    \ count1 = 0;\n                int count2 = 0;\n                for (int i = 0;\
    \ i < binary1.length(); i++) {\n                    if (binary1.charAt(i) == '1')\
    \ {\n                        count1++;\n                    }\n              \
    \  }\n                for (int i = 0; i < binary2.length(); i++) {\n         \
    \           if (binary2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return count1 - count2;\n                }\n            }\n\
    \        });\n        return sorted;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79qe2f1g.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuay27516.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long i : arr)\
    \ {\n            sorted.add(i);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int count1 =\
    \ 0;\n                int count2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     count1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        count2++;\n                    }\n         \
    \       }\n                if (count1 == count2) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return count1\
    \ - count2;\n                }\n            }\n        });\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp14d46271.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i < 0) {\n                negative.add(i);\n            } else {\n    \
    \            positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long i : negative) {\n            result.add(i);\n        }\n  \
    \      for (Long i : positive) {\n            result.add(i);\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpai9ilxvo.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpctvb98g3.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAnd\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmperoooglx.java:34: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndOnesAndDecimalAndOnesAnd\n                        \
    \                                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives);\n\
    \        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkl40dt9v.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ oneCount = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  oneCount.add(Long.bitCount(i));\n        }\n        Collections.sort(oneCount);\n\
    \        for (Long i : oneCount) {\n            for (Long j : arr) {\n       \
    \         if (Long.bitCount(j) == i) {\n                    sorted.add(j);\n \
    \               }\n            }\n        }\n        return sorted;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr31kbfvs.java:20: error: incompatible types: int cannot be converted\
    \ to Long\n            oneCount.add(Long.bitCount(i));\n                     \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> negative\
    \ = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else {\n                positive.add(i);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long i : negative) {\n \
    \           result.add(i);\n        }\n        for (Long i : positive) {\n   \
    \         result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqpwc4o_w.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n    \
    \            zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        for (Long i : zeros) {\n            sorted.add(i);\n        }\n     \
    \   for (Long i : ones) {\n            sorted.add(i);\n        }\n        return\
    \ sorted;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7m1ok8aw.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> temp\
    \ = new ArrayList<>();\n        for (Long i : arr) {\n            temp.add(i);\n\
    \        }\n        Collections.sort(temp);\n        for (Long i : temp) {\n \
    \           result.add(i);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptq8oubdz.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk6cgf0ll.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmkfxh67b.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n    \
    \            zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpopjugk.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        ArrayList<Long> ones = new ArrayList<>();\n  \
    \      for (Long i : arr) {\n            if (i == 0) {\n                zeros.add(i);\n\
    \            } else {\n                ones.add(i);\n            }\n        }\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p68elg5.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (Long.bitCount(i) == 0) {\n    \
    \            zeros.add(i);\n            } else {\n                ones.add(i);\n\
    \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp05dtb3ke.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1ril43i.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted2 = new ArrayList<Long>();\n        ArrayList<Long> sorted3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted5 = new ArrayList<Long>();\n        ArrayList<Long> sorted6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted8 = new ArrayList<Long>();\n        ArrayList<Long> sorted9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted11 = new ArrayList<Long>();\n        ArrayList<Long> sorted12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted14 = new ArrayList<Long>();\n        ArrayList<Long> sorted15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted17 = new ArrayList<Long>();\n        ArrayList<Long> sorted18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted20 = new ArrayList<Long>();\n        ArrayList<Long> sorted21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted23 = new ArrayList<Long>();\n        ArrayList<Long> sorted24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted26 = new ArrayList<Long>();\n        ArrayList<Long> sorted27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted29 = new ArrayList<Long>();\n        ArrayList<Long> sorted30 = new ArrayList<Long>();\n\
    \        Array\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpduj0dy3_.java:47: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmpduj0dy3_.java:47: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> neg\
    \ = new ArrayList<>();\n        ArrayList<Long> pos = new ArrayList<>();\n   \
    \     for (Long i : arr) {\n            if (i < 0) {\n                neg.add(i);\n\
    \            } else {\n                pos.add(i);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        Collections.reverse(neg);\n\
    \        sorted.addAll(neg);\n        sorted.addAll(pos);\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe1dju0nq.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i >= 0) {\n                positive.add(i);\n            } else {\n   \
    \             negative.add(i);\n            }\n        }\n        Collections.sort(positive,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int count1 =\
    \ 0;\n                int count2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     count1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        count2++;\n                    }\n         \
    \       }\n                if (count1 == count2) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return count1\
    \ - count2;\n                }\n            }\n        });\n        Collections.sort(negative,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String s1 = Long.toBinaryString(o1);\n     \
    \           String s2 = Long.toBinaryString(o2);\n                int count1 =\
    \ 0;\n                int count2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     count1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        count2++;\n                    }\n         \
    \       }\n                if (count1 == count2) {\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyhv32vch.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpyhv32vch.java:82: error: reached\
    \ end of file while parsing\n}\n ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        ArrayList<Long> negatives\
    \ = new ArrayList<>();\n        ArrayList<Long> positives = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negatives.add(i);\n\
    \            } else {\n                positives.add(i);\n            }\n    \
    \    }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmhmw8apn.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ neg = new ArrayList<Long>();\n        ArrayList<Long> pos = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                neg.add(i);\n\
    \            } else {\n                pos.add(i);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        Collections.reverse(neg);\n\
    \        result.addAll(neg);\n        result.addAll(pos);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzgej4msd.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8x5l_hxr.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        ArrayList<Long> ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> twos = new ArrayList<Long>();\n        ArrayList<Long>\
    \ threes = new ArrayList<Long>();\n        ArrayList<Long> fours = new ArrayList<Long>();\n\
    \        ArrayList<Long> fives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixes = new ArrayList<Long>();\n        ArrayList<Long> sevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> eights = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nines = new ArrayList<Long>();\n        ArrayList<Long> tens = new ArrayList<Long>();\n\
    \        ArrayList<Long> elevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twelves = new ArrayList<Long>();\n        ArrayList<Long> thirteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> fourteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fifteens = new ArrayList<Long>();\n        ArrayList<Long> sixteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> seventeens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eighteens = new ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7jp7ex7.java:47: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            int ones = 0;\n            long num = arr.get(i);\n\
    \            while (num > 0) {\n                if (num % 2 == 1) {\n        \
    \            ones++;\n                }\n                num /= 2;\n         \
    \   }\n            sorted.add(ones, arr.get(i));\n        }\n        return sorted;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 1, Size: 0\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:756)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:481)\n\tat Problem.sortArray(tmpgs0oiz9g.java:27)\n\
    \tat Problem.main(tmpgs0oiz9g.java:33)\n"
  exit_code: 1
  status: Exception
