name: HumanEval_59_largest_prime_factor
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                n /= i;\n           \
    \     largestPrimeFactor = i;\n            }\n        }\n        return largestPrimeFactor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp949wbml1.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n                while (n % factor ==\
    \ 0) {\n                    n /= factor;\n                }\n            }\n \
    \           factor += 1;\n        }\n        return largestPrimeFactor;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > largestPrimeFactor) {\n           \
    \ largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        // TODO: Implement me!\n        return 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01f6b90y.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i++;\n            }\n\
    \        }\n        return Math.max(largest, n);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        while (n % 2 == 0) {\n \
    \           largestPrimeFactor = 2;\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \  }\n        }\n        if (n > 2) {\n            largestPrimeFactor = n;\n \
    \       }\n        return largestPrimeFactor;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 1;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapwjqja7.java:19)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 1;\n        for (long i = 2; i * i <= n; i++) {\n \
    \           if (n % i == 0) {\n                max = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            max = n;\n        }\n      \
    \  return max;\n\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = -1;\n        for (long i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i * i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = -1;\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     while (n % i == 0) {\n                    n /= i;\n                }\n \
    \           }\n        }\n        if (n > 1) {\n            largest = n;\n   \
    \     }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        // TODO: Implement this method.\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1gtxms1i.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long ans = 0;\n        for (long i = 2; i * i <= n; i++) {\n \
    \           if (n % i == 0) {\n                ans = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            ans = n;\n        }\n      \
    \  return ans;\n\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        // TODO: Implement this function.\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvo4y8su.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > 1) {\n            largestPrimeFactor\
    \ = n;\n        }\n        return largestPrimeFactor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = -1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                if (isPrime(i)) {\n           \
    \         largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppgr1l650.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > largestPrimeFactor) {\n           \
    \ largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                n /= i;\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl5fwzscw.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long result = 0;\n        for (long i = 2; i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                result = i;\n                n /=\
    \ i;\n                i--;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor +=\
    \ 1;\n        }\n        return largestPrimeFactor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                n /= i;\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp12g2c24c.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        return largestPrimeFactor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        // TODO: Implement me!\n        return 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc0ne2smj.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        // TODO: Implement this method.\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_wvwiq2.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = -1;\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     while (n % i == 0) {\n                    n /= i;\n                }\n \
    \           }\n        }\n        if (n > 1) {\n            largest = n;\n   \
    \     }\n        return largest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        while (n % 2 == 0) {\n \
    \           largestPrimeFactor = 2;\n            n = n / 2;\n        }\n     \
    \   long factor = 3;\n        while (n > 1) {\n            while (n % factor ==\
    \ 0) {\n                largestPrimeFactor = factor;\n                n = n /\
    \ factor;\n            }\n            factor += 2;\n        }\n        return\
    \ largestPrimeFactor;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                if (isPrime(i)) {\n           \
    \         largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxgr74_g7.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        // TODO: Implement me!\n        return 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwhrvz5u.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                while (n\
    \ % i == 0) {\n                    n /= i;\n                }\n            }\n\
    \        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = -1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor +=\
    \ 1;\n        }\n        return largestPrimeFactor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                if (isPrime(i)) {\n \
    \                   largest = i;\n                }\n            }\n        }\n\
    \        return largest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4txha0z3.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = -1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i * i <= n; i++) {\n \
    \           if (n % i == 0) {\n                max = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            max = n;\n        }\n      \
    \  return max;\n\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
