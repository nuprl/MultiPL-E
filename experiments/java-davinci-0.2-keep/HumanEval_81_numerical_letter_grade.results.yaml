name: HumanEval_81_numerical_letter_grade
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2areno_.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7oj5h7i.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf34uy7rn.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvfwwui0t.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5livoy9r.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfna_ebd.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi83_f9b9.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqjbns0s.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79oefbkc.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr2nk3sf0.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7tr9m8ef.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptwq1bsl4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcspyrhrb.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6iceeuqr.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjtqd9tby.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fi676q4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpopab54kn.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf88rw8aq.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3k49l9k4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpntc52r60.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcbdfjfb.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1mvabvll.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqpin5lz5.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjrrrblsb.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvecb7f7.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_x87yb8.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp5pxloaw.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsbfzlue4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        // Write your code here\n        ArrayList<String> letterGrades\
    \ = new ArrayList<String>();\n        for (Float grade : grades) {\n         \
    \   if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n         \
    \   } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n   \
    \         } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\"\
    );\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"\
    B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"\
    B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"\
    B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"\
    C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"\
    D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmp43jt7k.java:66)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjp2uylwt.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwdtyuhq.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgu8tcdvz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8bqtrsz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptpdvy3o9.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstosnn0y.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4i217t1d.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5oemtws.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft_bdmit.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6m267ovs.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6neuie9p.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmposeybgon.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdcu_whyo.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfdyq_3o.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy28bw97s.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyu94fnih.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ogvkd3h.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp577vaqnw.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplr82ilvt.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf10u0rpi.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhdc4qei.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9uulxp64.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9h4u476z.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflhb05yx.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_xlnvkc.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqd0wgyd_.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes3v5l4c.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9kyx1b9.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpalm85w78.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxlr1pln.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5metau03.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp69_iddi2.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2k5cvzhu.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd9c_smk1.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1idwuck.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzjqjzbzx.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9ua86h4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa2feeb37.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n303zub.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdoj4t6pw.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfrzezqv.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppxw75qfi.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1cx2mu12.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy01vk2v4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpay6bte4s.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpta6pi_uu.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_xamuad.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp59i17e7j.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4axve74t.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7x8uyfh.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpej18cy6d.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsq38u9k4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letters = new ArrayList<String>();\n  \
    \      for (Float grade : grades) {\n            if (grade >= 4.0) {\n       \
    \         letters.add(\"A+\");\n            } else if (grade >= 3.7) {\n     \
    \           letters.add(\"A\");\n            } else if (grade >= 3.3) {\n    \
    \            letters.add(\"A-\");\n            } else if (grade >= 3.0) {\n  \
    \              letters.add(\"B+\");\n            } else if (grade >= 2.7) {\n\
    \                letters.add(\"B\");\n            } else if (grade >= 2.3) {\n\
    \                letters.add(\"B-\");\n            } else if (grade >= 2.0) {\n\
    \                letters.add(\"C+\");\n            } else if (grade >= 1.7) {\n\
    \                letters.add(\"C\");\n            } else if (grade >= 1.3) {\n\
    \                letters.add(\"C-\");\n            } else if (grade >= 1.0) {\n\
    \                letters.add(\"D+\");\n            } else if (grade >= 0.7) {\n\
    \                letters.add(\"D\");\n            } else if (grade >= 0.0) {\n\
    \                letters.add(\"D-\");\n            } else {\n                letters.add(\"\
    E\");\n            }\n        }\n        return letters;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9p5qssld.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade == 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade > 3.7) {\n        \
    \        result.add(\"A\");\n            } else if (grade > 3.3) {\n         \
    \       result.add(\"A-\");\n            } else if (grade > 3.0) {\n         \
    \       result.add(\"B+\");\n            } else if (grade > 2.7) {\n         \
    \       result.add(\"B\");\n            } else if (grade > 2.3) {\n          \
    \      result.add(\"B-\");\n            } else if (grade > 2.0) {\n          \
    \      result.add(\"C+\");\n            } else if (grade > 1.7) {\n          \
    \      result.add(\"C\");\n            } else if (grade > 1.3) {\n           \
    \     result.add(\"C-\");\n            } else if (grade > 1.0) {\n           \
    \     result.add(\"D+\");\n            } else if (grade > 0.7) {\n           \
    \     result.add(\"D\");\n            } else if (grade > 0.0) {\n            \
    \    result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp408d_rct.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09srjhk2.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp474vyi0e.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9j9h_2v.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3bwkh79.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3w8jr_e5.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvqtdfu1r.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0r1vndq7.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3behgr01.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpurr9x5qy.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1jgegb40.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj7bv460p.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1w761gd.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqv4rm487.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdatrulwd.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapqyiatp.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrt3ss16.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvjsuzzj.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiptzpyfz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letters = new ArrayList<String>();\n  \
    \      for (Float grade : grades) {\n            if (grade >= 4.0) {\n       \
    \         letters.add(\"A+\");\n            } else if (grade >= 3.7) {\n     \
    \           letters.add(\"A\");\n            } else if (grade >= 3.3) {\n    \
    \            letters.add(\"A-\");\n            } else if (grade >= 3.0) {\n  \
    \              letters.add(\"B+\");\n            } else if (grade >= 2.7) {\n\
    \                letters.add(\"B\");\n            } else if (grade >= 2.3) {\n\
    \                letters.add(\"B-\");\n            } else if (grade >= 2.0) {\n\
    \                letters.add(\"C+\");\n            } else if (grade >= 1.7) {\n\
    \                letters.add(\"C\");\n            } else if (grade >= 1.3) {\n\
    \                letters.add(\"C-\");\n            } else if (grade >= 1.0) {\n\
    \                letters.add(\"D+\");\n            } else if (grade >= 0.7) {\n\
    \                letters.add(\"D\");\n            } else if (grade >= 0.0) {\n\
    \                letters.add(\"D-\");\n            } else {\n                letters.add(\"\
    E\");\n            }\n        }\n        return letters;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw91rnk55.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujo1361y.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmljutz3f.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphhbo5xpz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgmbqz2bz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> output = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        output.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         output.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         output.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          output.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           output.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           output.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            output.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             output.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             output.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              output.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               output.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               output.add(\"D-\");\n            } else {\n                output.add(\"\
    E\");\n            }\n        }\n        return output;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv1kjsswz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qbk7tsq.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnzxtuqx.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__wjrh_o.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkvvkcmdo.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rrl9oi5.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjkq0gy97.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp094wi648.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsop3644z.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqcumkv6c.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpws0hj4cb.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0xumxe1.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnq1paql2.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        // Write your code here\n        ArrayList<String> letterGrades\
    \ = new ArrayList<String>();\n        for (float grade : grades) {\n         \
    \   if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n         \
    \   } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n   \
    \         } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\"\
    );\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"\
    B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"\
    B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"\
    B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"\
    C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"\
    D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsbnw0ce2.java:66)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdxhni_wo.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfcw8bjt3.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6852fdbv.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpem50jl3r.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphlv97q31.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpehrfc47l.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcz2hgout.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jo8cjga.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_u77d3w1.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp56j2qw8.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6btc726.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6elvs9q.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh5xrcy6.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpygpt6ifx.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (float grade : grades) {\n            if (grade == 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade > 3.7) {\n        \
    \        result.add(\"A\");\n            } else if (grade > 3.3) {\n         \
    \       result.add(\"A-\");\n            } else if (grade > 3.0) {\n         \
    \       result.add(\"B+\");\n            } else if (grade > 2.7) {\n         \
    \       result.add(\"B\");\n            } else if (grade > 2.3) {\n          \
    \      result.add(\"B-\");\n            } else if (grade > 2.0) {\n          \
    \      result.add(\"C+\");\n            } else if (grade > 1.7) {\n          \
    \      result.add(\"C\");\n            } else if (grade > 1.3) {\n           \
    \     result.add(\"C-\");\n            } else if (grade > 1.0) {\n           \
    \     result.add(\"D+\");\n            } else if (grade > 0.7) {\n           \
    \     result.add(\"D\");\n            } else if (grade > 0.0) {\n            \
    \    result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphy0vivn5.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ws_vxpy.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhuahi9k.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb2z0exvo.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuwhy21wg.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7iot6l0m.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdifj45d8.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbbsfrijq.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxscqw4r4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90b97_h4.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ql4zctz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvi5948x3.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpouat_37x.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1i46q_bf.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2h_85l9.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsgqsr1x5.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4jsi7btj.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6d1yr8ac.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqm13qjqc.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx7zs_vsu.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyhmcvb_s.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw80t37w5.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        // Write your code here\n        ArrayList<String> letterGrades\
    \ = new ArrayList<String>();\n        for (Float grade : grades) {\n         \
    \   if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n         \
    \   } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n   \
    \         } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\"\
    );\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"\
    B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"\
    B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"\
    B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"\
    C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"\
    C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"\
    C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"\
    D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"\
    D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy562m98x.java:66)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmfg_9o3a.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqvxaoog.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkargrbeo.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfnxsobkf.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd5272h1x.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1zotcgs.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvytqmoq9.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx047stj8.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyicct0jl.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwev4ho6c.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnemyo6m6.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3o2tb49u.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj0gmj8js.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade == 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade > 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade\
    \ > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade\
    \ > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade\
    \ > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade\
    \ > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade\
    \ > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade\
    \ > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n\
    \                letterGrades.add(\"E\");\n            }\n        }\n        return\
    \ letterGrades;\n\n    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l,\
    \ (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\",\
    \ (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"\
    D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfp001da.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvh7m4j1k.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3pv8pqm1.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpct90ki8t.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprlqm8464.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwljmh37k.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdg0uyt21.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm8be1d4z.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6p_2vcqr.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpon9bjsw5.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzj20210.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1y4_oqeu.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11jdr4hi.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprlztc6lz.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhaliex9.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecfy5k4v.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0clo7g_i.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxgj8__m.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8gzzh_e.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0gdk_u2_.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbaz_ra29.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1gwriiir.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (Float grade : grades) {\n            if (grade >= 4.0) {\n        \
    \        result.add(\"A+\");\n            } else if (grade >= 3.7) {\n       \
    \         result.add(\"A\");\n            } else if (grade >= 3.3) {\n       \
    \         result.add(\"A-\");\n            } else if (grade >= 3.0) {\n      \
    \          result.add(\"B+\");\n            } else if (grade >= 2.7) {\n     \
    \           result.add(\"B\");\n            } else if (grade >= 2.3) {\n     \
    \           result.add(\"B-\");\n            } else if (grade >= 2.0) {\n    \
    \            result.add(\"C+\");\n            } else if (grade >= 1.7) {\n   \
    \             result.add(\"C\");\n            } else if (grade >= 1.3) {\n   \
    \             result.add(\"C-\");\n            } else if (grade >= 1.0) {\n  \
    \              result.add(\"D+\");\n            } else if (grade >= 0.7) {\n \
    \               result.add(\"D\");\n            } else if (grade >= 0.0) {\n \
    \               result.add(\"D-\");\n            } else {\n                result.add(\"\
    E\");\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp906k_lfg.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87ak_a49.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ojwnrzy.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_is5v9ha.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppae9zuws.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnu3kmzv9.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7hgiy1x.java:65)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // It is the last week of the semester and the teacher has\
    \ to give the grades\n    // to students. The teacher has been making her own\
    \ algorithm for grading.\n    // The only problem is, she has lost the code she\
    \ used for grading.\n    // She has given you a list of GPAs for some students\
    \ and you have to write \n    // a function that can output a list of letter grades\
    \ using the following table:\n    // GPA       |    Letter grade\n    // 4.0 \
    \               A+\n    // > 3.7                A \n    // > 3.3             \
    \   A- \n    // > 3.0                B+\n    // > 2.7                B \n    //\
    \ > 2.3                B-\n    // > 2.0                C+\n    // > 1.7      \
    \          C\n    // > 1.3                C-\n    // > 1.0                D+ \n\
    \    // > 0.7                D \n    // > 0.0                D-\n    // 0.0  \
    \              E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float>\
    \ grades) {\n        ArrayList<String> letterGrades = new ArrayList<String>();\n\
    \        for (Float grade : grades) {\n            if (grade >= 4.0) {\n     \
    \           letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n\
    \                letterGrades.add(\"A\");\n            } else if (grade >= 3.3)\
    \ {\n                letterGrades.add(\"A-\");\n            } else if (grade >=\
    \ 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if\
    \ (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else\
    \ if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            }\
    \ else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n      \
    \      } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\"\
    );\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"\
    D-\");\n            } else {\n                letterGrades.add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f,\
    \ (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n   \
    \ assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f,\
    \ (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"\
    D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    E\", (String)\"D-\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinrisymb.java:65)\n"
  exit_code: 1
  status: Exception
