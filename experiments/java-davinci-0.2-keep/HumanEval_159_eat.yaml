name: HumanEval_159_eat
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    // but now you need to eat more carrots to complete the\
  \ day's meals.\n    // you should return an array of [ total number of eaten carrots\
  \ after your meals,\n    // the number of carrots left after your meals ]\n    //\
  \ if there are not enough remaining carrots, you will eat all remaining carrots,\
  \ but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10) -> [11, 4]\n\
  \    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11, 0]\n    // *\
  \ eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n    // the\
  \ number of carrots that you have eaten.\n    // @need : integer\n    // the number\
  \ of carrots that you need to eat.\n    // @remaining : integer\n    // the number\
  \ of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number\
  \ <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have\
  \ fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining)\
  \ {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
  \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
  \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
  \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
  \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
  \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)0l)))));\n    }\n\n}\n"
completions: ["        // Your code here\n        long total = number + need;\n  \
    \      long left = remaining - need;\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(total);\n        result.add(left);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total <= remaining) {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining < need) {\n         \
    \   result.add(number + remaining);\n            result.add((long) 0);\n     \
    \   } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \  }\n        return result;\n", "        // Your code here\n        return new\
    \ ArrayList<Long>();\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (left < 0) {\n            total = total + left;\n            left\
    \ = 0;\n        }\n        result.add(total);\n        result.add(left);\n   \
    \     return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining >= need) {\n            result.add(number + need);\n       \
    \     result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (number + need <= remaining) {\n\
    \            result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (remaining < need) {\n            res.add(number\
    \ + remaining);\n            res.add((long) 0);\n        } else {\n          \
    \  res.add(number + need);\n            res.add(remaining - need);\n        }\n\
    \        return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (total > remaining) {\n            result.add(remaining);\n      \
    \      result.add(0L);\n        } else {\n            result.add(total);\n   \
    \         result.add(left);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (number >= need) {\n           \
    \ result.add(need);\n            result.add(remaining);\n        } else {\n  \
    \          if (remaining >= need - number) {\n                result.add(need);\n\
    \                result.add(remaining - (need - number));\n            } else\
    \ {\n                result.add(number + remaining);\n                result.add(0L);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total <= remaining) {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (number + need <= remaining) {\n\
    \            result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (number + need > remaining) {\n\
    \            result.add(remaining);\n            result.add(0L);\n        } else\
    \ {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   long left = remaining - need;\n        if (left < 0) {\n            total\
    \ = total + left;\n            left = 0;\n        }\n        result.add(total);\n\
    \        result.add(left);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        // Your code here\n        if(remaining < need) {\n            return new\
    \ ArrayList<Long>(Arrays.asList(number + remaining, 0L));\n        }\n       \
    \ return new ArrayList<Long>(Arrays.asList(number + need, remaining - need));\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (need <= remaining)\
    \ {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if(number + need <= remaining) {\n\
    \            result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if(remaining <\
    \ need) {\n            result.add(number + remaining);\n            result.add((long)0);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long total = number + need;\n        if (total\
    \ <= remaining) {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add(number + need);\n      \
    \  result.add(remaining - need);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (number + need > remaining) {\n\
    \            result.add(remaining);\n            result.add(0L);\n        } else\
    \ {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (need > remaining)\
    \ {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining >= need) {\n            result.add(number + need);\n       \
    \     result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ <= remaining) {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (need > remaining) {\n         \
    \   result.add(number + remaining);\n            result.add((long) 0);\n     \
    \   } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(need\
    \ + number);\n            result.add(remaining - need);\n        } else {\n  \
    \          result.add(remaining + number);\n            result.add(0L);\n    \
    \    }\n        return result;\n", "        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        long\
    \ total = number + need;\n        long left = remaining - need;\n        if (left\
    \ < 0) {\n            total += left;\n            left = 0;\n        }\n     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        result.add(total);\n\
    \        result.add(left);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (need > remaining) {\n         \
    \   result.add(number + remaining);\n            result.add((long) 0);\n     \
    \   } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add(number + need);\n        result.add(remaining\
    \ - need);\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (left < 0) {\n            total = total + left;\n            left\
    \ = 0;\n        }\n        result.add(total);\n        result.add(left);\n   \
    \     return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add((long) 0);\n        } else {\n       \
    \     result.add(number + need);\n            result.add(remaining - need);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(number\
    \ + need);\n        result.add(remaining - need);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (number >= need) {\n            result.add(number);\n\
    \            result.add(remaining);\n        } else {\n            if (remaining\
    \ >= need - number) {\n                result.add(need);\n                result.add(remaining\
    \ - (need - number));\n            } else {\n                result.add(remaining\
    \ + number);\n                result.add(0L);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining < need) {\n         \
    \   result.add(number + remaining);\n            result.add((long) 0);\n     \
    \   } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long eaten = number + need;\n        long\
    \ left = remaining - need;\n        if (left < 0) {\n            left = 0;\n \
    \       }\n        result.add(eaten);\n        result.add(left);\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining < need) {\n            result.add(number + remaining);\n   \
    \         result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        // your code here\n        return new ArrayList<Long>();\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long total = number + need;\n        if (total\
    \ <= remaining) {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        //\
    \ Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      long total = number + need;\n        if (total > remaining) {\n       \
    \     result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total <= remaining) {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n", "        ArrayList<Long> res = new\
    \ ArrayList<Long>();\n        if (remaining >= need) {\n            res.add(number\
    \ + need);\n            res.add(remaining - need);\n        } else {\n       \
    \     res.add(number + remaining);\n            res.add((long) 0);\n        }\n\
    \        return res;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (number < 0 || need < 0 || remaining < 0) {\n            result.add((long)\
    \ -1);\n            result.add((long) -1);\n            return result;\n     \
    \   }\n        if (number > 1000 || need > 1000 || remaining > 1000) {\n     \
    \       result.add((long) -1);\n            result.add((long) -1);\n         \
    \   return result;\n        }\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add((long) 0);\n            return result;\n\
    \        }\n        result.add(number + need);\n        result.add(remaining -\
    \ need);\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ <= remaining) {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining >= need) {\n            result.add(number + need);\n       \
    \     result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(number\
    \ + Math.min(need, remaining));\n        result.add(Math.max(remaining - need,\
    \ 0));\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        // your code here\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        long total =\
    \ number + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ <= remaining) {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ > remaining) {\n            result.add(remaining);\n            result.add(0L);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add((long) 0);\n        } else {\n       \
    \     result.add(number + need);\n            result.add(remaining - need);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if(remaining >= need) {\n            result.add(number + need);\n   \
    \         result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining < need) {\n         \
    \   result.add(number + remaining);\n            result.add((long) 0);\n     \
    \   } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        // Your code here\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        //\
    \ Your code here\n        return new ArrayList<Long>();\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (number + need <= remaining) {\n\
    \            result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total > remaining) {\n            result.add(remaining);\n           \
    \ result.add(0L);\n        } else {\n            result.add(total);\n        \
    \    result.add(remaining - total);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (number + need <= remaining) {\n      \
    \      result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (need <= remaining) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (number + need <= remaining) {\n      \
    \      result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total <= remaining) {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        // Write your\
    \ code here\n        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if(remaining >= need) {\n            result.add(number + need);\n          \
    \  result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if(number + need <= remaining){\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        }\n        else{\n\
    \            result.add(remaining);\n            result.add(0L);\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ <= remaining) {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add(number + Math.min(need,\
    \ remaining));\n        result.add(Math.max(remaining - need, 0));\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining >= need) {\n            result.add(number + need);\n       \
    \     result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number < 0\
    \ || need < 0 || remaining < 0) {\n            result.add(0L);\n            result.add(0L);\n\
    \            return result;\n        }\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000) {\n            result.add(0L);\n            result.add(0L);\n\
    \            return result;\n        }\n        long total = number + need;\n\
    \        if (total > remaining) {\n            result.add(remaining);\n      \
    \      result.add(0L);\n            return result;\n        }\n        result.add(total);\n\
    \        result.add(remaining - total);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   long left = 0;\n        if (total > remaining) {\n            left = 0;\n\
    \        } else {\n            left = remaining - total;\n        }\n        result.add(total);\n\
    \        result.add(left);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + need);\n        result.add(remaining - need);\n \
    \       return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        result.add(number + need);\n        result.add(remaining\
    \ - need);\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining < need) {\n            result.add(number + remaining);\n   \
    \         result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   long total = number + need;\n        if (total <= remaining) {\n         \
    \   result.add(total);\n            result.add(remaining - total);\n        }\
    \ else {\n            result.add(remaining);\n            result.add(0L);\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add(0L);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (number < 0 || need < 0 || remaining\
    \ < 0) {\n            result.add((long) -1);\n            result.add((long) -1);\n\
    \            return result;\n        }\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000) {\n            result.add((long) -1);\n            result.add((long)\
    \ -1);\n            return result;\n        }\n        if (remaining >= need)\
    \ {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n            return result;\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add((long) 0);\n            return result;\n\
    \        }\n", "        ArrayList<Long> result = new ArrayList<Long>();\n    \
    \    result.add(number + Math.min(need, remaining));\n        result.add(Math.max(remaining\
    \ - need, 0));\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        if (number < 0 || need < 0 || remaining < 0) {\n\
    \            result.add(0L);\n            result.add(0L);\n            return\
    \ result;\n        }\n        if (number > 1000 || need > 1000 || remaining >\
    \ 1000) {\n            result.add(0L);\n            result.add(0L);\n        \
    \    return result;\n        }\n        if (remaining == 0) {\n            result.add(number);\n\
    \            result.add(0L);\n            return result;\n        }\n        if\
    \ (remaining < need) {\n            result.add(number + remaining);\n        \
    \    result.add(0L);\n            return result;\n        }\n        result.add(number\
    \ + need);\n        result.add(remaining - need);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0L);\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (remaining >= need) {\n            result.add(total);\n\
    \            result.add(remaining - need);\n        } else {\n            result.add(total\
    \ - need + remaining);\n            result.add(0L);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining >= need) {\n            result.add(number + need);\n       \
    \     result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long total = number + need;\n        if (total\
    \ <= remaining) {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (need > remaining) {\n         \
    \   result.add(number + remaining);\n            result.add((long) 0);\n     \
    \   } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add(number + Math.min(need, remaining));\n\
    \        result.add(Math.max(remaining - need, 0));\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ > remaining) {\n            result.add(remaining);\n            result.add(0L);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (need > remaining) {\n         \
    \   result.add(number + remaining);\n            result.add((long) 0);\n     \
    \   } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (need > remaining) {\n            result.add(number\
    \ + remaining);\n            result.add((long) 0);\n        } else {\n       \
    \     result.add(number + need);\n            result.add(remaining - need);\n\
    \        }\n        return result;\n", "        // Write your code here\n    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total <= remaining) {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total > remaining) {\n            result.add(remaining);\n           \
    \ result.add(0L);\n        } else {\n            result.add(total);\n        \
    \    result.add(remaining - total);\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add((long) 0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (remaining >= need) {\n            result.add(number + need);\n       \
    \     result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        // your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = remaining - need;\n\
    \        if (left < 0) {\n            total = total + left;\n            left\
    \ = 0;\n        }\n        result.add(total);\n        result.add(left);\n   \
    \     return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add((long)\
    \ 0);\n        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add((long) 0);\n        } else {\n       \
    \     result.add(number + need);\n            result.add(remaining - need);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - (number + need));\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long total = number\
    \ + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0L);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ > remaining) {\n            result.add(remaining);\n            result.add(0L);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (number + need\
    \ <= remaining) {\n            result.add(number + need);\n            result.add(remaining\
    \ - (number + need));\n        } else {\n            result.add(remaining);\n\
    \            result.add(0L);\n        }\n        return result;\n", "        //\
    \ Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      if (remaining >= need) {\n            result.add(number + need);\n    \
    \        result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0L);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0L);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (remaining >= need) {\n        \
    \    result.add(number + need);\n            result.add(remaining - need);\n \
    \       } else {\n            result.add(number + remaining);\n            result.add(0L);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        long left = 0;\n        if (total\
    \ > remaining) {\n            left = total - remaining;\n            total = remaining;\n\
    \        }\n        result.add(total);\n        result.add(left);\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0L);\n        }\n    \
    \    return result;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
