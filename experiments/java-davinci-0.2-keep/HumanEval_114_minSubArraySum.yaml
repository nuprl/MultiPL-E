name: HumanEval_114_minSubArraySum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array of integers nums, find the minimum sum of\
  \ any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
  \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static\
  \ long minSubArraySum(ArrayList<Long> nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
  \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
  \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
  \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
  \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
  \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l,\
  \ (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
  \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
  \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
