name: HumanEval_49_modp
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long y = modp(n / 2, p);\n            return (y * y) % p;\n        } else {\n\
    \            return (modp(n - 1, p) * 2) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nps1y83.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ 2;\n        }\n        long half = modp(n / 2, p);\n        long result = (half\
    \ * half) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) %\
    \ p;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjbwav85k.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long result = half * half % p;\n        if (n % 2 == 1) result = result\
    \ * 2 % p;\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92n6euwy.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4tj_x9ov.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long half = modp(n / 2, p);\n            return (half * half) % p;\n       \
    \ } else {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long result = (half * half) % p;\n        if (n % 2 == 1) {\n       \
    \     result = (result * 2) % p;\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long a = modp(n / 2, p);\n    \
    \    long b = (a * a) % p;\n        if (n % 2 == 1) {\n            b = (b * 2)\
    \ % p;\n        }\n        return b;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long half = modp(n / 2, p);\n\
    \        long half2 = (half * half) % p;\n        if (n % 2 == 0) return half2;\n\
    \        return (half2 * n) % p;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0u8smimp.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long x = modp(n / 2, p);\n\
    \        x = (x * x) % p;\n        if (n % 2 == 1) x = (x * 2) % p;\n        return\
    \ x;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2zpd9jjr.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long x = modp(n / 2, p);\n        x = (x * x) % p;\n    \
    \    if (n % 2 == 1) x = (x * 2) % p;\n        return x;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long m = modp(n / 2, p);\n            return (m * m) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return t * t % p;\n        } else {\n            return modp(n -\
    \ 1, p) * 2 % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphh8gt6h2.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9ityr2n.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long m = modp(n / 2, p);\n            return (m * m) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n   \
    \     }\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n\
    \        if (n % 2 == 1) res = (res * 2) % p;\n        return res;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplnzgp6hr.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long result = (half * half) % p;\n        if (n % 2 == 1) result = (result\
    \ * 2) % p;\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return t * t % p;\n        } else {\n            return modp(n -\
    \ 1, p) * 2 % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * b) % p;\n            }\n            b = (b * b)\
    \ % p;\n            n >>= 1;\n        }\n        return res;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpho54nlyq.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long r = modp(n / 2, p);\n            return r * r % p;\n        }\n       \
    \ return modp(n - 1, p) * n % p;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1owbgt9d.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long res = (half * half) % p;\n        if (n % 2 == 1) res = (res * 2)\
    \ % p;\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long result = (half * half) % p;\n        if (n % 2 == 1) result = (result\
    \ * 2) % p;\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long res = 1;\n        long\
    \ a = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n           \
    \     res = (res * a) % p;\n            }\n            a = (a * a) % p;\n    \
    \        n /= 2;\n        }\n        return res;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long res = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * n)\
    \ % p;\n            }\n            n = n >> 1;\n            n = (n * n) % p;\n\
    \        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = 1;\n        for (int\
    \ i = 0; i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long res = modp(n / 2, p);\n\
    \        res = (res * res) % p;\n        if (n % 2 == 1) res = (res * 2) % p;\n\
    \        return res;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3qub9ae2.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_gkksbkt.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        long cur = 2;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                res = (res * cur) % p;\n            }\n            cur =\
    \ (cur * cur) % p;\n            n >>= 1;\n        }\n        return res;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo7nle7lj.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqt__0i3h.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvnt2oueq.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4wtblb2a.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        for (long i = 0; i < n; i++) {\n            res = (res * 2) % p;\n  \
    \      }\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyjy_yj66.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long x = modp(n / 2, p);\n    \
    \    if (n % 2 == 0) {\n            return (x * x) % p;\n        } else {\n  \
    \          return (x * x * 2) % p;\n        }\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxem7zv1d.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ 2;\n        }\n        long half = modp(n / 2, p);\n        long result = (half\
    \ * half) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) %\
    \ p;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long y = modp(n / 2, p);\n            return (y * y) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n\
    \        if (n % 2 == 1) res = (res * 2) % p;\n        return res;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jtcbfeo.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long ans = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                ans = (ans * 2)\
    \ % p;\n            }\n            n >>= 1;\n            if (n > 0) {\n      \
    \          ans = (ans * ans) % p;\n            }\n        }\n        return ans;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpivh5xdly.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ 2;\n        }\n        long half = modp(n / 2, p);\n        long result = (half\
    \ * half) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) %\
    \ p;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long x = modp(n / 2, p);\n        x = (x * x) % p;\n    \
    \    if (n % 2 == 1) x = (x * 2) % p;\n        return x;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long half = modp(n / 2, p);\n\
    \        long result = half * half % p;\n        if (n % 2 == 1) result = result\
    \ * n % p;\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdlikjgqo.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long result\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   result = (result * 2) % p;\n            }\n            n = n / 2;\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbi_5shk.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long x = modp(n / 2, p);\n        x = (x * x) % p;\n    \
    \    if (n % 2 == 1) x = (x * 2) % p;\n        return x;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long result\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   result = (result * 2) % p;\n            }\n            n = n / 2;\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe433zeyb.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long r = modp(n / 2, p);\n        r = (r * r) % p;\n    \
    \    if (n % 2 == 1) r = (r * 2) % p;\n        return r;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n   \
    \     }\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n   \
    \     }\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n   \
    \     }\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long ans = 1;\n        long\
    \ base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n        \
    \        ans = (ans * base) % p;\n            }\n            base = (base * base)\
    \ % p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaub5q725.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n   \
    \     }\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmnyyswm8.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long result = (half * half) % p;\n        if (n % 2 == 1) {\n       \
    \     result = (result * 2) % p;\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        long a = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n\
    \                res = (res * a) % p;\n            }\n            a = (a * a)\
    \ % p;\n            n /= 2;\n        }\n        return res;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        long cur = 2;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                res = (res * cur) % p;\n            }\n            cur =\
    \ (cur * cur) % p;\n            n >>= 1;\n        }\n        return res;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long x = modp(n / 2, p);\n    \
    \    x = (x * x) % p;\n        if (n % 2 == 1) {\n            x = (x * 2) % p;\n\
    \        }\n        return x;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n   \
    \     }\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ 2;\n        }\n        long half = modp(n / 2, p);\n        long result = (half\
    \ * half) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) %\
    \ p;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long ans = 1;\n        for (long i = 0; i < n; i++) {\n \
    \           ans = (ans * 2) % p;\n        }\n        return ans;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptgm_03wz.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = 1;\n        long a =\
    \ 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n               \
    \ res = (res * a) % p;\n            }\n            a = (a * a) % p;\n        \
    \    n /= 2;\n        }\n        return res;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long ans = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) != 0) {\n                ans = (ans * 2) % p;\n            }\n        \
    \    n >>= 1;\n        }\n        return ans;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84w8sg8n.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * b) % p;\n            }\n            b = (b * b)\
    \ % p;\n            n >>= 1;\n        }\n        return res;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long res = (half * half) % p;\n        if (n % 2 == 1) res = (res * 2)\
    \ % p;\n        return res;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd5ksjcez.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0s6_ym48.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        long a = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n\
    \                res = (res * a) % p;\n            }\n            a = (a * a)\
    \ % p;\n            n /= 2;\n        }\n        return res;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        long base\
    \ = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   ans = (ans * base) % p;\n            }\n            base = (base * base) %\
    \ p;\n            n /= 2;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ 2;\n        }\n        long half = modp(n / 2, p);\n        long result = (half\
    \ * half) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) %\
    \ p;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ 2;\n        }\n        long half = modp(n / 2, p);\n        long result = (half\
    \ * half) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) %\
    \ p;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long res = modp(n / 2, p);\n  \
    \      res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlxtd9r7.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long x = modp(n / 2, p);\n\
    \        x = (x * x) % p;\n        if (n % 2 == 1) x = (x * 2) % p;\n        return\
    \ x;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2eifnbn2.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphafs8paf.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy3uk65j6.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        long ans = 1;\n        for (int i = 0; i < n; i++) {\n  \
    \          ans = (ans * 2) % p;\n        }\n        return ans;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmggig0th.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf51awiuu.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpax2oaqy1.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ 2;\n        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            long x = modp(n\
    \ - 1, p);\n            return (2 * x) % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        } else if (n % 2 == 0) {\n            long\
    \ x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n   \
    \         return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (modp(n - 1, p) * 2) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        long base = 2;\n        while (n > 0) {\n            if (n % 2 == 1)\
    \ {\n                res = (res * base) % p;\n            }\n            base\
    \ = (base * base) % p;\n            n /= 2;\n        }\n        return res;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * 2) % p;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) {\n      \
    \      long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (2 * modp(n - 1, p)) % p;\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long result\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   result = (result * 2) % p;\n            }\n            n = n / 2;\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvqrs_mv5.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        long half = modp(n / 2, p);\n\
    \        long result = (half * half) % p;\n        if (n % 2 == 1) {\n       \
    \     result = (result * 2) % p;\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return 2;\n        if (n % 2 == 0) return modp(n/2,\
    \ p) * modp(n/2, p) % p;\n        return 2 * modp(n-1, p) % p;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5hesqx1.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long result = 1;\n       \
    \ long base = n;\n        while (n > 0) {\n            if (n % 2 == 1) {\n   \
    \             result = (result * base) % p;\n            }\n            base =\
    \ (base * base) % p;\n            n /= 2;\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr210_2co.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
    \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
    \    // 1\n    public static long modp(long n, long p) {\n        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;\n\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpejpjguu1.java:32)\n"
  exit_code: 1
  status: Exception
