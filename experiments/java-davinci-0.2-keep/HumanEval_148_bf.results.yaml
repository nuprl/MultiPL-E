name: HumanEval_148_bf
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzwu8xq_q.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzwu8xq_q.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpzwu8xq_q.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpzwu8xq_q.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpzwu8xq_q.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpzwu8xq_q.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpzwu8xq_q.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpzwu8xq_q.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpzwu8xq_q.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpzwu8xq_q.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpzwu8xq_q.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu7y8n59n.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpu7y8n59n.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpu7y8n59n.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpu7y8n59n.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpu7y8n59n.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpu7y8n59n.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpu7y8n59n.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpu7y8n59n.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpu7y8n59n.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpu7y8n59n.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpu7y8n59n.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpks4afvja.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpks4afvja.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpks4afvja.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpks4afvja.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpks4afvja.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpks4afvja.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpks4afvja.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpks4afvja.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpks4afvja.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpks4afvja.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpks4afvja.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu2nyqt_4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpu2nyqt_4.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpu2nyqt_4.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpu2nyqt_4.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpu2nyqt_4.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpu2nyqt_4.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpu2nyqt_4.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpu2nyqt_4.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpu2nyqt_4.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpu2nyqt_4.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpu2nyqt_4.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprp8wk2ct.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmprp8wk2ct.java:33: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmprp8wk2ct.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmprp8wk2ct.java:33: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmprp8wk2ct.java:33:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmprp8wk2ct.java:34: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmprp8wk2ct.java:34: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmprp8wk2ct.java:34: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmprp8wk2ct.java:34:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmprp8wk2ct.java:35: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmprp8wk2ct.java:35:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe9aj3ywn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpe9aj3ywn.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpe9aj3ywn.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpe9aj3ywn.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpe9aj3ywn.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpe9aj3ywn.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpe9aj3ywn.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpe9aj3ywn.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpe9aj3ywn.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpe9aj3ywn.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpe9aj3ywn.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0rl7jueq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0rl7jueq.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp0rl7jueq.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0rl7jueq.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0rl7jueq.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0rl7jueq.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp0rl7jueq.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp0rl7jueq.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp0rl7jueq.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp0rl7jueq.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp0rl7jueq.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsb8jst4v.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpsb8jst4v.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpsb8jst4v.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpsb8jst4v.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpsb8jst4v.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpsb8jst4v.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpsb8jst4v.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpsb8jst4v.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpsb8jst4v.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpsb8jst4v.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpsb8jst4v.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdpfsw34g.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdpfsw34g.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpdpfsw34g.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdpfsw34g.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdpfsw34g.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdpfsw34g.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpdpfsw34g.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpdpfsw34g.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpdpfsw34g.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpdpfsw34g.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpdpfsw34g.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu1mockzw.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpu1mockzw.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpu1mockzw.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpu1mockzw.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpu1mockzw.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpu1mockzw.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpu1mockzw.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpu1mockzw.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpu1mockzw.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpu1mockzw.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpu1mockzw.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpputgu7qd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpputgu7qd.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpputgu7qd.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpputgu7qd.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpputgu7qd.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpputgu7qd.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpputgu7qd.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpputgu7qd.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpputgu7qd.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpputgu7qd.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpputgu7qd.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggbg57hp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpggbg57hp.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpggbg57hp.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpggbg57hp.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpggbg57hp.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpggbg57hp.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpggbg57hp.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpggbg57hp.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpggbg57hp.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpggbg57hp.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpggbg57hp.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65gulm3a.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp65gulm3a.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp65gulm3a.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp65gulm3a.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp65gulm3a.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp65gulm3a.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp65gulm3a.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp65gulm3a.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp65gulm3a.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp65gulm3a.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp65gulm3a.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeqljxyb5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpeqljxyb5.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpeqljxyb5.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpeqljxyb5.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpeqljxyb5.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpeqljxyb5.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpeqljxyb5.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpeqljxyb5.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpeqljxyb5.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpeqljxyb5.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpeqljxyb5.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpui6iy_e0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpui6iy_e0.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpui6iy_e0.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpui6iy_e0.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpui6iy_e0.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpui6iy_e0.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpui6iy_e0.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpui6iy_e0.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpui6iy_e0.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpui6iy_e0.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpui6iy_e0.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpes0ts9e5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpes0ts9e5.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpes0ts9e5.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpes0ts9e5.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpes0ts9e5.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpes0ts9e5.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpes0ts9e5.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpes0ts9e5.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpes0ts9e5.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpes0ts9e5.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpes0ts9e5.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<>();\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6nu1_s1l.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6nu1_s1l.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp6nu1_s1l.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp6nu1_s1l.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp6nu1_s1l.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp6nu1_s1l.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp6nu1_s1l.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp6nu1_s1l.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp6nu1_s1l.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp6nu1_s1l.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp6nu1_s1l.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpua0glucd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpua0glucd.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpua0glucd.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpua0glucd.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpua0glucd.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpua0glucd.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpua0glucd.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpua0glucd.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpua0glucd.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpua0glucd.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpua0glucd.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzoagmio5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzoagmio5.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpzoagmio5.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpzoagmio5.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpzoagmio5.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpzoagmio5.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpzoagmio5.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpzoagmio5.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpzoagmio5.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpzoagmio5.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpzoagmio5.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp70x2o9zh.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp70x2o9zh.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp70x2o9zh.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp70x2o9zh.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp70x2o9zh.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp70x2o9zh.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp70x2o9zh.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp70x2o9zh.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp70x2o9zh.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp70x2o9zh.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp70x2o9zh.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3s1nwxf.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpl3s1nwxf.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpl3s1nwxf.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpl3s1nwxf.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpl3s1nwxf.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpl3s1nwxf.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpl3s1nwxf.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpl3s1nwxf.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpl3s1nwxf.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpl3s1nwxf.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpl3s1nwxf.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt6y6fe7f.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpt6y6fe7f.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpt6y6fe7f.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpt6y6fe7f.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpt6y6fe7f.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpt6y6fe7f.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpt6y6fe7f.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpt6y6fe7f.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpt6y6fe7f.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpt6y6fe7f.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpt6y6fe7f.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwk0l9mup.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpwk0l9mup.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpwk0l9mup.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpwk0l9mup.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpwk0l9mup.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpwk0l9mup.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpwk0l9mup.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpwk0l9mup.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpwk0l9mup.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpwk0l9mup.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpwk0l9mup.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp934atabg.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp934atabg.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp934atabg.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp934atabg.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp934atabg.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp934atabg.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp934atabg.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp934atabg.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp934atabg.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp934atabg.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp934atabg.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnks2r_sb.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpnks2r_sb.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpnks2r_sb.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpnks2r_sb.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpnks2r_sb.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpnks2r_sb.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpnks2r_sb.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpnks2r_sb.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpnks2r_sb.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpnks2r_sb.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpnks2r_sb.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdrf9k2q4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdrf9k2q4.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpdrf9k2q4.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdrf9k2q4.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdrf9k2q4.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdrf9k2q4.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpdrf9k2q4.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpdrf9k2q4.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpdrf9k2q4.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpdrf9k2q4.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpdrf9k2q4.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8na6ym3.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpj8na6ym3.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpj8na6ym3.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpj8na6ym3.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpj8na6ym3.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpj8na6ym3.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpj8na6ym3.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpj8na6ym3.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpj8na6ym3.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpj8na6ym3.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpj8na6ym3.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgtj2j0cq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpgtj2j0cq.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpgtj2j0cq.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpgtj2j0cq.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpgtj2j0cq.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpgtj2j0cq.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpgtj2j0cq.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpgtj2j0cq.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpgtj2j0cq.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpgtj2j0cq.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpgtj2j0cq.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcxp15d7t.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpcxp15d7t.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpcxp15d7t.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpcxp15d7t.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpcxp15d7t.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpcxp15d7t.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpcxp15d7t.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpcxp15d7t.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpcxp15d7t.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpcxp15d7t.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpcxp15d7t.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9a01yv4j.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9a01yv4j.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp9a01yv4j.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp9a01yv4j.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp9a01yv4j.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp9a01yv4j.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp9a01yv4j.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp9a01yv4j.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp9a01yv4j.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp9a01yv4j.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp9a01yv4j.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5c9lbcen.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5c9lbcen.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmp5c9lbcen.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp5c9lbcen.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp5c9lbcen.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp5c9lbcen.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp5c9lbcen.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp5c9lbcen.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp5c9lbcen.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp5c9lbcen.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp5c9lbcen.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmp5c9lbcen.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77bpdeum.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp77bpdeum.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp77bpdeum.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp77bpdeum.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp77bpdeum.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp77bpdeum.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp77bpdeum.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp77bpdeum.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp77bpdeum.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp77bpdeum.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp77bpdeum.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0fi5fxyu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0fi5fxyu.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp0fi5fxyu.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0fi5fxyu.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0fi5fxyu.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0fi5fxyu.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp0fi5fxyu.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp0fi5fxyu.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp0fi5fxyu.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp0fi5fxyu.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp0fi5fxyu.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzszoome.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfzszoome.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpfzszoome.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfzszoome.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfzszoome.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfzszoome.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpfzszoome.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpfzszoome.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpfzszoome.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpfzszoome.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpfzszoome.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ttv7tee.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp2ttv7tee.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp2ttv7tee.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp2ttv7tee.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp2ttv7tee.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp2ttv7tee.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp2ttv7tee.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp2ttv7tee.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp2ttv7tee.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp2ttv7tee.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp2ttv7tee.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9vz_ek7t.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9vz_ek7t.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp9vz_ek7t.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp9vz_ek7t.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp9vz_ek7t.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp9vz_ek7t.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp9vz_ek7t.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp9vz_ek7t.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp9vz_ek7t.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp9vz_ek7t.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp9vz_ek7t.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi97xtvwy.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpi97xtvwy.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmpi97xtvwy.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpi97xtvwy.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpi97xtvwy.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpi97xtvwy.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpi97xtvwy.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpi97xtvwy.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpi97xtvwy.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpi97xtvwy.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpi97xtvwy.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpi97xtvwy.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi15jcklt.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpi15jcklt.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpi15jcklt.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpi15jcklt.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpi15jcklt.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpi15jcklt.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpi15jcklt.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpi15jcklt.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpi15jcklt.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpi15jcklt.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpi15jcklt.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxujd3740.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxujd3740.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpxujd3740.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpxujd3740.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpxujd3740.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpxujd3740.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpxujd3740.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpxujd3740.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpxujd3740.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpxujd3740.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpxujd3740.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0p18glej.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0p18glej.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp0p18glej.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0p18glej.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0p18glej.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0p18glej.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp0p18glej.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp0p18glej.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp0p18glej.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp0p18glej.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp0p18glej.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfcjtwobb.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfcjtwobb.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpfcjtwobb.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfcjtwobb.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfcjtwobb.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfcjtwobb.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpfcjtwobb.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpfcjtwobb.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpfcjtwobb.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpfcjtwobb.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpfcjtwobb.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9gsjdgmn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9gsjdgmn.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmp9gsjdgmn.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp9gsjdgmn.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp9gsjdgmn.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp9gsjdgmn.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp9gsjdgmn.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp9gsjdgmn.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp9gsjdgmn.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp9gsjdgmn.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp9gsjdgmn.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmp9gsjdgmn.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4l_hqtml.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp4l_hqtml.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp4l_hqtml.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp4l_hqtml.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp4l_hqtml.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp4l_hqtml.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp4l_hqtml.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp4l_hqtml.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp4l_hqtml.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp4l_hqtml.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp4l_hqtml.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppyi3d8ya.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmppyi3d8ya.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmppyi3d8ya.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmppyi3d8ya.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmppyi3d8ya.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmppyi3d8ya.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmppyi3d8ya.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmppyi3d8ya.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmppyi3d8ya.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmppyi3d8ya.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmppyi3d8ya.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkvaehp99.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpkvaehp99.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpkvaehp99.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpkvaehp99.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpkvaehp99.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpkvaehp99.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpkvaehp99.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpkvaehp99.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpkvaehp99.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpkvaehp99.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpkvaehp99.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqafuskzv.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqafuskzv.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpqafuskzv.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpqafuskzv.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpqafuskzv.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpqafuskzv.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpqafuskzv.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpqafuskzv.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpqafuskzv.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpqafuskzv.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpqafuskzv.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpekifwwng.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpekifwwng.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpekifwwng.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpekifwwng.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpekifwwng.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpekifwwng.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpekifwwng.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpekifwwng.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpekifwwng.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpekifwwng.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpekifwwng.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyskliw1d.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpyskliw1d.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmpyskliw1d.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpyskliw1d.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpyskliw1d.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpyskliw1d.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpyskliw1d.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpyskliw1d.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpyskliw1d.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpyskliw1d.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpyskliw1d.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpyskliw1d.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5mlanjx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpq5mlanjx.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpq5mlanjx.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpq5mlanjx.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpq5mlanjx.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpq5mlanjx.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpq5mlanjx.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpq5mlanjx.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpq5mlanjx.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpq5mlanjx.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpq5mlanjx.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeaw16pii.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpeaw16pii.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpeaw16pii.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpeaw16pii.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpeaw16pii.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpeaw16pii.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpeaw16pii.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpeaw16pii.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpeaw16pii.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpeaw16pii.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpeaw16pii.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpub6j7_tv.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpub6j7_tv.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpub6j7_tv.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpub6j7_tv.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpub6j7_tv.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpub6j7_tv.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpub6j7_tv.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpub6j7_tv.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpub6j7_tv.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpub6j7_tv.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpub6j7_tv.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbntzsmdx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpbntzsmdx.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpbntzsmdx.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpbntzsmdx.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpbntzsmdx.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpbntzsmdx.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpbntzsmdx.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpbntzsmdx.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpbntzsmdx.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpbntzsmdx.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpbntzsmdx.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzyep88c7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzyep88c7.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmpzyep88c7.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpzyep88c7.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpzyep88c7.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpzyep88c7.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpzyep88c7.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpzyep88c7.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpzyep88c7.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpzyep88c7.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpzyep88c7.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpzyep88c7.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd9vpcwqm.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpd9vpcwqm.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpd9vpcwqm.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpd9vpcwqm.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpd9vpcwqm.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpd9vpcwqm.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpd9vpcwqm.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpd9vpcwqm.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpd9vpcwqm.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpd9vpcwqm.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpd9vpcwqm.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeza4vlxu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpeza4vlxu.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpeza4vlxu.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpeza4vlxu.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpeza4vlxu.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpeza4vlxu.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpeza4vlxu.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpeza4vlxu.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpeza4vlxu.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpeza4vlxu.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpeza4vlxu.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps8j8cl7n.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmps8j8cl7n.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmps8j8cl7n.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmps8j8cl7n.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmps8j8cl7n.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmps8j8cl7n.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmps8j8cl7n.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmps8j8cl7n.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmps8j8cl7n.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmps8j8cl7n.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmps8j8cl7n.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpefenvckn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpefenvckn.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpefenvckn.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpefenvckn.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpefenvckn.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpefenvckn.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpefenvckn.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpefenvckn.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpefenvckn.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpefenvckn.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpefenvckn.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk829dh_5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpk829dh_5.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpk829dh_5.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpk829dh_5.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpk829dh_5.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpk829dh_5.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpk829dh_5.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpk829dh_5.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpk829dh_5.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpk829dh_5.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpk829dh_5.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkrldqjw1.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpkrldqjw1.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpkrldqjw1.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpkrldqjw1.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpkrldqjw1.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpkrldqjw1.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpkrldqjw1.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpkrldqjw1.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpkrldqjw1.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpkrldqjw1.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpkrldqjw1.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpns0b2qkf.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpns0b2qkf.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpns0b2qkf.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpns0b2qkf.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpns0b2qkf.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpns0b2qkf.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpns0b2qkf.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpns0b2qkf.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpns0b2qkf.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpns0b2qkf.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpns0b2qkf.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr69ubybn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpr69ubybn.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpr69ubybn.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpr69ubybn.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpr69ubybn.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpr69ubybn.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpr69ubybn.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpr69ubybn.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpr69ubybn.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpr69ubybn.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpr69ubybn.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3zn49s66.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3zn49s66.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp3zn49s66.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3zn49s66.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3zn49s66.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3zn49s66.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp3zn49s66.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp3zn49s66.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp3zn49s66.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp3zn49s66.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp3zn49s66.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoe_wldgd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpoe_wldgd.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpoe_wldgd.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpoe_wldgd.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpoe_wldgd.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpoe_wldgd.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpoe_wldgd.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpoe_wldgd.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpoe_wldgd.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpoe_wldgd.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpoe_wldgd.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpicpd0hnp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpicpd0hnp.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpicpd0hnp.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpicpd0hnp.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpicpd0hnp.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpicpd0hnp.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpicpd0hnp.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpicpd0hnp.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpicpd0hnp.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpicpd0hnp.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpicpd0hnp.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0xdpb66a.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0xdpb66a.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp0xdpb66a.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0xdpb66a.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0xdpb66a.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0xdpb66a.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp0xdpb66a.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp0xdpb66a.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp0xdpb66a.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp0xdpb66a.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp0xdpb66a.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmyx2ksyv.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpmyx2ksyv.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpmyx2ksyv.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpmyx2ksyv.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpmyx2ksyv.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpmyx2ksyv.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpmyx2ksyv.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpmyx2ksyv.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpmyx2ksyv.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpmyx2ksyv.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpmyx2ksyv.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60zm94qh.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp60zm94qh.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp60zm94qh.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp60zm94qh.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp60zm94qh.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp60zm94qh.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp60zm94qh.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp60zm94qh.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp60zm94qh.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp60zm94qh.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp60zm94qh.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ihwgpv7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9ihwgpv7.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp9ihwgpv7.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp9ihwgpv7.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp9ihwgpv7.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp9ihwgpv7.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp9ihwgpv7.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp9ihwgpv7.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp9ihwgpv7.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp9ihwgpv7.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp9ihwgpv7.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfn9dby3s.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfn9dby3s.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpfn9dby3s.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfn9dby3s.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfn9dby3s.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfn9dby3s.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpfn9dby3s.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpfn9dby3s.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpfn9dby3s.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpfn9dby3s.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpfn9dby3s.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgat7j_5k.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpgat7j_5k.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpgat7j_5k.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpgat7j_5k.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpgat7j_5k.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpgat7j_5k.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpgat7j_5k.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpgat7j_5k.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpgat7j_5k.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpgat7j_5k.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpgat7j_5k.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk9thtgqv.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpk9thtgqv.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpk9thtgqv.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpk9thtgqv.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpk9thtgqv.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpk9thtgqv.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpk9thtgqv.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpk9thtgqv.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpk9thtgqv.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpk9thtgqv.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpk9thtgqv.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9r70v58.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpv9r70v58.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpv9r70v58.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpv9r70v58.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpv9r70v58.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpv9r70v58.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpv9r70v58.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpv9r70v58.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpv9r70v58.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpv9r70v58.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpv9r70v58.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp882cn8ux.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp882cn8ux.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp882cn8ux.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp882cn8ux.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp882cn8ux.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp882cn8ux.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp882cn8ux.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp882cn8ux.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp882cn8ux.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp882cn8ux.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp882cn8ux.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp13k4pg4p.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp13k4pg4p.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp13k4pg4p.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp13k4pg4p.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp13k4pg4p.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp13k4pg4p.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp13k4pg4p.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp13k4pg4p.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp13k4pg4p.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp13k4pg4p.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp13k4pg4p.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphaokkyjn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmphaokkyjn.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmphaokkyjn.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmphaokkyjn.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmphaokkyjn.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmphaokkyjn.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmphaokkyjn.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmphaokkyjn.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmphaokkyjn.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmphaokkyjn.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmphaokkyjn.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_uj_o2b6.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp_uj_o2b6.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp_uj_o2b6.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp_uj_o2b6.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp_uj_o2b6.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp_uj_o2b6.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp_uj_o2b6.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp_uj_o2b6.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp_uj_o2b6.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp_uj_o2b6.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp_uj_o2b6.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfokhycyv.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfokhycyv.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpfokhycyv.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfokhycyv.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfokhycyv.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfokhycyv.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpfokhycyv.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpfokhycyv.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpfokhycyv.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpfokhycyv.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpfokhycyv.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_jsa25b.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpm_jsa25b.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpm_jsa25b.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpm_jsa25b.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpm_jsa25b.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpm_jsa25b.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpm_jsa25b.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpm_jsa25b.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpm_jsa25b.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpm_jsa25b.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpm_jsa25b.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6rn8_796.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6rn8_796.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp6rn8_796.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp6rn8_796.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp6rn8_796.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp6rn8_796.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp6rn8_796.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp6rn8_796.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp6rn8_796.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp6rn8_796.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp6rn8_796.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa6hs2awd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpa6hs2awd.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpa6hs2awd.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpa6hs2awd.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpa6hs2awd.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpa6hs2awd.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpa6hs2awd.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpa6hs2awd.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpa6hs2awd.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpa6hs2awd.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpa6hs2awd.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpto7ljusm.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpto7ljusm.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpto7ljusm.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpto7ljusm.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpto7ljusm.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpto7ljusm.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpto7ljusm.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpto7ljusm.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpto7ljusm.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpto7ljusm.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpto7ljusm.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpk1pdrsny.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpk1pdrsny.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpk1pdrsny.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpk1pdrsny.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpk1pdrsny.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpk1pdrsny.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpk1pdrsny.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpk1pdrsny.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpk1pdrsny.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpk1pdrsny.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpk1pdrsny.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxhwewm8c.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxhwewm8c.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmpxhwewm8c.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpxhwewm8c.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpxhwewm8c.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpxhwewm8c.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpxhwewm8c.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpxhwewm8c.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpxhwewm8c.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpxhwewm8c.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpxhwewm8c.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpxhwewm8c.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuroixp36.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpuroixp36.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpuroixp36.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpuroixp36.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpuroixp36.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpuroixp36.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpuroixp36.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpuroixp36.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpuroixp36.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpuroixp36.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpuroixp36.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphc6e2ur8.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmphc6e2ur8.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmphc6e2ur8.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmphc6e2ur8.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmphc6e2ur8.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmphc6e2ur8.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmphc6e2ur8.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmphc6e2ur8.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmphc6e2ur8.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmphc6e2ur8.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmphc6e2ur8.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplveqzuwv.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmplveqzuwv.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmplveqzuwv.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmplveqzuwv.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmplveqzuwv.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmplveqzuwv.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmplveqzuwv.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmplveqzuwv.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmplveqzuwv.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmplveqzuwv.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmplveqzuwv.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpld04c18y.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpld04c18y.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpld04c18y.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpld04c18y.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpld04c18y.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpld04c18y.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpld04c18y.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpld04c18y.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpld04c18y.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpld04c18y.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpld04c18y.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5hahfp1y.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5hahfp1y.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp5hahfp1y.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp5hahfp1y.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp5hahfp1y.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp5hahfp1y.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp5hahfp1y.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp5hahfp1y.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp5hahfp1y.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp5hahfp1y.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp5hahfp1y.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiuwpx0nd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpiuwpx0nd.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpiuwpx0nd.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpiuwpx0nd.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpiuwpx0nd.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpiuwpx0nd.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpiuwpx0nd.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpiuwpx0nd.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpiuwpx0nd.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpiuwpx0nd.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpiuwpx0nd.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplxpy6199.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmplxpy6199.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmplxpy6199.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmplxpy6199.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmplxpy6199.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmplxpy6199.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmplxpy6199.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmplxpy6199.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmplxpy6199.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmplxpy6199.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmplxpy6199.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpalwdilyu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpalwdilyu.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpalwdilyu.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpalwdilyu.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpalwdilyu.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpalwdilyu.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpalwdilyu.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpalwdilyu.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpalwdilyu.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpalwdilyu.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpalwdilyu.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4wmel_mj.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp4wmel_mj.java:33: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp4wmel_mj.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp4wmel_mj.java:33: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp4wmel_mj.java:33:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp4wmel_mj.java:34: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp4wmel_mj.java:34: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp4wmel_mj.java:34: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp4wmel_mj.java:34:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp4wmel_mj.java:35: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp4wmel_mj.java:35:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3q_29mnx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3q_29mnx.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp3q_29mnx.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3q_29mnx.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3q_29mnx.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3q_29mnx.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp3q_29mnx.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp3q_29mnx.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp3q_29mnx.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp3q_29mnx.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp3q_29mnx.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpge3ugkdc.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpge3ugkdc.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpge3ugkdc.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpge3ugkdc.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpge3ugkdc.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpge3ugkdc.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpge3ugkdc.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpge3ugkdc.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpge3ugkdc.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpge3ugkdc.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpge3ugkdc.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0c221rcg.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0c221rcg.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp0c221rcg.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0c221rcg.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0c221rcg.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0c221rcg.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp0c221rcg.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp0c221rcg.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp0c221rcg.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp0c221rcg.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp0c221rcg.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7tsw3q84.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp7tsw3q84.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp7tsw3q84.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp7tsw3q84.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp7tsw3q84.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp7tsw3q84.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp7tsw3q84.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp7tsw3q84.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp7tsw3q84.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp7tsw3q84.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp7tsw3q84.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpl4q5hgj1.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpl4q5hgj1.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpl4q5hgj1.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpl4q5hgj1.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpl4q5hgj1.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpl4q5hgj1.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpl4q5hgj1.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpl4q5hgj1.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpl4q5hgj1.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpl4q5hgj1.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpl4q5hgj1.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjk2df3kw.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpjk2df3kw.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpjk2df3kw.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpjk2df3kw.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpjk2df3kw.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpjk2df3kw.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpjk2df3kw.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpjk2df3kw.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpjk2df3kw.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpjk2df3kw.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpjk2df3kw.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8ad0_bw.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpn8ad0_bw.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpn8ad0_bw.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpn8ad0_bw.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpn8ad0_bw.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpn8ad0_bw.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpn8ad0_bw.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpn8ad0_bw.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpn8ad0_bw.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpn8ad0_bw.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpn8ad0_bw.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvl8gk1kb.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpvl8gk1kb.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpvl8gk1kb.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpvl8gk1kb.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpvl8gk1kb.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpvl8gk1kb.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpvl8gk1kb.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpvl8gk1kb.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpvl8gk1kb.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpvl8gk1kb.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpvl8gk1kb.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2007sid.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpm2007sid.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpm2007sid.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpm2007sid.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpm2007sid.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpm2007sid.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpm2007sid.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpm2007sid.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpm2007sid.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpm2007sid.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpm2007sid.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy2eyz4xc.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpy2eyz4xc.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpy2eyz4xc.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpy2eyz4xc.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpy2eyz4xc.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpy2eyz4xc.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpy2eyz4xc.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpy2eyz4xc.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpy2eyz4xc.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpy2eyz4xc.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpy2eyz4xc.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcidduztv.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpcidduztv.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpcidduztv.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpcidduztv.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpcidduztv.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpcidduztv.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpcidduztv.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpcidduztv.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpcidduztv.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpcidduztv.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpcidduztv.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdr98yqt4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdr98yqt4.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpdr98yqt4.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdr98yqt4.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdr98yqt4.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdr98yqt4.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpdr98yqt4.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpdr98yqt4.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpdr98yqt4.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpdr98yqt4.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpdr98yqt4.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptv3liuux.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmptv3liuux.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmptv3liuux.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmptv3liuux.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmptv3liuux.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmptv3liuux.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmptv3liuux.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmptv3liuux.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmptv3liuux.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmptv3liuux.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmptv3liuux.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5s6e0q0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpl5s6e0q0.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpl5s6e0q0.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpl5s6e0q0.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpl5s6e0q0.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpl5s6e0q0.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpl5s6e0q0.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpl5s6e0q0.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpl5s6e0q0.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpl5s6e0q0.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpl5s6e0q0.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39y74ja_.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp39y74ja_.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp39y74ja_.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp39y74ja_.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp39y74ja_.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp39y74ja_.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp39y74ja_.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp39y74ja_.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp39y74ja_.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp39y74ja_.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp39y74ja_.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp11e1v5of.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp11e1v5of.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp11e1v5of.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp11e1v5of.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp11e1v5of.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp11e1v5of.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp11e1v5of.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp11e1v5of.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp11e1v5of.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp11e1v5of.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp11e1v5of.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9gsmxlmh.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9gsmxlmh.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp9gsmxlmh.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp9gsmxlmh.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp9gsmxlmh.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp9gsmxlmh.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp9gsmxlmh.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp9gsmxlmh.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp9gsmxlmh.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp9gsmxlmh.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp9gsmxlmh.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpapjcjbu8.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpapjcjbu8.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpapjcjbu8.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpapjcjbu8.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpapjcjbu8.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpapjcjbu8.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpapjcjbu8.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpapjcjbu8.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpapjcjbu8.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpapjcjbu8.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpapjcjbu8.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbajk03jj.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpbajk03jj.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpbajk03jj.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpbajk03jj.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpbajk03jj.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpbajk03jj.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpbajk03jj.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpbajk03jj.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpbajk03jj.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpbajk03jj.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpbajk03jj.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbosf_6ic.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpbosf_6ic.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpbosf_6ic.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpbosf_6ic.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpbosf_6ic.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpbosf_6ic.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpbosf_6ic.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpbosf_6ic.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpbosf_6ic.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpbosf_6ic.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpbosf_6ic.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpinonclsd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpinonclsd.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpinonclsd.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpinonclsd.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpinonclsd.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpinonclsd.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpinonclsd.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpinonclsd.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpinonclsd.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpinonclsd.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpinonclsd.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz0790l1d.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpz0790l1d.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpz0790l1d.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpz0790l1d.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpz0790l1d.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpz0790l1d.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpz0790l1d.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpz0790l1d.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpz0790l1d.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpz0790l1d.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpz0790l1d.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvylp9cax.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpvylp9cax.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpvylp9cax.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpvylp9cax.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpvylp9cax.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpvylp9cax.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpvylp9cax.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpvylp9cax.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpvylp9cax.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpvylp9cax.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpvylp9cax.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6y5s2apl.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6y5s2apl.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp6y5s2apl.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp6y5s2apl.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp6y5s2apl.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp6y5s2apl.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp6y5s2apl.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp6y5s2apl.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp6y5s2apl.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp6y5s2apl.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp6y5s2apl.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpccl8eqre.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpccl8eqre.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpccl8eqre.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpccl8eqre.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpccl8eqre.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpccl8eqre.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpccl8eqre.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpccl8eqre.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpccl8eqre.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpccl8eqre.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpccl8eqre.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyy9u0m04.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpyy9u0m04.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmpyy9u0m04.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpyy9u0m04.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpyy9u0m04.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpyy9u0m04.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpyy9u0m04.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpyy9u0m04.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpyy9u0m04.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpyy9u0m04.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpyy9u0m04.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpyy9u0m04.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwfbgu0j.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqwfbgu0j.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpqwfbgu0j.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpqwfbgu0j.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpqwfbgu0j.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpqwfbgu0j.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpqwfbgu0j.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpqwfbgu0j.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpqwfbgu0j.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpqwfbgu0j.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpqwfbgu0j.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu91yvxel.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpu91yvxel.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpu91yvxel.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpu91yvxel.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpu91yvxel.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpu91yvxel.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpu91yvxel.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpu91yvxel.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpu91yvxel.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpu91yvxel.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpu91yvxel.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm9awrr02.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpm9awrr02.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpm9awrr02.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpm9awrr02.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpm9awrr02.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpm9awrr02.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpm9awrr02.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpm9awrr02.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpm9awrr02.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpm9awrr02.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpm9awrr02.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7qf_6ak3.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp7qf_6ak3.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp7qf_6ak3.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp7qf_6ak3.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp7qf_6ak3.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp7qf_6ak3.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp7qf_6ak3.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp7qf_6ak3.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp7qf_6ak3.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp7qf_6ak3.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp7qf_6ak3.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyaandx25.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpyaandx25.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpyaandx25.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpyaandx25.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpyaandx25.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpyaandx25.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpyaandx25.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpyaandx25.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpyaandx25.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpyaandx25.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpyaandx25.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpijq8udm0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpijq8udm0.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpijq8udm0.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpijq8udm0.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpijq8udm0.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpijq8udm0.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpijq8udm0.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpijq8udm0.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpijq8udm0.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpijq8udm0.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpijq8udm0.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfe5elfft.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfe5elfft.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpfe5elfft.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfe5elfft.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfe5elfft.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfe5elfft.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpfe5elfft.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpfe5elfft.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpfe5elfft.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpfe5elfft.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpfe5elfft.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpeyh29hb6.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpeyh29hb6.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpeyh29hb6.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpeyh29hb6.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpeyh29hb6.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpeyh29hb6.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpeyh29hb6.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpeyh29hb6.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpeyh29hb6.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpeyh29hb6.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpeyh29hb6.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbnm2g4bt.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpbnm2g4bt.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpbnm2g4bt.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpbnm2g4bt.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpbnm2g4bt.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpbnm2g4bt.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpbnm2g4bt.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpbnm2g4bt.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpbnm2g4bt.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpbnm2g4bt.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpbnm2g4bt.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvudf095.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpnvudf095.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpnvudf095.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpnvudf095.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpnvudf095.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpnvudf095.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpnvudf095.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpnvudf095.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpnvudf095.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpnvudf095.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpnvudf095.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq6mfy0fx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpq6mfy0fx.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpq6mfy0fx.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpq6mfy0fx.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpq6mfy0fx.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpq6mfy0fx.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpq6mfy0fx.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpq6mfy0fx.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpq6mfy0fx.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpq6mfy0fx.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpq6mfy0fx.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphqfic3df.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmphqfic3df.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmphqfic3df.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmphqfic3df.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmphqfic3df.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmphqfic3df.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmphqfic3df.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmphqfic3df.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmphqfic3df.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmphqfic3df.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmphqfic3df.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bh_v_gz.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp1bh_v_gz.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp1bh_v_gz.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp1bh_v_gz.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp1bh_v_gz.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp1bh_v_gz.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp1bh_v_gz.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp1bh_v_gz.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp1bh_v_gz.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp1bh_v_gz.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp1bh_v_gz.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi4gy0bb6.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpi4gy0bb6.java:33: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpi4gy0bb6.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpi4gy0bb6.java:33: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpi4gy0bb6.java:33:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpi4gy0bb6.java:34: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpi4gy0bb6.java:34: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpi4gy0bb6.java:34: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpi4gy0bb6.java:34:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpi4gy0bb6.java:35: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpi4gy0bb6.java:35:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmperxuu8__.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmperxuu8__.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmperxuu8__.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmperxuu8__.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmperxuu8__.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmperxuu8__.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmperxuu8__.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmperxuu8__.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmperxuu8__.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmperxuu8__.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmperxuu8__.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmperxuu8__.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8h5mgy61.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp8h5mgy61.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp8h5mgy61.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp8h5mgy61.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp8h5mgy61.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp8h5mgy61.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp8h5mgy61.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp8h5mgy61.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp8h5mgy61.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp8h5mgy61.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp8h5mgy61.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5oifhlks.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5oifhlks.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp5oifhlks.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp5oifhlks.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp5oifhlks.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp5oifhlks.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp5oifhlks.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp5oifhlks.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp5oifhlks.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp5oifhlks.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp5oifhlks.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppaleg9l2.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmppaleg9l2.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmppaleg9l2.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmppaleg9l2.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmppaleg9l2.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmppaleg9l2.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmppaleg9l2.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmppaleg9l2.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmppaleg9l2.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmppaleg9l2.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmppaleg9l2.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpanwgenfl.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpanwgenfl.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpanwgenfl.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpanwgenfl.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpanwgenfl.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpanwgenfl.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpanwgenfl.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpanwgenfl.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpanwgenfl.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpanwgenfl.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpanwgenfl.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp44rq7fpi.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp44rq7fpi.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp44rq7fpi.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp44rq7fpi.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp44rq7fpi.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp44rq7fpi.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp44rq7fpi.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp44rq7fpi.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp44rq7fpi.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp44rq7fpi.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp44rq7fpi.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppvaiy6p4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmppvaiy6p4.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmppvaiy6p4.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmppvaiy6p4.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmppvaiy6p4.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmppvaiy6p4.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmppvaiy6p4.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmppvaiy6p4.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmppvaiy6p4.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmppvaiy6p4.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmppvaiy6p4.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa8v_53lw.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpa8v_53lw.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpa8v_53lw.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpa8v_53lw.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpa8v_53lw.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpa8v_53lw.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpa8v_53lw.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpa8v_53lw.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpa8v_53lw.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpa8v_53lw.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpa8v_53lw.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpe5uk2j78.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpe5uk2j78.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpe5uk2j78.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpe5uk2j78.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpe5uk2j78.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpe5uk2j78.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpe5uk2j78.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpe5uk2j78.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpe5uk2j78.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpe5uk2j78.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpe5uk2j78.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp69eb64w6.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp69eb64w6.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp69eb64w6.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp69eb64w6.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp69eb64w6.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp69eb64w6.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp69eb64w6.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp69eb64w6.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp69eb64w6.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp69eb64w6.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp69eb64w6.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaf0p5qjr.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpaf0p5qjr.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpaf0p5qjr.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpaf0p5qjr.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpaf0p5qjr.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpaf0p5qjr.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpaf0p5qjr.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpaf0p5qjr.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpaf0p5qjr.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpaf0p5qjr.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpaf0p5qjr.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25v00ft8.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp25v00ft8.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp25v00ft8.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp25v00ft8.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp25v00ft8.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp25v00ft8.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp25v00ft8.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp25v00ft8.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp25v00ft8.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp25v00ft8.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp25v00ft8.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ossonqj.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp2ossonqj.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp2ossonqj.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp2ossonqj.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp2ossonqj.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp2ossonqj.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp2ossonqj.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp2ossonqj.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp2ossonqj.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp2ossonqj.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp2ossonqj.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8cguubd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpl8cguubd.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpl8cguubd.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpl8cguubd.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpl8cguubd.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpl8cguubd.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpl8cguubd.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpl8cguubd.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpl8cguubd.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpl8cguubd.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpl8cguubd.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm7pzmrs0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpm7pzmrs0.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpm7pzmrs0.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpm7pzmrs0.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpm7pzmrs0.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpm7pzmrs0.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpm7pzmrs0.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpm7pzmrs0.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpm7pzmrs0.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpm7pzmrs0.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpm7pzmrs0.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6x6ifutf.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6x6ifutf.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp6x6ifutf.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp6x6ifutf.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp6x6ifutf.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp6x6ifutf.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp6x6ifutf.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp6x6ifutf.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp6x6ifutf.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp6x6ifutf.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp6x6ifutf.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf6h2jwk9.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpf6h2jwk9.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpf6h2jwk9.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpf6h2jwk9.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpf6h2jwk9.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpf6h2jwk9.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpf6h2jwk9.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpf6h2jwk9.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpf6h2jwk9.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpf6h2jwk9.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpf6h2jwk9.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk67b3ysl.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpk67b3ysl.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpk67b3ysl.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpk67b3ysl.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpk67b3ysl.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpk67b3ysl.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpk67b3ysl.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpk67b3ysl.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpk67b3ysl.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpk67b3ysl.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpk67b3ysl.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2o4bg5q.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpd2o4bg5q.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpd2o4bg5q.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpd2o4bg5q.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpd2o4bg5q.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpd2o4bg5q.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpd2o4bg5q.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpd2o4bg5q.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpd2o4bg5q.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpd2o4bg5q.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpd2o4bg5q.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3nwy1o54.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3nwy1o54.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp3nwy1o54.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3nwy1o54.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3nwy1o54.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3nwy1o54.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp3nwy1o54.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp3nwy1o54.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp3nwy1o54.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp3nwy1o54.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp3nwy1o54.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa8u9updq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpa8u9updq.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpa8u9updq.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpa8u9updq.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpa8u9updq.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpa8u9updq.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpa8u9updq.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpa8u9updq.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpa8u9updq.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpa8u9updq.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpa8u9updq.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ Pair.with(\"\", \"\");\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplcvs723x.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmplcvs723x.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmplcvs723x.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmplcvs723x.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmplcvs723x.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmplcvs723x.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmplcvs723x.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmplcvs723x.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmplcvs723x.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmplcvs723x.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmplcvs723x.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8d1jdbj4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp8d1jdbj4.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp8d1jdbj4.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp8d1jdbj4.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp8d1jdbj4.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp8d1jdbj4.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp8d1jdbj4.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp8d1jdbj4.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp8d1jdbj4.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp8d1jdbj4.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp8d1jdbj4.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzr22zyn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmphzr22zyn.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmphzr22zyn.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmphzr22zyn.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmphzr22zyn.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmphzr22zyn.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmphzr22zyn.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmphzr22zyn.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmphzr22zyn.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmphzr22zyn.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmphzr22zyn.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp629npbbh.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp629npbbh.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp629npbbh.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp629npbbh.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp629npbbh.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp629npbbh.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp629npbbh.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp629npbbh.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp629npbbh.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp629npbbh.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp629npbbh.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi4pgxtx7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpi4pgxtx7.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpi4pgxtx7.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpi4pgxtx7.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpi4pgxtx7.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpi4pgxtx7.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpi4pgxtx7.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpi4pgxtx7.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpi4pgxtx7.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpi4pgxtx7.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpi4pgxtx7.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdrs9wxh7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdrs9wxh7.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpdrs9wxh7.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdrs9wxh7.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdrs9wxh7.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdrs9wxh7.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpdrs9wxh7.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpdrs9wxh7.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpdrs9wxh7.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpdrs9wxh7.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpdrs9wxh7.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7qrtvv33.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp7qrtvv33.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp7qrtvv33.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp7qrtvv33.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp7qrtvv33.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp7qrtvv33.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp7qrtvv33.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp7qrtvv33.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp7qrtvv33.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp7qrtvv33.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp7qrtvv33.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1c2znq3k.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp1c2znq3k.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp1c2znq3k.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp1c2znq3k.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp1c2znq3k.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp1c2znq3k.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp1c2znq3k.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp1c2znq3k.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp1c2znq3k.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp1c2znq3k.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp1c2znq3k.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz_sjj_63.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpz_sjj_63.java:33: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpz_sjj_63.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpz_sjj_63.java:33: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpz_sjj_63.java:33:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpz_sjj_63.java:34: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpz_sjj_63.java:34: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpz_sjj_63.java:34: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpz_sjj_63.java:34:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpz_sjj_63.java:35: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpz_sjj_63.java:35:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6hogq2pu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6hogq2pu.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp6hogq2pu.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp6hogq2pu.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp6hogq2pu.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp6hogq2pu.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp6hogq2pu.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp6hogq2pu.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp6hogq2pu.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp6hogq2pu.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp6hogq2pu.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj2getqno.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpj2getqno.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpj2getqno.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpj2getqno.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpj2getqno.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpj2getqno.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpj2getqno.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpj2getqno.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpj2getqno.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpj2getqno.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpj2getqno.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmz17enx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpsmz17enx.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpsmz17enx.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpsmz17enx.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpsmz17enx.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpsmz17enx.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpsmz17enx.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpsmz17enx.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpsmz17enx.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpsmz17enx.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpsmz17enx.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo53u73gz.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpo53u73gz.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmpo53u73gz.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpo53u73gz.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpo53u73gz.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpo53u73gz.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpo53u73gz.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpo53u73gz.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpo53u73gz.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpo53u73gz.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpo53u73gz.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpo53u73gz.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjyis_4d.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpbjyis_4d.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpbjyis_4d.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpbjyis_4d.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpbjyis_4d.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpbjyis_4d.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpbjyis_4d.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpbjyis_4d.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpbjyis_4d.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpbjyis_4d.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpbjyis_4d.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwh8qc2fa.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpwh8qc2fa.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpwh8qc2fa.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpwh8qc2fa.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpwh8qc2fa.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpwh8qc2fa.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpwh8qc2fa.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpwh8qc2fa.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpwh8qc2fa.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpwh8qc2fa.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpwh8qc2fa.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzw90nwsp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzw90nwsp.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpzw90nwsp.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpzw90nwsp.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpzw90nwsp.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpzw90nwsp.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpzw90nwsp.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpzw90nwsp.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpzw90nwsp.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpzw90nwsp.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpzw90nwsp.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsx3sa_4d.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpsx3sa_4d.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpsx3sa_4d.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpsx3sa_4d.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpsx3sa_4d.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpsx3sa_4d.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpsx3sa_4d.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpsx3sa_4d.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpsx3sa_4d.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpsx3sa_4d.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpsx3sa_4d.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvu151a8z.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpvu151a8z.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpvu151a8z.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpvu151a8z.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpvu151a8z.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpvu151a8z.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpvu151a8z.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpvu151a8z.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpvu151a8z.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpvu151a8z.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpvu151a8z.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpih18pumj.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpih18pumj.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpih18pumj.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpih18pumj.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpih18pumj.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpih18pumj.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpih18pumj.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpih18pumj.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpih18pumj.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpih18pumj.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpih18pumj.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpiwi6sbv0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpiwi6sbv0.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpiwi6sbv0.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpiwi6sbv0.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpiwi6sbv0.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpiwi6sbv0.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpiwi6sbv0.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpiwi6sbv0.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpiwi6sbv0.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpiwi6sbv0.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpiwi6sbv0.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3_itt55.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpu3_itt55.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpu3_itt55.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpu3_itt55.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpu3_itt55.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpu3_itt55.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpu3_itt55.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpu3_itt55.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpu3_itt55.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpu3_itt55.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpu3_itt55.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ new Pair<String, >();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn08t3if1.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpn08t3if1.java:24: error: illegal start of type\n        return\
    \ new Pair<String, >();\n                                ^\n/tmp/tmpn08t3if1.java:32:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpn08t3if1.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpn08t3if1.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpn08t3if1.java:32: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpn08t3if1.java:33:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpn08t3if1.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpn08t3if1.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpn08t3if1.java:33: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpn08t3if1.java:34:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpn08t3if1.java:34: error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsp71ayga.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpsp71ayga.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpsp71ayga.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpsp71ayga.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpsp71ayga.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpsp71ayga.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpsp71ayga.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpsp71ayga.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpsp71ayga.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpsp71ayga.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpsp71ayga.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14mdf7v2.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp14mdf7v2.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp14mdf7v2.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp14mdf7v2.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp14mdf7v2.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp14mdf7v2.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp14mdf7v2.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp14mdf7v2.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp14mdf7v2.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp14mdf7v2.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp14mdf7v2.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        return\
    \ null;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp09j_j2sq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp09j_j2sq.java:32: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp09j_j2sq.java:32: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp09j_j2sq.java:32: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp09j_j2sq.java:32:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp09j_j2sq.java:33: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp09j_j2sq.java:33: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp09j_j2sq.java:33: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp09j_j2sq.java:33:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp09j_j2sq.java:34: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp09j_j2sq.java:34:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb31n9cf7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpb31n9cf7.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpb31n9cf7.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpb31n9cf7.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpb31n9cf7.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpb31n9cf7.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpb31n9cf7.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpb31n9cf7.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpb31n9cf7.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpb31n9cf7.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpb31n9cf7.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxmhjahzu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxmhjahzu.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpxmhjahzu.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpxmhjahzu.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpxmhjahzu.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpxmhjahzu.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpxmhjahzu.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpxmhjahzu.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpxmhjahzu.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpxmhjahzu.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpxmhjahzu.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5p8c8jlq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5p8c8jlq.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp5p8c8jlq.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp5p8c8jlq.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp5p8c8jlq.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp5p8c8jlq.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp5p8c8jlq.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp5p8c8jlq.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp5p8c8jlq.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp5p8c8jlq.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp5p8c8jlq.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0lsc3ov.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpy0lsc3ov.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpy0lsc3ov.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpy0lsc3ov.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpy0lsc3ov.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpy0lsc3ov.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpy0lsc3ov.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpy0lsc3ov.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpy0lsc3ov.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpy0lsc3ov.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpy0lsc3ov.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwws2yukq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpwws2yukq.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpwws2yukq.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpwws2yukq.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpwws2yukq.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpwws2yukq.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpwws2yukq.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpwws2yukq.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpwws2yukq.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpwws2yukq.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpwws2yukq.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt66zgg54.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpt66zgg54.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpt66zgg54.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpt66zgg54.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpt66zgg54.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpt66zgg54.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpt66zgg54.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpt66zgg54.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpt66zgg54.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpt66zgg54.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpt66zgg54.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdfh__eiq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdfh__eiq.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpdfh__eiq.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdfh__eiq.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdfh__eiq.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdfh__eiq.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpdfh__eiq.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpdfh__eiq.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpdfh__eiq.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpdfh__eiq.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpdfh__eiq.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplj63vk49.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmplj63vk49.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmplj63vk49.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmplj63vk49.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmplj63vk49.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmplj63vk49.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmplj63vk49.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmplj63vk49.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmplj63vk49.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmplj63vk49.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmplj63vk49.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp75wftasp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp75wftasp.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp75wftasp.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp75wftasp.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp75wftasp.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp75wftasp.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp75wftasp.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp75wftasp.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp75wftasp.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp75wftasp.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp75wftasp.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6z1oxq6.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpi6z1oxq6.java:33: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpi6z1oxq6.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpi6z1oxq6.java:33: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpi6z1oxq6.java:33:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpi6z1oxq6.java:34: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpi6z1oxq6.java:34: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpi6z1oxq6.java:34: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpi6z1oxq6.java:34:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpi6z1oxq6.java:35: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpi6z1oxq6.java:35:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        return null;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptvris7ar.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmptvris7ar.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmptvris7ar.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmptvris7ar.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmptvris7ar.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmptvris7ar.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmptvris7ar.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmptvris7ar.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmptvris7ar.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmptvris7ar.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmptvris7ar.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmx8126n9.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpmx8126n9.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpmx8126n9.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpmx8126n9.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpmx8126n9.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpmx8126n9.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpmx8126n9.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpmx8126n9.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpmx8126n9.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpmx8126n9.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpmx8126n9.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplggpahgb.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmplggpahgb.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmplggpahgb.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmplggpahgb.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmplggpahgb.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmplggpahgb.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmplggpahgb.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmplggpahgb.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmplggpahgb.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmplggpahgb.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmplggpahgb.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuhfiq8go.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpuhfiq8go.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpuhfiq8go.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpuhfiq8go.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpuhfiq8go.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpuhfiq8go.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpuhfiq8go.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpuhfiq8go.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpuhfiq8go.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpuhfiq8go.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpuhfiq8go.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp49zog4z7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp49zog4z7.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp49zog4z7.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp49zog4z7.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp49zog4z7.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp49zog4z7.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp49zog4z7.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp49zog4z7.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp49zog4z7.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp49zog4z7.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp49zog4z7.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4t3xlj1r.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp4t3xlj1r.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp4t3xlj1r.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp4t3xlj1r.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp4t3xlj1r.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp4t3xlj1r.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp4t3xlj1r.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp4t3xlj1r.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp4t3xlj1r.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp4t3xlj1r.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp4t3xlj1r.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // your code here\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqctnu7qe.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqctnu7qe.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpqctnu7qe.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpqctnu7qe.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpqctnu7qe.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpqctnu7qe.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpqctnu7qe.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpqctnu7qe.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpqctnu7qe.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpqctnu7qe.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpqctnu7qe.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcmg7ztnu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpcmg7ztnu.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpcmg7ztnu.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpcmg7ztnu.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpcmg7ztnu.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpcmg7ztnu.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpcmg7ztnu.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpcmg7ztnu.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpcmg7ztnu.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpcmg7ztnu.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpcmg7ztnu.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfiuo3taw.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfiuo3taw.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpfiuo3taw.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfiuo3taw.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfiuo3taw.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfiuo3taw.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpfiuo3taw.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpfiuo3taw.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpfiuo3taw.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpfiuo3taw.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpfiuo3taw.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8aymms0a.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp8aymms0a.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp8aymms0a.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp8aymms0a.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp8aymms0a.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp8aymms0a.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp8aymms0a.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp8aymms0a.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp8aymms0a.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp8aymms0a.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp8aymms0a.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_61bx8fx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp_61bx8fx.java:31: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp_61bx8fx.java:31: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp_61bx8fx.java:31: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp_61bx8fx.java:31:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp_61bx8fx.java:32: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp_61bx8fx.java:32: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp_61bx8fx.java:32: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp_61bx8fx.java:32:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp_61bx8fx.java:33: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp_61bx8fx.java:33:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_5azwgnw.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp_5azwgnw.java:33: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp_5azwgnw.java:33: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp_5azwgnw.java:33: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp_5azwgnw.java:33:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp_5azwgnw.java:34: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp_5azwgnw.java:34: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp_5azwgnw.java:34: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp_5azwgnw.java:34:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp_5azwgnw.java:35: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp_5azwgnw.java:35:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
