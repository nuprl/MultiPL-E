name: HumanEval_74_total_match
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts two lists of strings and returns\
  \ the list that has \n    // total number of chars in the all strings of the list\
  \ less than the other list.\n    // if the two lists have the same number of chars,\
  \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
  \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    // total_match(['hi',\
  \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    // total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
  \ lst1, ArrayList<String> lst2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(totalMatch((new\
  \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
  \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
  , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
  , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
  , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
  3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
  \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
  \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
